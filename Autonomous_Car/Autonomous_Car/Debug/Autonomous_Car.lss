
Autonomous_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000357c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015c  00800060  0000357c  00003610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008001bc  008001bc  0000376c  2**0
                  ALLOC
  3 .stab         00002340  00000000  00000000  0000376c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f73  00000000  00000000  00005aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00006a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020e  00000000  00000000  00006bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268b  00000000  00000000  00006ded  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014d1  00000000  00000000  00009478  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012ab  00000000  00000000  0000a949  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000bbf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fb  00000000  00000000  0000bdd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a0a  00000000  00000000  0000c0cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cad9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__vector_9>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__lesf2+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ec e7       	ldi	r30, 0x7C	; 124
     162:	f5 e3       	ldi	r31, 0x35	; 53
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	ac 3b       	cpi	r26, 0xBC	; 188
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	ac eb       	ldi	r26, 0xBC	; 188
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a0 3c       	cpi	r26, 0xC0	; 192
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 0d 14 	call	0x281a	; 0x281a <main>
     184:	0c 94 bc 1a 	jmp	0x3578	; 0x3578 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 60 05 	call	0xac0	; 0xac0 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 60 05 	call	0xac0	; 0xac0 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	ac e6       	ldi	r26, 0x6C	; 108
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 46 18 	jmp	0x308c	; 0x308c <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 36 18 	jmp	0x306c	; 0x306c <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 52 18 	jmp	0x30a4	; 0x30a4 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 36 18 	jmp	0x306c	; 0x306c <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 52 18 	jmp	0x30a4	; 0x30a4 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	8c e6       	ldi	r24, 0x6C	; 108
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 46 18 	jmp	0x308c	; 0x308c <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__stack+0x11>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__stack+0x17>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__stack+0x11>
     794:	6c e6       	ldi	r22, 0x6C	; 108
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__stack+0x17>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 36 18 	jmp	0x306c	; 0x306c <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 50 07 	call	0xea0	; 0xea0 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 52 18 	jmp	0x30a4	; 0x30a4 <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 36 18 	jmp	0x306c	; 0x306c <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 50 07 	call	0xea0	; 0xea0 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 52 18 	jmp	0x30a4	; 0x30a4 <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 36 18 	jmp	0x306c	; 0x306c <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 50 07 	call	0xea0	; 0xea0 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 52 18 	jmp	0x30a4	; 0x30a4 <__epilogue_restores__+0x18>

000009a4 <__lesf2>:
     9a4:	a8 e1       	ldi	r26, 0x18	; 24
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 36 18 	jmp	0x306c	; 0x306c <__prologue_saves__+0x18>
     9b0:	69 83       	std	Y+1, r22	; 0x01
     9b2:	7a 83       	std	Y+2, r23	; 0x02
     9b4:	8b 83       	std	Y+3, r24	; 0x03
     9b6:	9c 83       	std	Y+4, r25	; 0x04
     9b8:	2d 83       	std	Y+5, r18	; 0x05
     9ba:	3e 83       	std	Y+6, r19	; 0x06
     9bc:	4f 83       	std	Y+7, r20	; 0x07
     9be:	58 87       	std	Y+8, r21	; 0x08
     9c0:	89 e0       	ldi	r24, 0x09	; 9
     9c2:	e8 2e       	mov	r14, r24
     9c4:	f1 2c       	mov	r15, r1
     9c6:	ec 0e       	add	r14, r28
     9c8:	fd 1e       	adc	r15, r29
     9ca:	ce 01       	movw	r24, r28
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	b7 01       	movw	r22, r14
     9d0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     9d4:	8e 01       	movw	r16, r28
     9d6:	0f 5e       	subi	r16, 0xEF	; 239
     9d8:	1f 4f       	sbci	r17, 0xFF	; 255
     9da:	ce 01       	movw	r24, r28
     9dc:	05 96       	adiw	r24, 0x05	; 5
     9de:	b8 01       	movw	r22, r16
     9e0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     9e4:	89 85       	ldd	r24, Y+9	; 0x09
     9e6:	82 30       	cpi	r24, 0x02	; 2
     9e8:	40 f0       	brcs	.+16     	; 0x9fa <__lesf2+0x56>
     9ea:	89 89       	ldd	r24, Y+17	; 0x11
     9ec:	82 30       	cpi	r24, 0x02	; 2
     9ee:	28 f0       	brcs	.+10     	; 0x9fa <__lesf2+0x56>
     9f0:	c7 01       	movw	r24, r14
     9f2:	b8 01       	movw	r22, r16
     9f4:	0e 94 50 07 	call	0xea0	; 0xea0 <__fpcmp_parts_f>
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <__lesf2+0x58>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	68 96       	adiw	r28, 0x18	; 24
     9fe:	e6 e0       	ldi	r30, 0x06	; 6
     a00:	0c 94 52 18 	jmp	0x30a4	; 0x30a4 <__epilogue_restores__+0x18>

00000a04 <__floatsisf>:
     a04:	a8 e0       	ldi	r26, 0x08	; 8
     a06:	b0 e0       	ldi	r27, 0x00	; 0
     a08:	e8 e0       	ldi	r30, 0x08	; 8
     a0a:	f5 e0       	ldi	r31, 0x05	; 5
     a0c:	0c 94 33 18 	jmp	0x3066	; 0x3066 <__prologue_saves__+0x12>
     a10:	9b 01       	movw	r18, r22
     a12:	ac 01       	movw	r20, r24
     a14:	83 e0       	ldi	r24, 0x03	; 3
     a16:	89 83       	std	Y+1, r24	; 0x01
     a18:	da 01       	movw	r26, r20
     a1a:	c9 01       	movw	r24, r18
     a1c:	88 27       	eor	r24, r24
     a1e:	b7 fd       	sbrc	r27, 7
     a20:	83 95       	inc	r24
     a22:	99 27       	eor	r25, r25
     a24:	aa 27       	eor	r26, r26
     a26:	bb 27       	eor	r27, r27
     a28:	b8 2e       	mov	r11, r24
     a2a:	21 15       	cp	r18, r1
     a2c:	31 05       	cpc	r19, r1
     a2e:	41 05       	cpc	r20, r1
     a30:	51 05       	cpc	r21, r1
     a32:	19 f4       	brne	.+6      	; 0xa3a <__floatsisf+0x36>
     a34:	82 e0       	ldi	r24, 0x02	; 2
     a36:	89 83       	std	Y+1, r24	; 0x01
     a38:	3a c0       	rjmp	.+116    	; 0xaae <__floatsisf+0xaa>
     a3a:	88 23       	and	r24, r24
     a3c:	a9 f0       	breq	.+42     	; 0xa68 <__floatsisf+0x64>
     a3e:	20 30       	cpi	r18, 0x00	; 0
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	38 07       	cpc	r19, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	48 07       	cpc	r20, r24
     a48:	80 e8       	ldi	r24, 0x80	; 128
     a4a:	58 07       	cpc	r21, r24
     a4c:	29 f4       	brne	.+10     	; 0xa58 <__floatsisf+0x54>
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	9f ec       	ldi	r25, 0xCF	; 207
     a56:	30 c0       	rjmp	.+96     	; 0xab8 <__floatsisf+0xb4>
     a58:	ee 24       	eor	r14, r14
     a5a:	ff 24       	eor	r15, r15
     a5c:	87 01       	movw	r16, r14
     a5e:	e2 1a       	sub	r14, r18
     a60:	f3 0a       	sbc	r15, r19
     a62:	04 0b       	sbc	r16, r20
     a64:	15 0b       	sbc	r17, r21
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <__floatsisf+0x68>
     a68:	79 01       	movw	r14, r18
     a6a:	8a 01       	movw	r16, r20
     a6c:	8e e1       	ldi	r24, 0x1E	; 30
     a6e:	c8 2e       	mov	r12, r24
     a70:	d1 2c       	mov	r13, r1
     a72:	dc 82       	std	Y+4, r13	; 0x04
     a74:	cb 82       	std	Y+3, r12	; 0x03
     a76:	ed 82       	std	Y+5, r14	; 0x05
     a78:	fe 82       	std	Y+6, r15	; 0x06
     a7a:	0f 83       	std	Y+7, r16	; 0x07
     a7c:	18 87       	std	Y+8, r17	; 0x08
     a7e:	c8 01       	movw	r24, r16
     a80:	b7 01       	movw	r22, r14
     a82:	0e 94 b4 05 	call	0xb68	; 0xb68 <__clzsi2>
     a86:	01 97       	sbiw	r24, 0x01	; 1
     a88:	18 16       	cp	r1, r24
     a8a:	19 06       	cpc	r1, r25
     a8c:	84 f4       	brge	.+32     	; 0xaae <__floatsisf+0xaa>
     a8e:	08 2e       	mov	r0, r24
     a90:	04 c0       	rjmp	.+8      	; 0xa9a <__floatsisf+0x96>
     a92:	ee 0c       	add	r14, r14
     a94:	ff 1c       	adc	r15, r15
     a96:	00 1f       	adc	r16, r16
     a98:	11 1f       	adc	r17, r17
     a9a:	0a 94       	dec	r0
     a9c:	d2 f7       	brpl	.-12     	; 0xa92 <__floatsisf+0x8e>
     a9e:	ed 82       	std	Y+5, r14	; 0x05
     aa0:	fe 82       	std	Y+6, r15	; 0x06
     aa2:	0f 83       	std	Y+7, r16	; 0x07
     aa4:	18 87       	std	Y+8, r17	; 0x08
     aa6:	c8 1a       	sub	r12, r24
     aa8:	d9 0a       	sbc	r13, r25
     aaa:	dc 82       	std	Y+4, r13	; 0x04
     aac:	cb 82       	std	Y+3, r12	; 0x03
     aae:	ba 82       	std	Y+2, r11	; 0x02
     ab0:	ce 01       	movw	r24, r28
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     ab8:	28 96       	adiw	r28, 0x08	; 8
     aba:	e9 e0       	ldi	r30, 0x09	; 9
     abc:	0c 94 4f 18 	jmp	0x309e	; 0x309e <__epilogue_restores__+0x12>

00000ac0 <__fixsfsi>:
     ac0:	ac e0       	ldi	r26, 0x0C	; 12
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	e6 e6       	ldi	r30, 0x66	; 102
     ac6:	f5 e0       	ldi	r31, 0x05	; 5
     ac8:	0c 94 3a 18 	jmp	0x3074	; 0x3074 <__prologue_saves__+0x20>
     acc:	69 83       	std	Y+1, r22	; 0x01
     ace:	7a 83       	std	Y+2, r23	; 0x02
     ad0:	8b 83       	std	Y+3, r24	; 0x03
     ad2:	9c 83       	std	Y+4, r25	; 0x04
     ad4:	ce 01       	movw	r24, r28
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	be 01       	movw	r22, r28
     ada:	6b 5f       	subi	r22, 0xFB	; 251
     adc:	7f 4f       	sbci	r23, 0xFF	; 255
     ade:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     ae2:	8d 81       	ldd	r24, Y+5	; 0x05
     ae4:	82 30       	cpi	r24, 0x02	; 2
     ae6:	61 f1       	breq	.+88     	; 0xb40 <__fixsfsi+0x80>
     ae8:	82 30       	cpi	r24, 0x02	; 2
     aea:	50 f1       	brcs	.+84     	; 0xb40 <__fixsfsi+0x80>
     aec:	84 30       	cpi	r24, 0x04	; 4
     aee:	21 f4       	brne	.+8      	; 0xaf8 <__fixsfsi+0x38>
     af0:	8e 81       	ldd	r24, Y+6	; 0x06
     af2:	88 23       	and	r24, r24
     af4:	51 f1       	breq	.+84     	; 0xb4a <__fixsfsi+0x8a>
     af6:	2e c0       	rjmp	.+92     	; 0xb54 <__fixsfsi+0x94>
     af8:	2f 81       	ldd	r18, Y+7	; 0x07
     afa:	38 85       	ldd	r19, Y+8	; 0x08
     afc:	37 fd       	sbrc	r19, 7
     afe:	20 c0       	rjmp	.+64     	; 0xb40 <__fixsfsi+0x80>
     b00:	6e 81       	ldd	r22, Y+6	; 0x06
     b02:	2f 31       	cpi	r18, 0x1F	; 31
     b04:	31 05       	cpc	r19, r1
     b06:	1c f0       	brlt	.+6      	; 0xb0e <__fixsfsi+0x4e>
     b08:	66 23       	and	r22, r22
     b0a:	f9 f0       	breq	.+62     	; 0xb4a <__fixsfsi+0x8a>
     b0c:	23 c0       	rjmp	.+70     	; 0xb54 <__fixsfsi+0x94>
     b0e:	8e e1       	ldi	r24, 0x1E	; 30
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	82 1b       	sub	r24, r18
     b14:	93 0b       	sbc	r25, r19
     b16:	29 85       	ldd	r18, Y+9	; 0x09
     b18:	3a 85       	ldd	r19, Y+10	; 0x0a
     b1a:	4b 85       	ldd	r20, Y+11	; 0x0b
     b1c:	5c 85       	ldd	r21, Y+12	; 0x0c
     b1e:	04 c0       	rjmp	.+8      	; 0xb28 <__fixsfsi+0x68>
     b20:	56 95       	lsr	r21
     b22:	47 95       	ror	r20
     b24:	37 95       	ror	r19
     b26:	27 95       	ror	r18
     b28:	8a 95       	dec	r24
     b2a:	d2 f7       	brpl	.-12     	; 0xb20 <__fixsfsi+0x60>
     b2c:	66 23       	and	r22, r22
     b2e:	b1 f0       	breq	.+44     	; 0xb5c <__fixsfsi+0x9c>
     b30:	50 95       	com	r21
     b32:	40 95       	com	r20
     b34:	30 95       	com	r19
     b36:	21 95       	neg	r18
     b38:	3f 4f       	sbci	r19, 0xFF	; 255
     b3a:	4f 4f       	sbci	r20, 0xFF	; 255
     b3c:	5f 4f       	sbci	r21, 0xFF	; 255
     b3e:	0e c0       	rjmp	.+28     	; 0xb5c <__fixsfsi+0x9c>
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	09 c0       	rjmp	.+18     	; 0xb5c <__fixsfsi+0x9c>
     b4a:	2f ef       	ldi	r18, 0xFF	; 255
     b4c:	3f ef       	ldi	r19, 0xFF	; 255
     b4e:	4f ef       	ldi	r20, 0xFF	; 255
     b50:	5f e7       	ldi	r21, 0x7F	; 127
     b52:	04 c0       	rjmp	.+8      	; 0xb5c <__fixsfsi+0x9c>
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e8       	ldi	r21, 0x80	; 128
     b5c:	b9 01       	movw	r22, r18
     b5e:	ca 01       	movw	r24, r20
     b60:	2c 96       	adiw	r28, 0x0c	; 12
     b62:	e2 e0       	ldi	r30, 0x02	; 2
     b64:	0c 94 56 18 	jmp	0x30ac	; 0x30ac <__epilogue_restores__+0x20>

00000b68 <__clzsi2>:
     b68:	ef 92       	push	r14
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	7b 01       	movw	r14, r22
     b72:	8c 01       	movw	r16, r24
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	e8 16       	cp	r14, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	f8 06       	cpc	r15, r24
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	08 07       	cpc	r16, r24
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	18 07       	cpc	r17, r24
     b84:	88 f4       	brcc	.+34     	; 0xba8 <__clzsi2+0x40>
     b86:	8f ef       	ldi	r24, 0xFF	; 255
     b88:	e8 16       	cp	r14, r24
     b8a:	f1 04       	cpc	r15, r1
     b8c:	01 05       	cpc	r16, r1
     b8e:	11 05       	cpc	r17, r1
     b90:	31 f0       	breq	.+12     	; 0xb9e <__clzsi2+0x36>
     b92:	28 f0       	brcs	.+10     	; 0xb9e <__clzsi2+0x36>
     b94:	88 e0       	ldi	r24, 0x08	; 8
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	17 c0       	rjmp	.+46     	; 0xbcc <__clzsi2+0x64>
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	a0 e0       	ldi	r26, 0x00	; 0
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	12 c0       	rjmp	.+36     	; 0xbcc <__clzsi2+0x64>
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	e8 16       	cp	r14, r24
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	f8 06       	cpc	r15, r24
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	08 07       	cpc	r16, r24
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	18 07       	cpc	r17, r24
     bb8:	28 f0       	brcs	.+10     	; 0xbc4 <__clzsi2+0x5c>
     bba:	88 e1       	ldi	r24, 0x18	; 24
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e0       	ldi	r26, 0x00	; 0
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	04 c0       	rjmp	.+8      	; 0xbcc <__clzsi2+0x64>
     bc4:	80 e1       	ldi	r24, 0x10	; 16
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	a0 e0       	ldi	r26, 0x00	; 0
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	20 e2       	ldi	r18, 0x20	; 32
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	28 1b       	sub	r18, r24
     bd6:	39 0b       	sbc	r19, r25
     bd8:	4a 0b       	sbc	r20, r26
     bda:	5b 0b       	sbc	r21, r27
     bdc:	04 c0       	rjmp	.+8      	; 0xbe6 <__clzsi2+0x7e>
     bde:	16 95       	lsr	r17
     be0:	07 95       	ror	r16
     be2:	f7 94       	ror	r15
     be4:	e7 94       	ror	r14
     be6:	8a 95       	dec	r24
     be8:	d2 f7       	brpl	.-12     	; 0xbde <__clzsi2+0x76>
     bea:	f7 01       	movw	r30, r14
     bec:	ec 58       	subi	r30, 0x8C	; 140
     bee:	ff 4f       	sbci	r31, 0xFF	; 255
     bf0:	80 81       	ld	r24, Z
     bf2:	28 1b       	sub	r18, r24
     bf4:	31 09       	sbc	r19, r1
     bf6:	41 09       	sbc	r20, r1
     bf8:	51 09       	sbc	r21, r1
     bfa:	c9 01       	movw	r24, r18
     bfc:	1f 91       	pop	r17
     bfe:	0f 91       	pop	r16
     c00:	ff 90       	pop	r15
     c02:	ef 90       	pop	r14
     c04:	08 95       	ret

00000c06 <__pack_f>:
     c06:	df 92       	push	r13
     c08:	ef 92       	push	r14
     c0a:	ff 92       	push	r15
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	fc 01       	movw	r30, r24
     c12:	e4 80       	ldd	r14, Z+4	; 0x04
     c14:	f5 80       	ldd	r15, Z+5	; 0x05
     c16:	06 81       	ldd	r16, Z+6	; 0x06
     c18:	17 81       	ldd	r17, Z+7	; 0x07
     c1a:	d1 80       	ldd	r13, Z+1	; 0x01
     c1c:	80 81       	ld	r24, Z
     c1e:	82 30       	cpi	r24, 0x02	; 2
     c20:	48 f4       	brcc	.+18     	; 0xc34 <__pack_f+0x2e>
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	a0 e1       	ldi	r26, 0x10	; 16
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e8 2a       	or	r14, r24
     c2c:	f9 2a       	or	r15, r25
     c2e:	0a 2b       	or	r16, r26
     c30:	1b 2b       	or	r17, r27
     c32:	a5 c0       	rjmp	.+330    	; 0xd7e <__pack_f+0x178>
     c34:	84 30       	cpi	r24, 0x04	; 4
     c36:	09 f4       	brne	.+2      	; 0xc3a <__pack_f+0x34>
     c38:	9f c0       	rjmp	.+318    	; 0xd78 <__pack_f+0x172>
     c3a:	82 30       	cpi	r24, 0x02	; 2
     c3c:	21 f4       	brne	.+8      	; 0xc46 <__pack_f+0x40>
     c3e:	ee 24       	eor	r14, r14
     c40:	ff 24       	eor	r15, r15
     c42:	87 01       	movw	r16, r14
     c44:	05 c0       	rjmp	.+10     	; 0xc50 <__pack_f+0x4a>
     c46:	e1 14       	cp	r14, r1
     c48:	f1 04       	cpc	r15, r1
     c4a:	01 05       	cpc	r16, r1
     c4c:	11 05       	cpc	r17, r1
     c4e:	19 f4       	brne	.+6      	; 0xc56 <__pack_f+0x50>
     c50:	e0 e0       	ldi	r30, 0x00	; 0
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	96 c0       	rjmp	.+300    	; 0xd82 <__pack_f+0x17c>
     c56:	62 81       	ldd	r22, Z+2	; 0x02
     c58:	73 81       	ldd	r23, Z+3	; 0x03
     c5a:	9f ef       	ldi	r25, 0xFF	; 255
     c5c:	62 38       	cpi	r22, 0x82	; 130
     c5e:	79 07       	cpc	r23, r25
     c60:	0c f0       	brlt	.+2      	; 0xc64 <__pack_f+0x5e>
     c62:	5b c0       	rjmp	.+182    	; 0xd1a <__pack_f+0x114>
     c64:	22 e8       	ldi	r18, 0x82	; 130
     c66:	3f ef       	ldi	r19, 0xFF	; 255
     c68:	26 1b       	sub	r18, r22
     c6a:	37 0b       	sbc	r19, r23
     c6c:	2a 31       	cpi	r18, 0x1A	; 26
     c6e:	31 05       	cpc	r19, r1
     c70:	2c f0       	brlt	.+10     	; 0xc7c <__pack_f+0x76>
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	50 e0       	ldi	r21, 0x00	; 0
     c7a:	2a c0       	rjmp	.+84     	; 0xcd0 <__pack_f+0xca>
     c7c:	b8 01       	movw	r22, r16
     c7e:	a7 01       	movw	r20, r14
     c80:	02 2e       	mov	r0, r18
     c82:	04 c0       	rjmp	.+8      	; 0xc8c <__pack_f+0x86>
     c84:	76 95       	lsr	r23
     c86:	67 95       	ror	r22
     c88:	57 95       	ror	r21
     c8a:	47 95       	ror	r20
     c8c:	0a 94       	dec	r0
     c8e:	d2 f7       	brpl	.-12     	; 0xc84 <__pack_f+0x7e>
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	a0 e0       	ldi	r26, 0x00	; 0
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	04 c0       	rjmp	.+8      	; 0xca2 <__pack_f+0x9c>
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	aa 1f       	adc	r26, r26
     ca0:	bb 1f       	adc	r27, r27
     ca2:	2a 95       	dec	r18
     ca4:	d2 f7       	brpl	.-12     	; 0xc9a <__pack_f+0x94>
     ca6:	01 97       	sbiw	r24, 0x01	; 1
     ca8:	a1 09       	sbc	r26, r1
     caa:	b1 09       	sbc	r27, r1
     cac:	8e 21       	and	r24, r14
     cae:	9f 21       	and	r25, r15
     cb0:	a0 23       	and	r26, r16
     cb2:	b1 23       	and	r27, r17
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	a1 05       	cpc	r26, r1
     cb8:	b1 05       	cpc	r27, r1
     cba:	21 f0       	breq	.+8      	; 0xcc4 <__pack_f+0xbe>
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	a0 e0       	ldi	r26, 0x00	; 0
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	9a 01       	movw	r18, r20
     cc6:	ab 01       	movw	r20, r22
     cc8:	28 2b       	or	r18, r24
     cca:	39 2b       	or	r19, r25
     ccc:	4a 2b       	or	r20, r26
     cce:	5b 2b       	or	r21, r27
     cd0:	da 01       	movw	r26, r20
     cd2:	c9 01       	movw	r24, r18
     cd4:	8f 77       	andi	r24, 0x7F	; 127
     cd6:	90 70       	andi	r25, 0x00	; 0
     cd8:	a0 70       	andi	r26, 0x00	; 0
     cda:	b0 70       	andi	r27, 0x00	; 0
     cdc:	80 34       	cpi	r24, 0x40	; 64
     cde:	91 05       	cpc	r25, r1
     ce0:	a1 05       	cpc	r26, r1
     ce2:	b1 05       	cpc	r27, r1
     ce4:	39 f4       	brne	.+14     	; 0xcf4 <__pack_f+0xee>
     ce6:	27 ff       	sbrs	r18, 7
     ce8:	09 c0       	rjmp	.+18     	; 0xcfc <__pack_f+0xf6>
     cea:	20 5c       	subi	r18, 0xC0	; 192
     cec:	3f 4f       	sbci	r19, 0xFF	; 255
     cee:	4f 4f       	sbci	r20, 0xFF	; 255
     cf0:	5f 4f       	sbci	r21, 0xFF	; 255
     cf2:	04 c0       	rjmp	.+8      	; 0xcfc <__pack_f+0xf6>
     cf4:	21 5c       	subi	r18, 0xC1	; 193
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
     cf8:	4f 4f       	sbci	r20, 0xFF	; 255
     cfa:	5f 4f       	sbci	r21, 0xFF	; 255
     cfc:	e0 e0       	ldi	r30, 0x00	; 0
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	20 30       	cpi	r18, 0x00	; 0
     d02:	a0 e0       	ldi	r26, 0x00	; 0
     d04:	3a 07       	cpc	r19, r26
     d06:	a0 e0       	ldi	r26, 0x00	; 0
     d08:	4a 07       	cpc	r20, r26
     d0a:	a0 e4       	ldi	r26, 0x40	; 64
     d0c:	5a 07       	cpc	r21, r26
     d0e:	10 f0       	brcs	.+4      	; 0xd14 <__pack_f+0x10e>
     d10:	e1 e0       	ldi	r30, 0x01	; 1
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	79 01       	movw	r14, r18
     d16:	8a 01       	movw	r16, r20
     d18:	27 c0       	rjmp	.+78     	; 0xd68 <__pack_f+0x162>
     d1a:	60 38       	cpi	r22, 0x80	; 128
     d1c:	71 05       	cpc	r23, r1
     d1e:	64 f5       	brge	.+88     	; 0xd78 <__pack_f+0x172>
     d20:	fb 01       	movw	r30, r22
     d22:	e1 58       	subi	r30, 0x81	; 129
     d24:	ff 4f       	sbci	r31, 0xFF	; 255
     d26:	d8 01       	movw	r26, r16
     d28:	c7 01       	movw	r24, r14
     d2a:	8f 77       	andi	r24, 0x7F	; 127
     d2c:	90 70       	andi	r25, 0x00	; 0
     d2e:	a0 70       	andi	r26, 0x00	; 0
     d30:	b0 70       	andi	r27, 0x00	; 0
     d32:	80 34       	cpi	r24, 0x40	; 64
     d34:	91 05       	cpc	r25, r1
     d36:	a1 05       	cpc	r26, r1
     d38:	b1 05       	cpc	r27, r1
     d3a:	39 f4       	brne	.+14     	; 0xd4a <__pack_f+0x144>
     d3c:	e7 fe       	sbrs	r14, 7
     d3e:	0d c0       	rjmp	.+26     	; 0xd5a <__pack_f+0x154>
     d40:	80 e4       	ldi	r24, 0x40	; 64
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	a0 e0       	ldi	r26, 0x00	; 0
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	04 c0       	rjmp	.+8      	; 0xd52 <__pack_f+0x14c>
     d4a:	8f e3       	ldi	r24, 0x3F	; 63
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	a0 e0       	ldi	r26, 0x00	; 0
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e8 0e       	add	r14, r24
     d54:	f9 1e       	adc	r15, r25
     d56:	0a 1f       	adc	r16, r26
     d58:	1b 1f       	adc	r17, r27
     d5a:	17 ff       	sbrs	r17, 7
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__pack_f+0x162>
     d5e:	16 95       	lsr	r17
     d60:	07 95       	ror	r16
     d62:	f7 94       	ror	r15
     d64:	e7 94       	ror	r14
     d66:	31 96       	adiw	r30, 0x01	; 1
     d68:	87 e0       	ldi	r24, 0x07	; 7
     d6a:	16 95       	lsr	r17
     d6c:	07 95       	ror	r16
     d6e:	f7 94       	ror	r15
     d70:	e7 94       	ror	r14
     d72:	8a 95       	dec	r24
     d74:	d1 f7       	brne	.-12     	; 0xd6a <__pack_f+0x164>
     d76:	05 c0       	rjmp	.+10     	; 0xd82 <__pack_f+0x17c>
     d78:	ee 24       	eor	r14, r14
     d7a:	ff 24       	eor	r15, r15
     d7c:	87 01       	movw	r16, r14
     d7e:	ef ef       	ldi	r30, 0xFF	; 255
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	6e 2f       	mov	r22, r30
     d84:	67 95       	ror	r22
     d86:	66 27       	eor	r22, r22
     d88:	67 95       	ror	r22
     d8a:	90 2f       	mov	r25, r16
     d8c:	9f 77       	andi	r25, 0x7F	; 127
     d8e:	d7 94       	ror	r13
     d90:	dd 24       	eor	r13, r13
     d92:	d7 94       	ror	r13
     d94:	8e 2f       	mov	r24, r30
     d96:	86 95       	lsr	r24
     d98:	49 2f       	mov	r20, r25
     d9a:	46 2b       	or	r20, r22
     d9c:	58 2f       	mov	r21, r24
     d9e:	5d 29       	or	r21, r13
     da0:	b7 01       	movw	r22, r14
     da2:	ca 01       	movw	r24, r20
     da4:	1f 91       	pop	r17
     da6:	0f 91       	pop	r16
     da8:	ff 90       	pop	r15
     daa:	ef 90       	pop	r14
     dac:	df 90       	pop	r13
     dae:	08 95       	ret

00000db0 <__unpack_f>:
     db0:	fc 01       	movw	r30, r24
     db2:	db 01       	movw	r26, r22
     db4:	40 81       	ld	r20, Z
     db6:	51 81       	ldd	r21, Z+1	; 0x01
     db8:	22 81       	ldd	r18, Z+2	; 0x02
     dba:	62 2f       	mov	r22, r18
     dbc:	6f 77       	andi	r22, 0x7F	; 127
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	22 1f       	adc	r18, r18
     dc2:	22 27       	eor	r18, r18
     dc4:	22 1f       	adc	r18, r18
     dc6:	93 81       	ldd	r25, Z+3	; 0x03
     dc8:	89 2f       	mov	r24, r25
     dca:	88 0f       	add	r24, r24
     dcc:	82 2b       	or	r24, r18
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	99 1f       	adc	r25, r25
     dd4:	99 27       	eor	r25, r25
     dd6:	99 1f       	adc	r25, r25
     dd8:	11 96       	adiw	r26, 0x01	; 1
     dda:	9c 93       	st	X, r25
     ddc:	11 97       	sbiw	r26, 0x01	; 1
     dde:	21 15       	cp	r18, r1
     de0:	31 05       	cpc	r19, r1
     de2:	a9 f5       	brne	.+106    	; 0xe4e <__unpack_f+0x9e>
     de4:	41 15       	cp	r20, r1
     de6:	51 05       	cpc	r21, r1
     de8:	61 05       	cpc	r22, r1
     dea:	71 05       	cpc	r23, r1
     dec:	11 f4       	brne	.+4      	; 0xdf2 <__unpack_f+0x42>
     dee:	82 e0       	ldi	r24, 0x02	; 2
     df0:	37 c0       	rjmp	.+110    	; 0xe60 <__unpack_f+0xb0>
     df2:	82 e8       	ldi	r24, 0x82	; 130
     df4:	9f ef       	ldi	r25, 0xFF	; 255
     df6:	13 96       	adiw	r26, 0x03	; 3
     df8:	9c 93       	st	X, r25
     dfa:	8e 93       	st	-X, r24
     dfc:	12 97       	sbiw	r26, 0x02	; 2
     dfe:	9a 01       	movw	r18, r20
     e00:	ab 01       	movw	r20, r22
     e02:	67 e0       	ldi	r22, 0x07	; 7
     e04:	22 0f       	add	r18, r18
     e06:	33 1f       	adc	r19, r19
     e08:	44 1f       	adc	r20, r20
     e0a:	55 1f       	adc	r21, r21
     e0c:	6a 95       	dec	r22
     e0e:	d1 f7       	brne	.-12     	; 0xe04 <__unpack_f+0x54>
     e10:	83 e0       	ldi	r24, 0x03	; 3
     e12:	8c 93       	st	X, r24
     e14:	0d c0       	rjmp	.+26     	; 0xe30 <__unpack_f+0x80>
     e16:	22 0f       	add	r18, r18
     e18:	33 1f       	adc	r19, r19
     e1a:	44 1f       	adc	r20, r20
     e1c:	55 1f       	adc	r21, r21
     e1e:	12 96       	adiw	r26, 0x02	; 2
     e20:	8d 91       	ld	r24, X+
     e22:	9c 91       	ld	r25, X
     e24:	13 97       	sbiw	r26, 0x03	; 3
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	13 96       	adiw	r26, 0x03	; 3
     e2a:	9c 93       	st	X, r25
     e2c:	8e 93       	st	-X, r24
     e2e:	12 97       	sbiw	r26, 0x02	; 2
     e30:	20 30       	cpi	r18, 0x00	; 0
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	38 07       	cpc	r19, r24
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	48 07       	cpc	r20, r24
     e3a:	80 e4       	ldi	r24, 0x40	; 64
     e3c:	58 07       	cpc	r21, r24
     e3e:	58 f3       	brcs	.-42     	; 0xe16 <__unpack_f+0x66>
     e40:	14 96       	adiw	r26, 0x04	; 4
     e42:	2d 93       	st	X+, r18
     e44:	3d 93       	st	X+, r19
     e46:	4d 93       	st	X+, r20
     e48:	5c 93       	st	X, r21
     e4a:	17 97       	sbiw	r26, 0x07	; 7
     e4c:	08 95       	ret
     e4e:	2f 3f       	cpi	r18, 0xFF	; 255
     e50:	31 05       	cpc	r19, r1
     e52:	79 f4       	brne	.+30     	; 0xe72 <__unpack_f+0xc2>
     e54:	41 15       	cp	r20, r1
     e56:	51 05       	cpc	r21, r1
     e58:	61 05       	cpc	r22, r1
     e5a:	71 05       	cpc	r23, r1
     e5c:	19 f4       	brne	.+6      	; 0xe64 <__unpack_f+0xb4>
     e5e:	84 e0       	ldi	r24, 0x04	; 4
     e60:	8c 93       	st	X, r24
     e62:	08 95       	ret
     e64:	64 ff       	sbrs	r22, 4
     e66:	03 c0       	rjmp	.+6      	; 0xe6e <__unpack_f+0xbe>
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	8c 93       	st	X, r24
     e6c:	12 c0       	rjmp	.+36     	; 0xe92 <__unpack_f+0xe2>
     e6e:	1c 92       	st	X, r1
     e70:	10 c0       	rjmp	.+32     	; 0xe92 <__unpack_f+0xe2>
     e72:	2f 57       	subi	r18, 0x7F	; 127
     e74:	30 40       	sbci	r19, 0x00	; 0
     e76:	13 96       	adiw	r26, 0x03	; 3
     e78:	3c 93       	st	X, r19
     e7a:	2e 93       	st	-X, r18
     e7c:	12 97       	sbiw	r26, 0x02	; 2
     e7e:	83 e0       	ldi	r24, 0x03	; 3
     e80:	8c 93       	st	X, r24
     e82:	87 e0       	ldi	r24, 0x07	; 7
     e84:	44 0f       	add	r20, r20
     e86:	55 1f       	adc	r21, r21
     e88:	66 1f       	adc	r22, r22
     e8a:	77 1f       	adc	r23, r23
     e8c:	8a 95       	dec	r24
     e8e:	d1 f7       	brne	.-12     	; 0xe84 <__unpack_f+0xd4>
     e90:	70 64       	ori	r23, 0x40	; 64
     e92:	14 96       	adiw	r26, 0x04	; 4
     e94:	4d 93       	st	X+, r20
     e96:	5d 93       	st	X+, r21
     e98:	6d 93       	st	X+, r22
     e9a:	7c 93       	st	X, r23
     e9c:	17 97       	sbiw	r26, 0x07	; 7
     e9e:	08 95       	ret

00000ea0 <__fpcmp_parts_f>:
     ea0:	1f 93       	push	r17
     ea2:	dc 01       	movw	r26, r24
     ea4:	fb 01       	movw	r30, r22
     ea6:	9c 91       	ld	r25, X
     ea8:	92 30       	cpi	r25, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0xe>
     eac:	47 c0       	rjmp	.+142    	; 0xf3c <__fpcmp_parts_f+0x9c>
     eae:	80 81       	ld	r24, Z
     eb0:	82 30       	cpi	r24, 0x02	; 2
     eb2:	08 f4       	brcc	.+2      	; 0xeb6 <__fpcmp_parts_f+0x16>
     eb4:	43 c0       	rjmp	.+134    	; 0xf3c <__fpcmp_parts_f+0x9c>
     eb6:	94 30       	cpi	r25, 0x04	; 4
     eb8:	51 f4       	brne	.+20     	; 0xece <__fpcmp_parts_f+0x2e>
     eba:	11 96       	adiw	r26, 0x01	; 1
     ebc:	1c 91       	ld	r17, X
     ebe:	84 30       	cpi	r24, 0x04	; 4
     ec0:	99 f5       	brne	.+102    	; 0xf28 <__fpcmp_parts_f+0x88>
     ec2:	81 81       	ldd	r24, Z+1	; 0x01
     ec4:	68 2f       	mov	r22, r24
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	61 1b       	sub	r22, r17
     eca:	71 09       	sbc	r23, r1
     ecc:	3f c0       	rjmp	.+126    	; 0xf4c <__fpcmp_parts_f+0xac>
     ece:	84 30       	cpi	r24, 0x04	; 4
     ed0:	21 f0       	breq	.+8      	; 0xeda <__fpcmp_parts_f+0x3a>
     ed2:	92 30       	cpi	r25, 0x02	; 2
     ed4:	31 f4       	brne	.+12     	; 0xee2 <__fpcmp_parts_f+0x42>
     ed6:	82 30       	cpi	r24, 0x02	; 2
     ed8:	b9 f1       	breq	.+110    	; 0xf48 <__fpcmp_parts_f+0xa8>
     eda:	81 81       	ldd	r24, Z+1	; 0x01
     edc:	88 23       	and	r24, r24
     ede:	89 f1       	breq	.+98     	; 0xf42 <__fpcmp_parts_f+0xa2>
     ee0:	2d c0       	rjmp	.+90     	; 0xf3c <__fpcmp_parts_f+0x9c>
     ee2:	11 96       	adiw	r26, 0x01	; 1
     ee4:	1c 91       	ld	r17, X
     ee6:	11 97       	sbiw	r26, 0x01	; 1
     ee8:	82 30       	cpi	r24, 0x02	; 2
     eea:	f1 f0       	breq	.+60     	; 0xf28 <__fpcmp_parts_f+0x88>
     eec:	81 81       	ldd	r24, Z+1	; 0x01
     eee:	18 17       	cp	r17, r24
     ef0:	d9 f4       	brne	.+54     	; 0xf28 <__fpcmp_parts_f+0x88>
     ef2:	12 96       	adiw	r26, 0x02	; 2
     ef4:	2d 91       	ld	r18, X+
     ef6:	3c 91       	ld	r19, X
     ef8:	13 97       	sbiw	r26, 0x03	; 3
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	93 81       	ldd	r25, Z+3	; 0x03
     efe:	82 17       	cp	r24, r18
     f00:	93 07       	cpc	r25, r19
     f02:	94 f0       	brlt	.+36     	; 0xf28 <__fpcmp_parts_f+0x88>
     f04:	28 17       	cp	r18, r24
     f06:	39 07       	cpc	r19, r25
     f08:	bc f0       	brlt	.+46     	; 0xf38 <__fpcmp_parts_f+0x98>
     f0a:	14 96       	adiw	r26, 0x04	; 4
     f0c:	8d 91       	ld	r24, X+
     f0e:	9d 91       	ld	r25, X+
     f10:	0d 90       	ld	r0, X+
     f12:	bc 91       	ld	r27, X
     f14:	a0 2d       	mov	r26, r0
     f16:	24 81       	ldd	r18, Z+4	; 0x04
     f18:	35 81       	ldd	r19, Z+5	; 0x05
     f1a:	46 81       	ldd	r20, Z+6	; 0x06
     f1c:	57 81       	ldd	r21, Z+7	; 0x07
     f1e:	28 17       	cp	r18, r24
     f20:	39 07       	cpc	r19, r25
     f22:	4a 07       	cpc	r20, r26
     f24:	5b 07       	cpc	r21, r27
     f26:	18 f4       	brcc	.+6      	; 0xf2e <__fpcmp_parts_f+0x8e>
     f28:	11 23       	and	r17, r17
     f2a:	41 f0       	breq	.+16     	; 0xf3c <__fpcmp_parts_f+0x9c>
     f2c:	0a c0       	rjmp	.+20     	; 0xf42 <__fpcmp_parts_f+0xa2>
     f2e:	82 17       	cp	r24, r18
     f30:	93 07       	cpc	r25, r19
     f32:	a4 07       	cpc	r26, r20
     f34:	b5 07       	cpc	r27, r21
     f36:	40 f4       	brcc	.+16     	; 0xf48 <__fpcmp_parts_f+0xa8>
     f38:	11 23       	and	r17, r17
     f3a:	19 f0       	breq	.+6      	; 0xf42 <__fpcmp_parts_f+0xa2>
     f3c:	61 e0       	ldi	r22, 0x01	; 1
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	05 c0       	rjmp	.+10     	; 0xf4c <__fpcmp_parts_f+0xac>
     f42:	6f ef       	ldi	r22, 0xFF	; 255
     f44:	7f ef       	ldi	r23, 0xFF	; 255
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <__fpcmp_parts_f+0xac>
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	cb 01       	movw	r24, r22
     f4e:	1f 91       	pop	r17
     f50:	08 95       	ret

00000f52 <DIO_WriteChannel>:
*  Author: user
*/

#include "DIO.h"

void DIO_WriteChannel(DIO_ChannelTypes channelId,STD_LevelTypes level){
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	00 d0       	rcall	.+0      	; 0xf58 <DIO_WriteChannel+0x6>
     f58:	00 d0       	rcall	.+0      	; 0xf5a <DIO_WriteChannel+0x8>
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <DIO_WriteChannel+0xa>
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	8b 83       	std	Y+3, r24	; 0x03
     f62:	6c 83       	std	Y+4, r22	; 0x04
	DIO_PortTypes Portx	= channelId/8;
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	86 95       	lsr	r24
     f68:	86 95       	lsr	r24
     f6a:	86 95       	lsr	r24
     f6c:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ChannelTypes BitNo = channelId%8;
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	87 70       	andi	r24, 0x07	; 7
     f72:	89 83       	std	Y+1, r24	; 0x01
	switch (Portx)
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	3e 83       	std	Y+6, r19	; 0x06
     f7c:	2d 83       	std	Y+5, r18	; 0x05
     f7e:	8d 81       	ldd	r24, Y+5	; 0x05
     f80:	9e 81       	ldd	r25, Y+6	; 0x06
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	91 05       	cpc	r25, r1
     f86:	09 f4       	brne	.+2      	; 0xf8a <DIO_WriteChannel+0x38>
     f88:	43 c0       	rjmp	.+134    	; 0x1010 <DIO_WriteChannel+0xbe>
     f8a:	2d 81       	ldd	r18, Y+5	; 0x05
     f8c:	3e 81       	ldd	r19, Y+6	; 0x06
     f8e:	22 30       	cpi	r18, 0x02	; 2
     f90:	31 05       	cpc	r19, r1
     f92:	2c f4       	brge	.+10     	; 0xf9e <DIO_WriteChannel+0x4c>
     f94:	8d 81       	ldd	r24, Y+5	; 0x05
     f96:	9e 81       	ldd	r25, Y+6	; 0x06
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	71 f0       	breq	.+28     	; 0xfb8 <DIO_WriteChannel+0x66>
     f9c:	bc c0       	rjmp	.+376    	; 0x1116 <DIO_WriteChannel+0x1c4>
     f9e:	2d 81       	ldd	r18, Y+5	; 0x05
     fa0:	3e 81       	ldd	r19, Y+6	; 0x06
     fa2:	22 30       	cpi	r18, 0x02	; 2
     fa4:	31 05       	cpc	r19, r1
     fa6:	09 f4       	brne	.+2      	; 0xfaa <DIO_WriteChannel+0x58>
     fa8:	5f c0       	rjmp	.+190    	; 0x1068 <DIO_WriteChannel+0x116>
     faa:	8d 81       	ldd	r24, Y+5	; 0x05
     fac:	9e 81       	ldd	r25, Y+6	; 0x06
     fae:	83 30       	cpi	r24, 0x03	; 3
     fb0:	91 05       	cpc	r25, r1
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <DIO_WriteChannel+0x64>
     fb4:	85 c0       	rjmp	.+266    	; 0x10c0 <DIO_WriteChannel+0x16e>
     fb6:	af c0       	rjmp	.+350    	; 0x1116 <DIO_WriteChannel+0x1c4>
	{
		case DIO_PortA:
		if (level == STD_High)
     fb8:	8c 81       	ldd	r24, Y+4	; 0x04
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	a1 f4       	brne	.+40     	; 0xfe6 <DIO_WriteChannel+0x94>
		{
			SetBit(PORTA_Reg,BitNo);
     fbe:	ab e3       	ldi	r26, 0x3B	; 59
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	eb e3       	ldi	r30, 0x3B	; 59
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_WriteChannel+0x8a>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_WriteChannel+0x86>
     fe0:	84 2b       	or	r24, r20
     fe2:	8c 93       	st	X, r24
     fe4:	98 c0       	rjmp	.+304    	; 0x1116 <DIO_WriteChannel+0x1c4>
		}
		else{
			ClearBit(PORTA_Reg,BitNo);
     fe6:	ab e3       	ldi	r26, 0x3B	; 59
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	eb e3       	ldi	r30, 0x3B	; 59
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 2e       	mov	r0, r18
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <DIO_WriteChannel+0xb2>
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	0a 94       	dec	r0
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <DIO_WriteChannel+0xae>
    1008:	80 95       	com	r24
    100a:	84 23       	and	r24, r20
    100c:	8c 93       	st	X, r24
    100e:	83 c0       	rjmp	.+262    	; 0x1116 <DIO_WriteChannel+0x1c4>
		}
		break;
		case DIO_PortB:
		if (level == STD_High)
    1010:	8c 81       	ldd	r24, Y+4	; 0x04
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	a1 f4       	brne	.+40     	; 0x103e <DIO_WriteChannel+0xec>
		{
			SetBit(PORTB_Reg,BitNo);
    1016:	a8 e3       	ldi	r26, 0x38	; 56
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e8 e3       	ldi	r30, 0x38	; 56
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 2e       	mov	r0, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <DIO_WriteChannel+0xe2>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	0a 94       	dec	r0
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <DIO_WriteChannel+0xde>
    1038:	84 2b       	or	r24, r20
    103a:	8c 93       	st	X, r24
    103c:	6c c0       	rjmp	.+216    	; 0x1116 <DIO_WriteChannel+0x1c4>
		}
		else{
			ClearBit(PORTB_Reg,BitNo);
    103e:	a8 e3       	ldi	r26, 0x38	; 56
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e8 e3       	ldi	r30, 0x38	; 56
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 2e       	mov	r0, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <DIO_WriteChannel+0x10a>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	0a 94       	dec	r0
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <DIO_WriteChannel+0x106>
    1060:	80 95       	com	r24
    1062:	84 23       	and	r24, r20
    1064:	8c 93       	st	X, r24
    1066:	57 c0       	rjmp	.+174    	; 0x1116 <DIO_WriteChannel+0x1c4>
		}
		break;
		case DIO_PortC:
		if (level == STD_High)
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	a1 f4       	brne	.+40     	; 0x1096 <DIO_WriteChannel+0x144>
		{
			SetBit(PORTC_Reg,BitNo);
    106e:	a5 e3       	ldi	r26, 0x35	; 53
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e5 e3       	ldi	r30, 0x35	; 53
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <DIO_WriteChannel+0x13a>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <DIO_WriteChannel+0x136>
    1090:	84 2b       	or	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	40 c0       	rjmp	.+128    	; 0x1116 <DIO_WriteChannel+0x1c4>
		}
		else{
			ClearBit(PORTC_Reg,BitNo);
    1096:	a5 e3       	ldi	r26, 0x35	; 53
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e5 e3       	ldi	r30, 0x35	; 53
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <DIO_WriteChannel+0x162>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <DIO_WriteChannel+0x15e>
    10b8:	80 95       	com	r24
    10ba:	84 23       	and	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	2b c0       	rjmp	.+86     	; 0x1116 <DIO_WriteChannel+0x1c4>
		}
		break;
		case DIO_PortD:
		if (level == STD_High)
    10c0:	8c 81       	ldd	r24, Y+4	; 0x04
    10c2:	81 30       	cpi	r24, 0x01	; 1
    10c4:	a1 f4       	brne	.+40     	; 0x10ee <DIO_WriteChannel+0x19c>
		{
			SetBit(PORTD_Reg,BitNo);
    10c6:	a2 e3       	ldi	r26, 0x32	; 50
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e2 e3       	ldi	r30, 0x32	; 50
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	48 2f       	mov	r20, r24
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 2e       	mov	r0, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <DIO_WriteChannel+0x192>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	0a 94       	dec	r0
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <DIO_WriteChannel+0x18e>
    10e8:	84 2b       	or	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	14 c0       	rjmp	.+40     	; 0x1116 <DIO_WriteChannel+0x1c4>
		}
		else{
			ClearBit(PORTD_Reg,BitNo);
    10ee:	a2 e3       	ldi	r26, 0x32	; 50
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e2 e3       	ldi	r30, 0x32	; 50
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <DIO_WriteChannel+0x1ba>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <DIO_WriteChannel+0x1b6>
    1110:	80 95       	com	r24
    1112:	84 23       	and	r24, r20
    1114:	8c 93       	st	X, r24
		}
		break;
	}
}
    1116:	26 96       	adiw	r28, 0x06	; 6
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <DIO_ReadChannel>:


STD_LevelTypes DIO_ReadChannel(DIO_ChannelTypes channelId){
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	00 d0       	rcall	.+0      	; 0x112e <DIO_ReadChannel+0x6>
    112e:	00 d0       	rcall	.+0      	; 0x1130 <DIO_ReadChannel+0x8>
    1130:	00 d0       	rcall	.+0      	; 0x1132 <DIO_ReadChannel+0xa>
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	8c 83       	std	Y+4, r24	; 0x04
	DIO_PortTypes Portx	= channelId/8;
    1138:	8c 81       	ldd	r24, Y+4	; 0x04
    113a:	86 95       	lsr	r24
    113c:	86 95       	lsr	r24
    113e:	86 95       	lsr	r24
    1140:	8b 83       	std	Y+3, r24	; 0x03
	DIO_ChannelTypes BitNo = channelId%8;
    1142:	8c 81       	ldd	r24, Y+4	; 0x04
    1144:	87 70       	andi	r24, 0x07	; 7
    1146:	8a 83       	std	Y+2, r24	; 0x02
	STD_LevelTypes BitValue = STD_Low;
    1148:	19 82       	std	Y+1, r1	; 0x01
	switch(Portx){
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	3e 83       	std	Y+6, r19	; 0x06
    1152:	2d 83       	std	Y+5, r18	; 0x05
    1154:	4d 81       	ldd	r20, Y+5	; 0x05
    1156:	5e 81       	ldd	r21, Y+6	; 0x06
    1158:	41 30       	cpi	r20, 0x01	; 1
    115a:	51 05       	cpc	r21, r1
    115c:	41 f1       	breq	.+80     	; 0x11ae <DIO_ReadChannel+0x86>
    115e:	8d 81       	ldd	r24, Y+5	; 0x05
    1160:	9e 81       	ldd	r25, Y+6	; 0x06
    1162:	82 30       	cpi	r24, 0x02	; 2
    1164:	91 05       	cpc	r25, r1
    1166:	34 f4       	brge	.+12     	; 0x1174 <DIO_ReadChannel+0x4c>
    1168:	2d 81       	ldd	r18, Y+5	; 0x05
    116a:	3e 81       	ldd	r19, Y+6	; 0x06
    116c:	21 15       	cp	r18, r1
    116e:	31 05       	cpc	r19, r1
    1170:	61 f0       	breq	.+24     	; 0x118a <DIO_ReadChannel+0x62>
    1172:	52 c0       	rjmp	.+164    	; 0x1218 <DIO_ReadChannel+0xf0>
    1174:	4d 81       	ldd	r20, Y+5	; 0x05
    1176:	5e 81       	ldd	r21, Y+6	; 0x06
    1178:	42 30       	cpi	r20, 0x02	; 2
    117a:	51 05       	cpc	r21, r1
    117c:	51 f1       	breq	.+84     	; 0x11d2 <DIO_ReadChannel+0xaa>
    117e:	8d 81       	ldd	r24, Y+5	; 0x05
    1180:	9e 81       	ldd	r25, Y+6	; 0x06
    1182:	83 30       	cpi	r24, 0x03	; 3
    1184:	91 05       	cpc	r25, r1
    1186:	b9 f1       	breq	.+110    	; 0x11f6 <DIO_ReadChannel+0xce>
    1188:	47 c0       	rjmp	.+142    	; 0x1218 <DIO_ReadChannel+0xf0>
		case DIO_PortA:
		BitValue = GetBit(PINA_Reg,BitNo);
    118a:	e9 e3       	ldi	r30, 0x39	; 57
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	a9 01       	movw	r20, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <DIO_ReadChannel+0x7a>
    119e:	55 95       	asr	r21
    11a0:	47 95       	ror	r20
    11a2:	8a 95       	dec	r24
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <DIO_ReadChannel+0x76>
    11a6:	ca 01       	movw	r24, r20
    11a8:	81 70       	andi	r24, 0x01	; 1
    11aa:	89 83       	std	Y+1, r24	; 0x01
    11ac:	35 c0       	rjmp	.+106    	; 0x1218 <DIO_ReadChannel+0xf0>
		break;
		case DIO_PortB:
		BitValue = GetBit(PINB_Reg,BitNo);
    11ae:	e6 e3       	ldi	r30, 0x36	; 54
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	88 2f       	mov	r24, r24
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	a9 01       	movw	r20, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_ReadChannel+0x9e>
    11c2:	55 95       	asr	r21
    11c4:	47 95       	ror	r20
    11c6:	8a 95       	dec	r24
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <DIO_ReadChannel+0x9a>
    11ca:	ca 01       	movw	r24, r20
    11cc:	81 70       	andi	r24, 0x01	; 1
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	23 c0       	rjmp	.+70     	; 0x1218 <DIO_ReadChannel+0xf0>
		break;
		case DIO_PortC:
		BitValue = GetBit(PINC_Reg,BitNo);
    11d2:	e3 e3       	ldi	r30, 0x33	; 51
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	88 2f       	mov	r24, r24
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	a9 01       	movw	r20, r18
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <DIO_ReadChannel+0xc2>
    11e6:	55 95       	asr	r21
    11e8:	47 95       	ror	r20
    11ea:	8a 95       	dec	r24
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <DIO_ReadChannel+0xbe>
    11ee:	ca 01       	movw	r24, r20
    11f0:	81 70       	andi	r24, 0x01	; 1
    11f2:	89 83       	std	Y+1, r24	; 0x01
    11f4:	11 c0       	rjmp	.+34     	; 0x1218 <DIO_ReadChannel+0xf0>
		break;
		case DIO_PortD:
		BitValue = GetBit(PIND_Reg,BitNo);
    11f6:	e0 e3       	ldi	r30, 0x30	; 48
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	a9 01       	movw	r20, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <DIO_ReadChannel+0xe6>
    120a:	55 95       	asr	r21
    120c:	47 95       	ror	r20
    120e:	8a 95       	dec	r24
    1210:	e2 f7       	brpl	.-8      	; 0x120a <DIO_ReadChannel+0xe2>
    1212:	ca 01       	movw	r24, r20
    1214:	81 70       	andi	r24, 0x01	; 1
    1216:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return BitValue;
    1218:	89 81       	ldd	r24, Y+1	; 0x01
}
    121a:	26 96       	adiw	r28, 0x06	; 6
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <DIO_WritePort>:

void DIO_WritePort(DIO_PortTypes PortId,Uint8 Data){
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	00 d0       	rcall	.+0      	; 0x1232 <DIO_WritePort+0x6>
    1232:	00 d0       	rcall	.+0      	; 0x1234 <DIO_WritePort+0x8>
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	89 83       	std	Y+1, r24	; 0x01
    123a:	6a 83       	std	Y+2, r22	; 0x02
	switch (PortId)
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	3c 83       	std	Y+4, r19	; 0x04
    1244:	2b 83       	std	Y+3, r18	; 0x03
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	9c 81       	ldd	r25, Y+4	; 0x04
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	91 05       	cpc	r25, r1
    124e:	d1 f0       	breq	.+52     	; 0x1284 <DIO_WritePort+0x58>
    1250:	2b 81       	ldd	r18, Y+3	; 0x03
    1252:	3c 81       	ldd	r19, Y+4	; 0x04
    1254:	22 30       	cpi	r18, 0x02	; 2
    1256:	31 05       	cpc	r19, r1
    1258:	2c f4       	brge	.+10     	; 0x1264 <DIO_WritePort+0x38>
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	9c 81       	ldd	r25, Y+4	; 0x04
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	61 f0       	breq	.+24     	; 0x127a <DIO_WritePort+0x4e>
    1262:	1e c0       	rjmp	.+60     	; 0x12a0 <DIO_WritePort+0x74>
    1264:	2b 81       	ldd	r18, Y+3	; 0x03
    1266:	3c 81       	ldd	r19, Y+4	; 0x04
    1268:	22 30       	cpi	r18, 0x02	; 2
    126a:	31 05       	cpc	r19, r1
    126c:	81 f0       	breq	.+32     	; 0x128e <DIO_WritePort+0x62>
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	9c 81       	ldd	r25, Y+4	; 0x04
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	91 05       	cpc	r25, r1
    1276:	81 f0       	breq	.+32     	; 0x1298 <DIO_WritePort+0x6c>
    1278:	13 c0       	rjmp	.+38     	; 0x12a0 <DIO_WritePort+0x74>
	{
		case DIO_PortA:
		PORTA_Reg = Data;
    127a:	eb e3       	ldi	r30, 0x3B	; 59
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	80 83       	st	Z, r24
    1282:	0e c0       	rjmp	.+28     	; 0x12a0 <DIO_WritePort+0x74>
		break;
		case DIO_PortB:
		PORTB_Reg = Data;
    1284:	e8 e3       	ldi	r30, 0x38	; 56
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	80 83       	st	Z, r24
    128c:	09 c0       	rjmp	.+18     	; 0x12a0 <DIO_WritePort+0x74>
		break;
		case DIO_PortC:
		PORTC_Reg = Data;
    128e:	e5 e3       	ldi	r30, 0x35	; 53
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	80 83       	st	Z, r24
    1296:	04 c0       	rjmp	.+8      	; 0x12a0 <DIO_WritePort+0x74>
		break;
		case DIO_PortD:
		PORTD_Reg = Data;
    1298:	e2 e3       	ldi	r30, 0x32	; 50
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	80 83       	st	Z, r24
		break;
	}
}
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <DIO_ReadPort>:

Uint8 DIO_ReadPort(DIO_PortTypes PortId){
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <DIO_ReadPort+0x6>
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <DIO_ReadPort+0x8>
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	8a 83       	std	Y+2, r24	; 0x02
	Uint8 Data = 0;
    12bc:	19 82       	std	Y+1, r1	; 0x01
	switch (PortId)
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	3c 83       	std	Y+4, r19	; 0x04
    12c6:	2b 83       	std	Y+3, r18	; 0x03
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	91 05       	cpc	r25, r1
    12d0:	d1 f0       	breq	.+52     	; 0x1306 <DIO_ReadPort+0x58>
    12d2:	2b 81       	ldd	r18, Y+3	; 0x03
    12d4:	3c 81       	ldd	r19, Y+4	; 0x04
    12d6:	22 30       	cpi	r18, 0x02	; 2
    12d8:	31 05       	cpc	r19, r1
    12da:	2c f4       	brge	.+10     	; 0x12e6 <DIO_ReadPort+0x38>
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	61 f0       	breq	.+24     	; 0x12fc <DIO_ReadPort+0x4e>
    12e4:	1e c0       	rjmp	.+60     	; 0x1322 <DIO_ReadPort+0x74>
    12e6:	2b 81       	ldd	r18, Y+3	; 0x03
    12e8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ea:	22 30       	cpi	r18, 0x02	; 2
    12ec:	31 05       	cpc	r19, r1
    12ee:	81 f0       	breq	.+32     	; 0x1310 <DIO_ReadPort+0x62>
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	83 30       	cpi	r24, 0x03	; 3
    12f6:	91 05       	cpc	r25, r1
    12f8:	81 f0       	breq	.+32     	; 0x131a <DIO_ReadPort+0x6c>
    12fa:	13 c0       	rjmp	.+38     	; 0x1322 <DIO_ReadPort+0x74>
	{
		case DIO_PortA:
		Data = PORTA_Reg;
    12fc:	eb e3       	ldi	r30, 0x3B	; 59
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	89 83       	std	Y+1, r24	; 0x01
    1304:	0e c0       	rjmp	.+28     	; 0x1322 <DIO_ReadPort+0x74>
		break;
		case DIO_PortB:
		Data = PORTB_Reg;
    1306:	e8 e3       	ldi	r30, 0x38	; 56
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	09 c0       	rjmp	.+18     	; 0x1322 <DIO_ReadPort+0x74>
		break;
		case DIO_PortC:
		Data = PORTC_Reg;
    1310:	e5 e3       	ldi	r30, 0x35	; 53
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	89 83       	std	Y+1, r24	; 0x01
    1318:	04 c0       	rjmp	.+8      	; 0x1322 <DIO_ReadPort+0x74>
		break;
		case DIO_PortD:
		Data = PORTD_Reg;
    131a:	e2 e3       	ldi	r30, 0x32	; 50
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Data;	
    1322:	89 81       	ldd	r24, Y+1	; 0x01
}
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <DIO_Init>:
	{Input,STD_High},
	{Input,STD_Low}
	
};

void DIO_Init(){
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	00 d0       	rcall	.+0      	; 0x1338 <DIO_Init+0x6>
    1338:	00 d0       	rcall	.+0      	; 0x133a <DIO_Init+0x8>
    133a:	0f 92       	push	r0
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
	Uint8 count = DIO_ChannelA0;
    1340:	1b 82       	std	Y+3, r1	; 0x03
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count=DIO_ChannelA0;count<PINCOUNT;count++)
    1342:	1b 82       	std	Y+3, r1	; 0x03
    1344:	fc c0       	rjmp	.+504    	; 0x153e <DIO_Init+0x20c>
	{
		Portx = count/8;
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	86 95       	lsr	r24
    134a:	86 95       	lsr	r24
    134c:	86 95       	lsr	r24
    134e:	8a 83       	std	Y+2, r24	; 0x02
		BitNo = count%8;
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	87 70       	andi	r24, 0x07	; 7
    1354:	89 83       	std	Y+1, r24	; 0x01
		switch(Portx){
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	3d 83       	std	Y+5, r19	; 0x05
    135e:	2c 83       	std	Y+4, r18	; 0x04
    1360:	8c 81       	ldd	r24, Y+4	; 0x04
    1362:	9d 81       	ldd	r25, Y+5	; 0x05
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	91 05       	cpc	r25, r1
    1368:	09 f4       	brne	.+2      	; 0x136c <DIO_Init+0x3a>
    136a:	4b c0       	rjmp	.+150    	; 0x1402 <DIO_Init+0xd0>
    136c:	2c 81       	ldd	r18, Y+4	; 0x04
    136e:	3d 81       	ldd	r19, Y+5	; 0x05
    1370:	22 30       	cpi	r18, 0x02	; 2
    1372:	31 05       	cpc	r19, r1
    1374:	2c f4       	brge	.+10     	; 0x1380 <DIO_Init+0x4e>
    1376:	8c 81       	ldd	r24, Y+4	; 0x04
    1378:	9d 81       	ldd	r25, Y+5	; 0x05
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	71 f0       	breq	.+28     	; 0x139a <DIO_Init+0x68>
    137e:	dc c0       	rjmp	.+440    	; 0x1538 <DIO_Init+0x206>
    1380:	2c 81       	ldd	r18, Y+4	; 0x04
    1382:	3d 81       	ldd	r19, Y+5	; 0x05
    1384:	22 30       	cpi	r18, 0x02	; 2
    1386:	31 05       	cpc	r19, r1
    1388:	09 f4       	brne	.+2      	; 0x138c <DIO_Init+0x5a>
    138a:	6f c0       	rjmp	.+222    	; 0x146a <DIO_Init+0x138>
    138c:	8c 81       	ldd	r24, Y+4	; 0x04
    138e:	9d 81       	ldd	r25, Y+5	; 0x05
    1390:	83 30       	cpi	r24, 0x03	; 3
    1392:	91 05       	cpc	r25, r1
    1394:	09 f4       	brne	.+2      	; 0x1398 <DIO_Init+0x66>
    1396:	9d c0       	rjmp	.+314    	; 0x14d2 <DIO_Init+0x1a0>
    1398:	cf c0       	rjmp	.+414    	; 0x1538 <DIO_Init+0x206>
			case DIO_PortA:
			if(PinDirInit[count].PinDir == Output){
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	88 2f       	mov	r24, r24
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	fc 01       	movw	r30, r24
    13a6:	ec 58       	subi	r30, 0x8C	; 140
    13a8:	fe 4f       	sbci	r31, 0xFE	; 254
    13aa:	80 81       	ld	r24, Z
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	a1 f4       	brne	.+40     	; 0x13d8 <DIO_Init+0xa6>
				SetBit(DDRA_Reg,BitNo);
    13b0:	aa e3       	ldi	r26, 0x3A	; 58
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	ea e3       	ldi	r30, 0x3A	; 58
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	48 2f       	mov	r20, r24
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	02 2e       	mov	r0, r18
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <DIO_Init+0x9c>
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	0a 94       	dec	r0
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <DIO_Init+0x98>
    13d2:	84 2b       	or	r24, r20
    13d4:	8c 93       	st	X, r24
    13d6:	b0 c0       	rjmp	.+352    	; 0x1538 <DIO_Init+0x206>
			}
			else{
				ClearBit(DDRA_Reg,BitNo);
    13d8:	aa e3       	ldi	r26, 0x3A	; 58
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	ea e3       	ldi	r30, 0x3A	; 58
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	48 2f       	mov	r20, r24
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	02 2e       	mov	r0, r18
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <DIO_Init+0xc4>
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	0a 94       	dec	r0
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <DIO_Init+0xc0>
    13fa:	80 95       	com	r24
    13fc:	84 23       	and	r24, r20
    13fe:	8c 93       	st	X, r24
    1400:	9b c0       	rjmp	.+310    	; 0x1538 <DIO_Init+0x206>
			}
			break;
			case DIO_PortB:
			if(PinDirInit[count].PinDir == Output){
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	88 2f       	mov	r24, r24
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	fc 01       	movw	r30, r24
    140e:	ec 58       	subi	r30, 0x8C	; 140
    1410:	fe 4f       	sbci	r31, 0xFE	; 254
    1412:	80 81       	ld	r24, Z
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	a1 f4       	brne	.+40     	; 0x1440 <DIO_Init+0x10e>
				SetBit(DDRB_Reg,BitNo);
    1418:	a7 e3       	ldi	r26, 0x37	; 55
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e7 e3       	ldi	r30, 0x37	; 55
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <DIO_Init+0x104>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <DIO_Init+0x100>
    143a:	84 2b       	or	r24, r20
    143c:	8c 93       	st	X, r24
    143e:	7c c0       	rjmp	.+248    	; 0x1538 <DIO_Init+0x206>
			}
			else{
				ClearBit(DDRB_Reg,BitNo);
    1440:	a7 e3       	ldi	r26, 0x37	; 55
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e7 e3       	ldi	r30, 0x37	; 55
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 2e       	mov	r0, r18
    1458:	02 c0       	rjmp	.+4      	; 0x145e <DIO_Init+0x12c>
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	0a 94       	dec	r0
    1460:	e2 f7       	brpl	.-8      	; 0x145a <DIO_Init+0x128>
    1462:	80 95       	com	r24
    1464:	84 23       	and	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	67 c0       	rjmp	.+206    	; 0x1538 <DIO_Init+0x206>
			}
			break;
			case DIO_PortC:
			if(PinDirInit[count].PinDir == Output){
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	88 2f       	mov	r24, r24
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	fc 01       	movw	r30, r24
    1476:	ec 58       	subi	r30, 0x8C	; 140
    1478:	fe 4f       	sbci	r31, 0xFE	; 254
    147a:	80 81       	ld	r24, Z
    147c:	81 30       	cpi	r24, 0x01	; 1
    147e:	a1 f4       	brne	.+40     	; 0x14a8 <DIO_Init+0x176>
				SetBit(DDRC_Reg,BitNo);
    1480:	a4 e3       	ldi	r26, 0x34	; 52
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e4 e3       	ldi	r30, 0x34	; 52
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 2e       	mov	r0, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <DIO_Init+0x16c>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <DIO_Init+0x168>
    14a2:	84 2b       	or	r24, r20
    14a4:	8c 93       	st	X, r24
    14a6:	48 c0       	rjmp	.+144    	; 0x1538 <DIO_Init+0x206>
			}
			else{
				ClearBit(DDRC_Reg,BitNo);
    14a8:	a4 e3       	ldi	r26, 0x34	; 52
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e4 e3       	ldi	r30, 0x34	; 52
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	48 2f       	mov	r20, r24
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	02 2e       	mov	r0, r18
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <DIO_Init+0x194>
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	0a 94       	dec	r0
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <DIO_Init+0x190>
    14ca:	80 95       	com	r24
    14cc:	84 23       	and	r24, r20
    14ce:	8c 93       	st	X, r24
    14d0:	33 c0       	rjmp	.+102    	; 0x1538 <DIO_Init+0x206>
			}
			break;
			case DIO_PortD:
			if(PinDirInit[count].PinDir == Output){
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	88 2f       	mov	r24, r24
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	fc 01       	movw	r30, r24
    14de:	ec 58       	subi	r30, 0x8C	; 140
    14e0:	fe 4f       	sbci	r31, 0xFE	; 254
    14e2:	80 81       	ld	r24, Z
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	a1 f4       	brne	.+40     	; 0x1510 <DIO_Init+0x1de>
				SetBit(DDRD_Reg,BitNo);
    14e8:	a1 e3       	ldi	r26, 0x31	; 49
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	e1 e3       	ldi	r30, 0x31	; 49
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	48 2f       	mov	r20, r24
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	02 2e       	mov	r0, r18
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <DIO_Init+0x1d4>
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	0a 94       	dec	r0
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <DIO_Init+0x1d0>
    150a:	84 2b       	or	r24, r20
    150c:	8c 93       	st	X, r24
    150e:	14 c0       	rjmp	.+40     	; 0x1538 <DIO_Init+0x206>
			}
			else{
				ClearBit(DDRD_Reg,BitNo);
    1510:	a1 e3       	ldi	r26, 0x31	; 49
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e1 e3       	ldi	r30, 0x31	; 49
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	48 2f       	mov	r20, r24
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	02 2e       	mov	r0, r18
    1528:	02 c0       	rjmp	.+4      	; 0x152e <DIO_Init+0x1fc>
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	0a 94       	dec	r0
    1530:	e2 f7       	brpl	.-8      	; 0x152a <DIO_Init+0x1f8>
    1532:	80 95       	com	r24
    1534:	84 23       	and	r24, r20
    1536:	8c 93       	st	X, r24

void DIO_Init(){
	Uint8 count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count=DIO_ChannelA0;count<PINCOUNT;count++)
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	8f 5f       	subi	r24, 0xFF	; 255
    153c:	8b 83       	std	Y+3, r24	; 0x03
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	80 32       	cpi	r24, 0x20	; 32
    1542:	08 f4       	brcc	.+2      	; 0x1546 <DIO_Init+0x214>
    1544:	00 cf       	rjmp	.-512    	; 0x1346 <DIO_Init+0x14>
				ClearBit(DDRD_Reg,BitNo);
			}
			break;
		}
	}
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <LCD_Init>:
*  Author: user
*/

#include "LCD.h"

void LCD_Init(void){
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	a6 97       	sbiw	r28, 0x26	; 38
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61
	DIO_WriteChannel(LCD_RW,STD_Low);
    156a:	8a e0       	ldi	r24, 0x0A	; 10
    156c:	60 e0       	ldi	r22, 0x00	; 0
    156e:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_E,STD_High);
    1572:	8b e0       	ldi	r24, 0x0B	; 11
    1574:	61 e0       	ldi	r22, 0x01	; 1
    1576:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_WriteChannel>
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a0 ea       	ldi	r26, 0xA0	; 160
    1580:	b1 e4       	ldi	r27, 0x41	; 65
    1582:	8b a3       	std	Y+35, r24	; 0x23
    1584:	9c a3       	std	Y+36, r25	; 0x24
    1586:	ad a3       	std	Y+37, r26	; 0x25
    1588:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158a:	6b a1       	ldd	r22, Y+35	; 0x23
    158c:	7c a1       	ldd	r23, Y+36	; 0x24
    158e:	8d a1       	ldd	r24, Y+37	; 0x25
    1590:	9e a1       	ldd	r25, Y+38	; 0x26
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	4a e7       	ldi	r20, 0x7A	; 122
    1598:	55 e4       	ldi	r21, 0x45	; 69
    159a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	8f 8f       	std	Y+31, r24	; 0x1f
    15a4:	98 a3       	std	Y+32, r25	; 0x20
    15a6:	a9 a3       	std	Y+33, r26	; 0x21
    15a8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    15aa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    15ac:	78 a1       	ldd	r23, Y+32	; 0x20
    15ae:	89 a1       	ldd	r24, Y+33	; 0x21
    15b0:	9a a1       	ldd	r25, Y+34	; 0x22
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e8       	ldi	r20, 0x80	; 128
    15b8:	5f e3       	ldi	r21, 0x3F	; 63
    15ba:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    15be:	88 23       	and	r24, r24
    15c0:	2c f4       	brge	.+10     	; 0x15cc <LCD_Init+0x76>
		__ticks = 1;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	9e 8f       	std	Y+30, r25	; 0x1e
    15c8:	8d 8f       	std	Y+29, r24	; 0x1d
    15ca:	3f c0       	rjmp	.+126    	; 0x164a <LCD_Init+0xf4>
	else if (__tmp > 65535)
    15cc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    15ce:	78 a1       	ldd	r23, Y+32	; 0x20
    15d0:	89 a1       	ldd	r24, Y+33	; 0x21
    15d2:	9a a1       	ldd	r25, Y+34	; 0x22
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	3f ef       	ldi	r19, 0xFF	; 255
    15d8:	4f e7       	ldi	r20, 0x7F	; 127
    15da:	57 e4       	ldi	r21, 0x47	; 71
    15dc:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    15e0:	18 16       	cp	r1, r24
    15e2:	4c f5       	brge	.+82     	; 0x1636 <LCD_Init+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e4:	6b a1       	ldd	r22, Y+35	; 0x23
    15e6:	7c a1       	ldd	r23, Y+36	; 0x24
    15e8:	8d a1       	ldd	r24, Y+37	; 0x25
    15ea:	9e a1       	ldd	r25, Y+38	; 0x26
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e2       	ldi	r20, 0x20	; 32
    15f2:	51 e4       	ldi	r21, 0x41	; 65
    15f4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	bc 01       	movw	r22, r24
    15fe:	cd 01       	movw	r24, r26
    1600:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	9e 8f       	std	Y+30, r25	; 0x1e
    160a:	8d 8f       	std	Y+29, r24	; 0x1d
    160c:	0f c0       	rjmp	.+30     	; 0x162c <LCD_Init+0xd6>
    160e:	80 e9       	ldi	r24, 0x90	; 144
    1610:	91 e0       	ldi	r25, 0x01	; 1
    1612:	9c 8f       	std	Y+28, r25	; 0x1c
    1614:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1616:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1618:	9c 8d       	ldd	r25, Y+28	; 0x1c
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	f1 f7       	brne	.-4      	; 0x161a <LCD_Init+0xc4>
    161e:	9c 8f       	std	Y+28, r25	; 0x1c
    1620:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1622:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1624:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	9e 8f       	std	Y+30, r25	; 0x1e
    162a:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    162e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	69 f7       	brne	.-38     	; 0x160e <LCD_Init+0xb8>
    1634:	14 c0       	rjmp	.+40     	; 0x165e <LCD_Init+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1636:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1638:	78 a1       	ldd	r23, Y+32	; 0x20
    163a:	89 a1       	ldd	r24, Y+33	; 0x21
    163c:	9a a1       	ldd	r25, Y+34	; 0x22
    163e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	9e 8f       	std	Y+30, r25	; 0x1e
    1648:	8d 8f       	std	Y+29, r24	; 0x1d
    164a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    164c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    164e:	9a 8f       	std	Y+26, r25	; 0x1a
    1650:	89 8f       	std	Y+25, r24	; 0x19
    1652:	89 8d       	ldd	r24, Y+25	; 0x19
    1654:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <LCD_Init+0x100>
    165a:	9a 8f       	std	Y+26, r25	; 0x1a
    165c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(20);
	LCD_Cmd(0x33);
    165e:	83 e3       	ldi	r24, 0x33	; 51
    1660:	0e 94 08 0c 	call	0x1810	; 0x1810 <LCD_Cmd>
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	a8 ec       	ldi	r26, 0xC8	; 200
    166a:	b2 e4       	ldi	r27, 0x42	; 66
    166c:	8d 8b       	std	Y+21, r24	; 0x15
    166e:	9e 8b       	std	Y+22, r25	; 0x16
    1670:	af 8b       	std	Y+23, r26	; 0x17
    1672:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1674:	6d 89       	ldd	r22, Y+21	; 0x15
    1676:	7e 89       	ldd	r23, Y+22	; 0x16
    1678:	8f 89       	ldd	r24, Y+23	; 0x17
    167a:	98 8d       	ldd	r25, Y+24	; 0x18
    167c:	2b ea       	ldi	r18, 0xAB	; 171
    167e:	3a ea       	ldi	r19, 0xAA	; 170
    1680:	4a ea       	ldi	r20, 0xAA	; 170
    1682:	50 e4       	ldi	r21, 0x40	; 64
    1684:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	89 8b       	std	Y+17, r24	; 0x11
    168e:	9a 8b       	std	Y+18, r25	; 0x12
    1690:	ab 8b       	std	Y+19, r26	; 0x13
    1692:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1694:	69 89       	ldd	r22, Y+17	; 0x11
    1696:	7a 89       	ldd	r23, Y+18	; 0x12
    1698:	8b 89       	ldd	r24, Y+19	; 0x13
    169a:	9c 89       	ldd	r25, Y+20	; 0x14
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	40 e8       	ldi	r20, 0x80	; 128
    16a2:	5f e3       	ldi	r21, 0x3F	; 63
    16a4:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    16a8:	88 23       	and	r24, r24
    16aa:	1c f4       	brge	.+6      	; 0x16b2 <LCD_Init+0x15c>
		__ticks = 1;
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	88 8b       	std	Y+16, r24	; 0x10
    16b0:	91 c0       	rjmp	.+290    	; 0x17d4 <LCD_Init+0x27e>
	else if (__tmp > 255)
    16b2:	69 89       	ldd	r22, Y+17	; 0x11
    16b4:	7a 89       	ldd	r23, Y+18	; 0x12
    16b6:	8b 89       	ldd	r24, Y+19	; 0x13
    16b8:	9c 89       	ldd	r25, Y+20	; 0x14
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	4f e7       	ldi	r20, 0x7F	; 127
    16c0:	53 e4       	ldi	r21, 0x43	; 67
    16c2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    16c6:	18 16       	cp	r1, r24
    16c8:	0c f0       	brlt	.+2      	; 0x16cc <LCD_Init+0x176>
    16ca:	7b c0       	rjmp	.+246    	; 0x17c2 <LCD_Init+0x26c>
	{
		_delay_ms(__us / 1000.0);
    16cc:	6d 89       	ldd	r22, Y+21	; 0x15
    16ce:	7e 89       	ldd	r23, Y+22	; 0x16
    16d0:	8f 89       	ldd	r24, Y+23	; 0x17
    16d2:	98 8d       	ldd	r25, Y+24	; 0x18
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	4a e7       	ldi	r20, 0x7A	; 122
    16da:	54 e4       	ldi	r21, 0x44	; 68
    16dc:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	8c 87       	std	Y+12, r24	; 0x0c
    16e6:	9d 87       	std	Y+13, r25	; 0x0d
    16e8:	ae 87       	std	Y+14, r26	; 0x0e
    16ea:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ec:	6c 85       	ldd	r22, Y+12	; 0x0c
    16ee:	7d 85       	ldd	r23, Y+13	; 0x0d
    16f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    16f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	4a e7       	ldi	r20, 0x7A	; 122
    16fa:	55 e4       	ldi	r21, 0x45	; 69
    16fc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	88 87       	std	Y+8, r24	; 0x08
    1706:	99 87       	std	Y+9, r25	; 0x09
    1708:	aa 87       	std	Y+10, r26	; 0x0a
    170a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    170c:	68 85       	ldd	r22, Y+8	; 0x08
    170e:	79 85       	ldd	r23, Y+9	; 0x09
    1710:	8a 85       	ldd	r24, Y+10	; 0x0a
    1712:	9b 85       	ldd	r25, Y+11	; 0x0b
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	40 e8       	ldi	r20, 0x80	; 128
    171a:	5f e3       	ldi	r21, 0x3F	; 63
    171c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1720:	88 23       	and	r24, r24
    1722:	2c f4       	brge	.+10     	; 0x172e <LCD_Init+0x1d8>
		__ticks = 1;
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	9f 83       	std	Y+7, r25	; 0x07
    172a:	8e 83       	std	Y+6, r24	; 0x06
    172c:	3f c0       	rjmp	.+126    	; 0x17ac <LCD_Init+0x256>
	else if (__tmp > 65535)
    172e:	68 85       	ldd	r22, Y+8	; 0x08
    1730:	79 85       	ldd	r23, Y+9	; 0x09
    1732:	8a 85       	ldd	r24, Y+10	; 0x0a
    1734:	9b 85       	ldd	r25, Y+11	; 0x0b
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	3f ef       	ldi	r19, 0xFF	; 255
    173a:	4f e7       	ldi	r20, 0x7F	; 127
    173c:	57 e4       	ldi	r21, 0x47	; 71
    173e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1742:	18 16       	cp	r1, r24
    1744:	4c f5       	brge	.+82     	; 0x1798 <LCD_Init+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1746:	6c 85       	ldd	r22, Y+12	; 0x0c
    1748:	7d 85       	ldd	r23, Y+13	; 0x0d
    174a:	8e 85       	ldd	r24, Y+14	; 0x0e
    174c:	9f 85       	ldd	r25, Y+15	; 0x0f
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	40 e2       	ldi	r20, 0x20	; 32
    1754:	51 e4       	ldi	r21, 0x41	; 65
    1756:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	bc 01       	movw	r22, r24
    1760:	cd 01       	movw	r24, r26
    1762:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	9f 83       	std	Y+7, r25	; 0x07
    176c:	8e 83       	std	Y+6, r24	; 0x06
    176e:	0f c0       	rjmp	.+30     	; 0x178e <LCD_Init+0x238>
    1770:	80 e9       	ldi	r24, 0x90	; 144
    1772:	91 e0       	ldi	r25, 0x01	; 1
    1774:	9d 83       	std	Y+5, r25	; 0x05
    1776:	8c 83       	std	Y+4, r24	; 0x04
    1778:	8c 81       	ldd	r24, Y+4	; 0x04
    177a:	9d 81       	ldd	r25, Y+5	; 0x05
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	f1 f7       	brne	.-4      	; 0x177c <LCD_Init+0x226>
    1780:	9d 83       	std	Y+5, r25	; 0x05
    1782:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1784:	8e 81       	ldd	r24, Y+6	; 0x06
    1786:	9f 81       	ldd	r25, Y+7	; 0x07
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	9f 83       	std	Y+7, r25	; 0x07
    178c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178e:	8e 81       	ldd	r24, Y+6	; 0x06
    1790:	9f 81       	ldd	r25, Y+7	; 0x07
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	69 f7       	brne	.-38     	; 0x1770 <LCD_Init+0x21a>
    1796:	24 c0       	rjmp	.+72     	; 0x17e0 <LCD_Init+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1798:	68 85       	ldd	r22, Y+8	; 0x08
    179a:	79 85       	ldd	r23, Y+9	; 0x09
    179c:	8a 85       	ldd	r24, Y+10	; 0x0a
    179e:	9b 85       	ldd	r25, Y+11	; 0x0b
    17a0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	9f 83       	std	Y+7, r25	; 0x07
    17aa:	8e 83       	std	Y+6, r24	; 0x06
    17ac:	8e 81       	ldd	r24, Y+6	; 0x06
    17ae:	9f 81       	ldd	r25, Y+7	; 0x07
    17b0:	9b 83       	std	Y+3, r25	; 0x03
    17b2:	8a 83       	std	Y+2, r24	; 0x02
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	9b 81       	ldd	r25, Y+3	; 0x03
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	f1 f7       	brne	.-4      	; 0x17b8 <LCD_Init+0x262>
    17bc:	9b 83       	std	Y+3, r25	; 0x03
    17be:	8a 83       	std	Y+2, r24	; 0x02
    17c0:	0f c0       	rjmp	.+30     	; 0x17e0 <LCD_Init+0x28a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17c2:	69 89       	ldd	r22, Y+17	; 0x11
    17c4:	7a 89       	ldd	r23, Y+18	; 0x12
    17c6:	8b 89       	ldd	r24, Y+19	; 0x13
    17c8:	9c 89       	ldd	r25, Y+20	; 0x14
    17ca:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	88 8b       	std	Y+16, r24	; 0x10
    17d4:	88 89       	ldd	r24, Y+16	; 0x10
    17d6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	8a 95       	dec	r24
    17dc:	f1 f7       	brne	.-4      	; 0x17da <LCD_Init+0x284>
    17de:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	LCD_Cmd(0x32);
    17e0:	82 e3       	ldi	r24, 0x32	; 50
    17e2:	0e 94 08 0c 	call	0x1810	; 0x1810 <LCD_Cmd>
	LCD_Cmd(0x28);//Set Function 4-Bit & 2Line & 5*8 Dots
    17e6:	88 e2       	ldi	r24, 0x28	; 40
    17e8:	0e 94 08 0c 	call	0x1810	; 0x1810 <LCD_Cmd>
	LCD_Cmd(0x06);//Entry Mode move to right and no shift
    17ec:	86 e0       	ldi	r24, 0x06	; 6
    17ee:	0e 94 08 0c 	call	0x1810	; 0x1810 <LCD_Cmd>
	LCD_Cmd(0x0C);//Display on & Cursor off and no blinking
    17f2:	8c e0       	ldi	r24, 0x0C	; 12
    17f4:	0e 94 08 0c 	call	0x1810	; 0x1810 <LCD_Cmd>
	LCD_Cmd(0x01);//Clear LCD
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	0e 94 08 0c 	call	0x1810	; 0x1810 <LCD_Cmd>
}
    17fe:	a6 96       	adiw	r28, 0x26	; 38
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <LCD_Cmd>:
void LCD_Cmd(Uint8 cmd){
    1810:	0f 93       	push	r16
    1812:	1f 93       	push	r17
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	ce 54       	subi	r28, 0x4E	; 78
    181e:	d0 40       	sbci	r29, 0x00	; 0
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	cd bf       	out	0x3d, r28	; 61
    182a:	fe 01       	movw	r30, r28
    182c:	e2 5b       	subi	r30, 0xB2	; 178
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	80 83       	st	Z, r24
	Uint8 PortValue = 0;
    1832:	fe 01       	movw	r30, r28
    1834:	e3 5b       	subi	r30, 0xB3	; 179
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	10 82       	st	Z, r1
	DIO_WriteChannel(LCD_RS,STD_Low);
    183a:	89 e0       	ldi	r24, 0x09	; 9
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_WriteChannel>
	PortValue = DIO_ReadPort(LCD_DataPort);
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	0e 94 57 09 	call	0x12ae	; 0x12ae <DIO_ReadPort>
    1848:	fe 01       	movw	r30, r28
    184a:	e3 5b       	subi	r30, 0xB3	; 179
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	80 83       	st	Z, r24
	PortValue = (PortValue & 0x0F) | (cmd & 0xF0);
    1850:	fe 01       	movw	r30, r28
    1852:	e3 5b       	subi	r30, 0xB3	; 179
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	80 81       	ld	r24, Z
    1858:	98 2f       	mov	r25, r24
    185a:	9f 70       	andi	r25, 0x0F	; 15
    185c:	fe 01       	movw	r30, r28
    185e:	e2 5b       	subi	r30, 0xB2	; 178
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	80 81       	ld	r24, Z
    1864:	80 7f       	andi	r24, 0xF0	; 240
    1866:	89 2b       	or	r24, r25
    1868:	fe 01       	movw	r30, r28
    186a:	e3 5b       	subi	r30, 0xB3	; 179
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	80 83       	st	Z, r24
	DIO_WritePort(LCD_DataPort,PortValue);
    1870:	fe 01       	movw	r30, r28
    1872:	e3 5b       	subi	r30, 0xB3	; 179
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	60 81       	ld	r22, Z
    187a:	0e 94 16 09 	call	0x122c	; 0x122c <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
    187e:	8b e0       	ldi	r24, 0x0B	; 11
    1880:	60 e0       	ldi	r22, 0x00	; 0
    1882:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_WriteChannel>
    1886:	fe 01       	movw	r30, r28
    1888:	e7 5b       	subi	r30, 0xB7	; 183
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	a8 ec       	ldi	r26, 0xC8	; 200
    1892:	b2 e4       	ldi	r27, 0x42	; 66
    1894:	80 83       	st	Z, r24
    1896:	91 83       	std	Z+1, r25	; 0x01
    1898:	a2 83       	std	Z+2, r26	; 0x02
    189a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    189c:	8e 01       	movw	r16, r28
    189e:	0b 5b       	subi	r16, 0xBB	; 187
    18a0:	1f 4f       	sbci	r17, 0xFF	; 255
    18a2:	fe 01       	movw	r30, r28
    18a4:	e7 5b       	subi	r30, 0xB7	; 183
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	60 81       	ld	r22, Z
    18aa:	71 81       	ldd	r23, Z+1	; 0x01
    18ac:	82 81       	ldd	r24, Z+2	; 0x02
    18ae:	93 81       	ldd	r25, Z+3	; 0x03
    18b0:	2b ea       	ldi	r18, 0xAB	; 171
    18b2:	3a ea       	ldi	r19, 0xAA	; 170
    18b4:	4a ea       	ldi	r20, 0xAA	; 170
    18b6:	50 e4       	ldi	r21, 0x40	; 64
    18b8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	f8 01       	movw	r30, r16
    18c2:	80 83       	st	Z, r24
    18c4:	91 83       	std	Z+1, r25	; 0x01
    18c6:	a2 83       	std	Z+2, r26	; 0x02
    18c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18ca:	fe 01       	movw	r30, r28
    18cc:	eb 5b       	subi	r30, 0xBB	; 187
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	60 81       	ld	r22, Z
    18d2:	71 81       	ldd	r23, Z+1	; 0x01
    18d4:	82 81       	ldd	r24, Z+2	; 0x02
    18d6:	93 81       	ldd	r25, Z+3	; 0x03
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e8       	ldi	r20, 0x80	; 128
    18de:	5f e3       	ldi	r21, 0x3F	; 63
    18e0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    18e4:	88 23       	and	r24, r24
    18e6:	34 f4       	brge	.+12     	; 0x18f4 <LCD_Cmd+0xe4>
		__ticks = 1;
    18e8:	fe 01       	movw	r30, r28
    18ea:	ec 5b       	subi	r30, 0xBC	; 188
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	80 83       	st	Z, r24
    18f2:	a7 c0       	rjmp	.+334    	; 0x1a42 <LCD_Cmd+0x232>
	else if (__tmp > 255)
    18f4:	fe 01       	movw	r30, r28
    18f6:	eb 5b       	subi	r30, 0xBB	; 187
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	60 81       	ld	r22, Z
    18fc:	71 81       	ldd	r23, Z+1	; 0x01
    18fe:	82 81       	ldd	r24, Z+2	; 0x02
    1900:	93 81       	ldd	r25, Z+3	; 0x03
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	4f e7       	ldi	r20, 0x7F	; 127
    1908:	53 e4       	ldi	r21, 0x43	; 67
    190a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    190e:	18 16       	cp	r1, r24
    1910:	0c f0       	brlt	.+2      	; 0x1914 <LCD_Cmd+0x104>
    1912:	87 c0       	rjmp	.+270    	; 0x1a22 <LCD_Cmd+0x212>
	{
		_delay_ms(__us / 1000.0);
    1914:	fe 01       	movw	r30, r28
    1916:	e7 5b       	subi	r30, 0xB7	; 183
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	60 81       	ld	r22, Z
    191c:	71 81       	ldd	r23, Z+1	; 0x01
    191e:	82 81       	ldd	r24, Z+2	; 0x02
    1920:	93 81       	ldd	r25, Z+3	; 0x03
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	4a e7       	ldi	r20, 0x7A	; 122
    1928:	54 e4       	ldi	r21, 0x44	; 68
    192a:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	fe 01       	movw	r30, r28
    1934:	e0 5c       	subi	r30, 0xC0	; 192
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	80 83       	st	Z, r24
    193a:	91 83       	std	Z+1, r25	; 0x01
    193c:	a2 83       	std	Z+2, r26	; 0x02
    193e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1940:	fe 01       	movw	r30, r28
    1942:	e0 5c       	subi	r30, 0xC0	; 192
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	60 81       	ld	r22, Z
    1948:	71 81       	ldd	r23, Z+1	; 0x01
    194a:	82 81       	ldd	r24, Z+2	; 0x02
    194c:	93 81       	ldd	r25, Z+3	; 0x03
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	4a e7       	ldi	r20, 0x7A	; 122
    1954:	55 e4       	ldi	r21, 0x45	; 69
    1956:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	8c af       	std	Y+60, r24	; 0x3c
    1960:	9d af       	std	Y+61, r25	; 0x3d
    1962:	ae af       	std	Y+62, r26	; 0x3e
    1964:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
    1966:	6c ad       	ldd	r22, Y+60	; 0x3c
    1968:	7d ad       	ldd	r23, Y+61	; 0x3d
    196a:	8e ad       	ldd	r24, Y+62	; 0x3e
    196c:	9f ad       	ldd	r25, Y+63	; 0x3f
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e8       	ldi	r20, 0x80	; 128
    1974:	5f e3       	ldi	r21, 0x3F	; 63
    1976:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    197a:	88 23       	and	r24, r24
    197c:	2c f4       	brge	.+10     	; 0x1988 <LCD_Cmd+0x178>
		__ticks = 1;
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	9b af       	std	Y+59, r25	; 0x3b
    1984:	8a af       	std	Y+58, r24	; 0x3a
    1986:	42 c0       	rjmp	.+132    	; 0x1a0c <LCD_Cmd+0x1fc>
	else if (__tmp > 65535)
    1988:	6c ad       	ldd	r22, Y+60	; 0x3c
    198a:	7d ad       	ldd	r23, Y+61	; 0x3d
    198c:	8e ad       	ldd	r24, Y+62	; 0x3e
    198e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	3f ef       	ldi	r19, 0xFF	; 255
    1994:	4f e7       	ldi	r20, 0x7F	; 127
    1996:	57 e4       	ldi	r21, 0x47	; 71
    1998:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    199c:	18 16       	cp	r1, r24
    199e:	64 f5       	brge	.+88     	; 0x19f8 <LCD_Cmd+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a0:	fe 01       	movw	r30, r28
    19a2:	e0 5c       	subi	r30, 0xC0	; 192
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	60 81       	ld	r22, Z
    19a8:	71 81       	ldd	r23, Z+1	; 0x01
    19aa:	82 81       	ldd	r24, Z+2	; 0x02
    19ac:	93 81       	ldd	r25, Z+3	; 0x03
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	40 e2       	ldi	r20, 0x20	; 32
    19b4:	51 e4       	ldi	r21, 0x41	; 65
    19b6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	bc 01       	movw	r22, r24
    19c0:	cd 01       	movw	r24, r26
    19c2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	9b af       	std	Y+59, r25	; 0x3b
    19cc:	8a af       	std	Y+58, r24	; 0x3a
    19ce:	0f c0       	rjmp	.+30     	; 0x19ee <LCD_Cmd+0x1de>
    19d0:	80 e9       	ldi	r24, 0x90	; 144
    19d2:	91 e0       	ldi	r25, 0x01	; 1
    19d4:	99 af       	std	Y+57, r25	; 0x39
    19d6:	88 af       	std	Y+56, r24	; 0x38
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19d8:	88 ad       	ldd	r24, Y+56	; 0x38
    19da:	99 ad       	ldd	r25, Y+57	; 0x39
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	f1 f7       	brne	.-4      	; 0x19dc <LCD_Cmd+0x1cc>
    19e0:	99 af       	std	Y+57, r25	; 0x39
    19e2:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e4:	8a ad       	ldd	r24, Y+58	; 0x3a
    19e6:	9b ad       	ldd	r25, Y+59	; 0x3b
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	9b af       	std	Y+59, r25	; 0x3b
    19ec:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ee:	8a ad       	ldd	r24, Y+58	; 0x3a
    19f0:	9b ad       	ldd	r25, Y+59	; 0x3b
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	69 f7       	brne	.-38     	; 0x19d0 <LCD_Cmd+0x1c0>
    19f6:	2e c0       	rjmp	.+92     	; 0x1a54 <LCD_Cmd+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f8:	6c ad       	ldd	r22, Y+60	; 0x3c
    19fa:	7d ad       	ldd	r23, Y+61	; 0x3d
    19fc:	8e ad       	ldd	r24, Y+62	; 0x3e
    19fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a00:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	9b af       	std	Y+59, r25	; 0x3b
    1a0a:	8a af       	std	Y+58, r24	; 0x3a
    1a0c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a0e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1a10:	9f ab       	std	Y+55, r25	; 0x37
    1a12:	8e ab       	std	Y+54, r24	; 0x36
    1a14:	8e a9       	ldd	r24, Y+54	; 0x36
    1a16:	9f a9       	ldd	r25, Y+55	; 0x37
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <LCD_Cmd+0x208>
    1a1c:	9f ab       	std	Y+55, r25	; 0x37
    1a1e:	8e ab       	std	Y+54, r24	; 0x36
    1a20:	19 c0       	rjmp	.+50     	; 0x1a54 <LCD_Cmd+0x244>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a22:	8e 01       	movw	r16, r28
    1a24:	0c 5b       	subi	r16, 0xBC	; 188
    1a26:	1f 4f       	sbci	r17, 0xFF	; 255
    1a28:	fe 01       	movw	r30, r28
    1a2a:	eb 5b       	subi	r30, 0xBB	; 187
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	60 81       	ld	r22, Z
    1a30:	71 81       	ldd	r23, Z+1	; 0x01
    1a32:	82 81       	ldd	r24, Z+2	; 0x02
    1a34:	93 81       	ldd	r25, Z+3	; 0x03
    1a36:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	f8 01       	movw	r30, r16
    1a40:	80 83       	st	Z, r24
    1a42:	fe 01       	movw	r30, r28
    1a44:	ec 5b       	subi	r30, 0xBC	; 188
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	80 81       	ld	r24, Z
    1a4a:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a4c:	8d a9       	ldd	r24, Y+53	; 0x35
    1a4e:	8a 95       	dec	r24
    1a50:	f1 f7       	brne	.-4      	; 0x1a4e <LCD_Cmd+0x23e>
    1a52:	8d ab       	std	Y+53, r24	; 0x35
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
    1a54:	8b e0       	ldi	r24, 0x0B	; 11
    1a56:	61 e0       	ldi	r22, 0x01	; 1
    1a58:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_WriteChannel>
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	a0 ea       	ldi	r26, 0xA0	; 160
    1a62:	b0 e4       	ldi	r27, 0x40	; 64
    1a64:	89 ab       	std	Y+49, r24	; 0x31
    1a66:	9a ab       	std	Y+50, r25	; 0x32
    1a68:	ab ab       	std	Y+51, r26	; 0x33
    1a6a:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a6c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a6e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a70:	8b a9       	ldd	r24, Y+51	; 0x33
    1a72:	9c a9       	ldd	r25, Y+52	; 0x34
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	4a e7       	ldi	r20, 0x7A	; 122
    1a7a:	55 e4       	ldi	r21, 0x45	; 69
    1a7c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	8d a7       	std	Y+45, r24	; 0x2d
    1a86:	9e a7       	std	Y+46, r25	; 0x2e
    1a88:	af a7       	std	Y+47, r26	; 0x2f
    1a8a:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1a8c:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a8e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a90:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a92:	98 a9       	ldd	r25, Y+48	; 0x30
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	40 e8       	ldi	r20, 0x80	; 128
    1a9a:	5f e3       	ldi	r21, 0x3F	; 63
    1a9c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1aa0:	88 23       	and	r24, r24
    1aa2:	2c f4       	brge	.+10     	; 0x1aae <LCD_Cmd+0x29e>
		__ticks = 1;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	9c a7       	std	Y+44, r25	; 0x2c
    1aaa:	8b a7       	std	Y+43, r24	; 0x2b
    1aac:	3f c0       	rjmp	.+126    	; 0x1b2c <LCD_Cmd+0x31c>
	else if (__tmp > 65535)
    1aae:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ab0:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ab2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ab4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	3f ef       	ldi	r19, 0xFF	; 255
    1aba:	4f e7       	ldi	r20, 0x7F	; 127
    1abc:	57 e4       	ldi	r21, 0x47	; 71
    1abe:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1ac2:	18 16       	cp	r1, r24
    1ac4:	4c f5       	brge	.+82     	; 0x1b18 <LCD_Cmd+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ac8:	7a a9       	ldd	r23, Y+50	; 0x32
    1aca:	8b a9       	ldd	r24, Y+51	; 0x33
    1acc:	9c a9       	ldd	r25, Y+52	; 0x34
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e2       	ldi	r20, 0x20	; 32
    1ad4:	51 e4       	ldi	r21, 0x41	; 65
    1ad6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	bc 01       	movw	r22, r24
    1ae0:	cd 01       	movw	r24, r26
    1ae2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	9c a7       	std	Y+44, r25	; 0x2c
    1aec:	8b a7       	std	Y+43, r24	; 0x2b
    1aee:	0f c0       	rjmp	.+30     	; 0x1b0e <LCD_Cmd+0x2fe>
    1af0:	80 e9       	ldi	r24, 0x90	; 144
    1af2:	91 e0       	ldi	r25, 0x01	; 1
    1af4:	9a a7       	std	Y+42, r25	; 0x2a
    1af6:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1af8:	89 a5       	ldd	r24, Y+41	; 0x29
    1afa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	f1 f7       	brne	.-4      	; 0x1afc <LCD_Cmd+0x2ec>
    1b00:	9a a7       	std	Y+42, r25	; 0x2a
    1b02:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b04:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b06:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	9c a7       	std	Y+44, r25	; 0x2c
    1b0c:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b10:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	69 f7       	brne	.-38     	; 0x1af0 <LCD_Cmd+0x2e0>
    1b16:	14 c0       	rjmp	.+40     	; 0x1b40 <LCD_Cmd+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b18:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b1a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b1e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b20:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	9c a7       	std	Y+44, r25	; 0x2c
    1b2a:	8b a7       	std	Y+43, r24	; 0x2b
    1b2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b2e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b30:	98 a7       	std	Y+40, r25	; 0x28
    1b32:	8f a3       	std	Y+39, r24	; 0x27
    1b34:	8f a1       	ldd	r24, Y+39	; 0x27
    1b36:	98 a5       	ldd	r25, Y+40	; 0x28
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <LCD_Cmd+0x328>
    1b3c:	98 a7       	std	Y+40, r25	; 0x28
    1b3e:	8f a3       	std	Y+39, r24	; 0x27
	
	_delay_ms(5);
	
	PortValue = DIO_ReadPort(LCD_DataPort);
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	0e 94 57 09 	call	0x12ae	; 0x12ae <DIO_ReadPort>
    1b46:	fe 01       	movw	r30, r28
    1b48:	e3 5b       	subi	r30, 0xB3	; 179
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	80 83       	st	Z, r24
	PortValue = (PortValue & 0x0F) | (cmd << 4);
    1b4e:	fe 01       	movw	r30, r28
    1b50:	e3 5b       	subi	r30, 0xB3	; 179
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	80 81       	ld	r24, Z
    1b56:	28 2f       	mov	r18, r24
    1b58:	2f 70       	andi	r18, 0x0F	; 15
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	e2 5b       	subi	r30, 0xB2	; 178
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	80 81       	ld	r24, Z
    1b62:	88 2f       	mov	r24, r24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	82 95       	swap	r24
    1b68:	92 95       	swap	r25
    1b6a:	90 7f       	andi	r25, 0xF0	; 240
    1b6c:	98 27       	eor	r25, r24
    1b6e:	80 7f       	andi	r24, 0xF0	; 240
    1b70:	98 27       	eor	r25, r24
    1b72:	82 2b       	or	r24, r18
    1b74:	fe 01       	movw	r30, r28
    1b76:	e3 5b       	subi	r30, 0xB3	; 179
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	80 83       	st	Z, r24
	DIO_WritePort(LCD_DataPort,PortValue);
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	e3 5b       	subi	r30, 0xB3	; 179
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	60 81       	ld	r22, Z
    1b86:	0e 94 16 09 	call	0x122c	; 0x122c <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
    1b8a:	8b e0       	ldi	r24, 0x0B	; 11
    1b8c:	60 e0       	ldi	r22, 0x00	; 0
    1b8e:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_WriteChannel>
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	a8 ec       	ldi	r26, 0xC8	; 200
    1b98:	b2 e4       	ldi	r27, 0x42	; 66
    1b9a:	8b a3       	std	Y+35, r24	; 0x23
    1b9c:	9c a3       	std	Y+36, r25	; 0x24
    1b9e:	ad a3       	std	Y+37, r26	; 0x25
    1ba0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ba2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ba4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ba6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ba8:	9e a1       	ldd	r25, Y+38	; 0x26
    1baa:	2b ea       	ldi	r18, 0xAB	; 171
    1bac:	3a ea       	ldi	r19, 0xAA	; 170
    1bae:	4a ea       	ldi	r20, 0xAA	; 170
    1bb0:	50 e4       	ldi	r21, 0x40	; 64
    1bb2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	8f 8f       	std	Y+31, r24	; 0x1f
    1bbc:	98 a3       	std	Y+32, r25	; 0x20
    1bbe:	a9 a3       	std	Y+33, r26	; 0x21
    1bc0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1bc2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bc4:	78 a1       	ldd	r23, Y+32	; 0x20
    1bc6:	89 a1       	ldd	r24, Y+33	; 0x21
    1bc8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	40 e8       	ldi	r20, 0x80	; 128
    1bd0:	5f e3       	ldi	r21, 0x3F	; 63
    1bd2:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1bd6:	88 23       	and	r24, r24
    1bd8:	1c f4       	brge	.+6      	; 0x1be0 <LCD_Cmd+0x3d0>
		__ticks = 1;
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	8e 8f       	std	Y+30, r24	; 0x1e
    1bde:	91 c0       	rjmp	.+290    	; 0x1d02 <LCD_Cmd+0x4f2>
	else if (__tmp > 255)
    1be0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1be2:	78 a1       	ldd	r23, Y+32	; 0x20
    1be4:	89 a1       	ldd	r24, Y+33	; 0x21
    1be6:	9a a1       	ldd	r25, Y+34	; 0x22
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	4f e7       	ldi	r20, 0x7F	; 127
    1bee:	53 e4       	ldi	r21, 0x43	; 67
    1bf0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1bf4:	18 16       	cp	r1, r24
    1bf6:	0c f0       	brlt	.+2      	; 0x1bfa <LCD_Cmd+0x3ea>
    1bf8:	7b c0       	rjmp	.+246    	; 0x1cf0 <LCD_Cmd+0x4e0>
	{
		_delay_ms(__us / 1000.0);
    1bfa:	6b a1       	ldd	r22, Y+35	; 0x23
    1bfc:	7c a1       	ldd	r23, Y+36	; 0x24
    1bfe:	8d a1       	ldd	r24, Y+37	; 0x25
    1c00:	9e a1       	ldd	r25, Y+38	; 0x26
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	4a e7       	ldi	r20, 0x7A	; 122
    1c08:	54 e4       	ldi	r21, 0x44	; 68
    1c0a:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	8a 8f       	std	Y+26, r24	; 0x1a
    1c14:	9b 8f       	std	Y+27, r25	; 0x1b
    1c16:	ac 8f       	std	Y+28, r26	; 0x1c
    1c18:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c1c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c1e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c20:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	4a e7       	ldi	r20, 0x7A	; 122
    1c28:	55 e4       	ldi	r21, 0x45	; 69
    1c2a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	8e 8b       	std	Y+22, r24	; 0x16
    1c34:	9f 8b       	std	Y+23, r25	; 0x17
    1c36:	a8 8f       	std	Y+24, r26	; 0x18
    1c38:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1c3a:	6e 89       	ldd	r22, Y+22	; 0x16
    1c3c:	7f 89       	ldd	r23, Y+23	; 0x17
    1c3e:	88 8d       	ldd	r24, Y+24	; 0x18
    1c40:	99 8d       	ldd	r25, Y+25	; 0x19
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	40 e8       	ldi	r20, 0x80	; 128
    1c48:	5f e3       	ldi	r21, 0x3F	; 63
    1c4a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1c4e:	88 23       	and	r24, r24
    1c50:	2c f4       	brge	.+10     	; 0x1c5c <LCD_Cmd+0x44c>
		__ticks = 1;
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	9d 8b       	std	Y+21, r25	; 0x15
    1c58:	8c 8b       	std	Y+20, r24	; 0x14
    1c5a:	3f c0       	rjmp	.+126    	; 0x1cda <LCD_Cmd+0x4ca>
	else if (__tmp > 65535)
    1c5c:	6e 89       	ldd	r22, Y+22	; 0x16
    1c5e:	7f 89       	ldd	r23, Y+23	; 0x17
    1c60:	88 8d       	ldd	r24, Y+24	; 0x18
    1c62:	99 8d       	ldd	r25, Y+25	; 0x19
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	3f ef       	ldi	r19, 0xFF	; 255
    1c68:	4f e7       	ldi	r20, 0x7F	; 127
    1c6a:	57 e4       	ldi	r21, 0x47	; 71
    1c6c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1c70:	18 16       	cp	r1, r24
    1c72:	4c f5       	brge	.+82     	; 0x1cc6 <LCD_Cmd+0x4b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c74:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c76:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c78:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c7a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	40 e2       	ldi	r20, 0x20	; 32
    1c82:	51 e4       	ldi	r21, 0x41	; 65
    1c84:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	bc 01       	movw	r22, r24
    1c8e:	cd 01       	movw	r24, r26
    1c90:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	9d 8b       	std	Y+21, r25	; 0x15
    1c9a:	8c 8b       	std	Y+20, r24	; 0x14
    1c9c:	0f c0       	rjmp	.+30     	; 0x1cbc <LCD_Cmd+0x4ac>
    1c9e:	80 e9       	ldi	r24, 0x90	; 144
    1ca0:	91 e0       	ldi	r25, 0x01	; 1
    1ca2:	9b 8b       	std	Y+19, r25	; 0x13
    1ca4:	8a 8b       	std	Y+18, r24	; 0x12
    1ca6:	8a 89       	ldd	r24, Y+18	; 0x12
    1ca8:	9b 89       	ldd	r25, Y+19	; 0x13
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	f1 f7       	brne	.-4      	; 0x1caa <LCD_Cmd+0x49a>
    1cae:	9b 8b       	std	Y+19, r25	; 0x13
    1cb0:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb2:	8c 89       	ldd	r24, Y+20	; 0x14
    1cb4:	9d 89       	ldd	r25, Y+21	; 0x15
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	9d 8b       	std	Y+21, r25	; 0x15
    1cba:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cbc:	8c 89       	ldd	r24, Y+20	; 0x14
    1cbe:	9d 89       	ldd	r25, Y+21	; 0x15
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	69 f7       	brne	.-38     	; 0x1c9e <LCD_Cmd+0x48e>
    1cc4:	24 c0       	rjmp	.+72     	; 0x1d0e <LCD_Cmd+0x4fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc6:	6e 89       	ldd	r22, Y+22	; 0x16
    1cc8:	7f 89       	ldd	r23, Y+23	; 0x17
    1cca:	88 8d       	ldd	r24, Y+24	; 0x18
    1ccc:	99 8d       	ldd	r25, Y+25	; 0x19
    1cce:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	9d 8b       	std	Y+21, r25	; 0x15
    1cd8:	8c 8b       	std	Y+20, r24	; 0x14
    1cda:	8c 89       	ldd	r24, Y+20	; 0x14
    1cdc:	9d 89       	ldd	r25, Y+21	; 0x15
    1cde:	99 8b       	std	Y+17, r25	; 0x11
    1ce0:	88 8b       	std	Y+16, r24	; 0x10
    1ce2:	88 89       	ldd	r24, Y+16	; 0x10
    1ce4:	99 89       	ldd	r25, Y+17	; 0x11
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	f1 f7       	brne	.-4      	; 0x1ce6 <LCD_Cmd+0x4d6>
    1cea:	99 8b       	std	Y+17, r25	; 0x11
    1cec:	88 8b       	std	Y+16, r24	; 0x10
    1cee:	0f c0       	rjmp	.+30     	; 0x1d0e <LCD_Cmd+0x4fe>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cf0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1cf2:	78 a1       	ldd	r23, Y+32	; 0x20
    1cf4:	89 a1       	ldd	r24, Y+33	; 0x21
    1cf6:	9a a1       	ldd	r25, Y+34	; 0x22
    1cf8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	8e 8f       	std	Y+30, r24	; 0x1e
    1d02:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d04:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d08:	8a 95       	dec	r24
    1d0a:	f1 f7       	brne	.-4      	; 0x1d08 <LCD_Cmd+0x4f8>
    1d0c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
    1d0e:	8b e0       	ldi	r24, 0x0B	; 11
    1d10:	61 e0       	ldi	r22, 0x01	; 1
    1d12:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_WriteChannel>
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	a0 e0       	ldi	r26, 0x00	; 0
    1d1c:	b0 e4       	ldi	r27, 0x40	; 64
    1d1e:	8b 87       	std	Y+11, r24	; 0x0b
    1d20:	9c 87       	std	Y+12, r25	; 0x0c
    1d22:	ad 87       	std	Y+13, r26	; 0x0d
    1d24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	4a e7       	ldi	r20, 0x7A	; 122
    1d34:	55 e4       	ldi	r21, 0x45	; 69
    1d36:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	8f 83       	std	Y+7, r24	; 0x07
    1d40:	98 87       	std	Y+8, r25	; 0x08
    1d42:	a9 87       	std	Y+9, r26	; 0x09
    1d44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d46:	6f 81       	ldd	r22, Y+7	; 0x07
    1d48:	78 85       	ldd	r23, Y+8	; 0x08
    1d4a:	89 85       	ldd	r24, Y+9	; 0x09
    1d4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e8       	ldi	r20, 0x80	; 128
    1d54:	5f e3       	ldi	r21, 0x3F	; 63
    1d56:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1d5a:	88 23       	and	r24, r24
    1d5c:	2c f4       	brge	.+10     	; 0x1d68 <LCD_Cmd+0x558>
		__ticks = 1;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	9e 83       	std	Y+6, r25	; 0x06
    1d64:	8d 83       	std	Y+5, r24	; 0x05
    1d66:	3f c0       	rjmp	.+126    	; 0x1de6 <LCD_Cmd+0x5d6>
	else if (__tmp > 65535)
    1d68:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6a:	78 85       	ldd	r23, Y+8	; 0x08
    1d6c:	89 85       	ldd	r24, Y+9	; 0x09
    1d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	3f ef       	ldi	r19, 0xFF	; 255
    1d74:	4f e7       	ldi	r20, 0x7F	; 127
    1d76:	57 e4       	ldi	r21, 0x47	; 71
    1d78:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1d7c:	18 16       	cp	r1, r24
    1d7e:	4c f5       	brge	.+82     	; 0x1dd2 <LCD_Cmd+0x5c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	40 e2       	ldi	r20, 0x20	; 32
    1d8e:	51 e4       	ldi	r21, 0x41	; 65
    1d90:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	bc 01       	movw	r22, r24
    1d9a:	cd 01       	movw	r24, r26
    1d9c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	9e 83       	std	Y+6, r25	; 0x06
    1da6:	8d 83       	std	Y+5, r24	; 0x05
    1da8:	0f c0       	rjmp	.+30     	; 0x1dc8 <LCD_Cmd+0x5b8>
    1daa:	80 e9       	ldi	r24, 0x90	; 144
    1dac:	91 e0       	ldi	r25, 0x01	; 1
    1dae:	9c 83       	std	Y+4, r25	; 0x04
    1db0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	9c 81       	ldd	r25, Y+4	; 0x04
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <LCD_Cmd+0x5a6>
    1dba:	9c 83       	std	Y+4, r25	; 0x04
    1dbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	9e 83       	std	Y+6, r25	; 0x06
    1dc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dca:	9e 81       	ldd	r25, Y+6	; 0x06
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	69 f7       	brne	.-38     	; 0x1daa <LCD_Cmd+0x59a>
    1dd0:	14 c0       	rjmp	.+40     	; 0x1dfa <LCD_Cmd+0x5ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd4:	78 85       	ldd	r23, Y+8	; 0x08
    1dd6:	89 85       	ldd	r24, Y+9	; 0x09
    1dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dda:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9e 83       	std	Y+6, r25	; 0x06
    1de4:	8d 83       	std	Y+5, r24	; 0x05
    1de6:	8d 81       	ldd	r24, Y+5	; 0x05
    1de8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dea:	9a 83       	std	Y+2, r25	; 0x02
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	9a 81       	ldd	r25, Y+2	; 0x02
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	f1 f7       	brne	.-4      	; 0x1df2 <LCD_Cmd+0x5e2>
    1df6:	9a 83       	std	Y+2, r25	; 0x02
    1df8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1dfa:	c2 5b       	subi	r28, 0xB2	; 178
    1dfc:	df 4f       	sbci	r29, 0xFF	; 255
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	f8 94       	cli
    1e02:	de bf       	out	0x3e, r29	; 62
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	cd bf       	out	0x3d, r28	; 61
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	1f 91       	pop	r17
    1e0e:	0f 91       	pop	r16
    1e10:	08 95       	ret

00001e12 <LCD_Char>:
void LCD_Char(int8 data){
    1e12:	0f 93       	push	r16
    1e14:	1f 93       	push	r17
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	ce 54       	subi	r28, 0x4E	; 78
    1e20:	d0 40       	sbci	r29, 0x00	; 0
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	cd bf       	out	0x3d, r28	; 61
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	e2 5b       	subi	r30, 0xB2	; 178
    1e30:	ff 4f       	sbci	r31, 0xFF	; 255
    1e32:	80 83       	st	Z, r24
	Uint8 PortValue = 0;
    1e34:	fe 01       	movw	r30, r28
    1e36:	e3 5b       	subi	r30, 0xB3	; 179
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	10 82       	st	Z, r1
	DIO_WriteChannel(LCD_RS,STD_High);
    1e3c:	89 e0       	ldi	r24, 0x09	; 9
    1e3e:	61 e0       	ldi	r22, 0x01	; 1
    1e40:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_WriteChannel>
	PortValue = DIO_ReadPort(LCD_DataPort);
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	0e 94 57 09 	call	0x12ae	; 0x12ae <DIO_ReadPort>
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	e3 5b       	subi	r30, 0xB3	; 179
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	80 83       	st	Z, r24
	PortValue = (PortValue & 0x0F) | (data & 0xF0);
    1e52:	fe 01       	movw	r30, r28
    1e54:	e3 5b       	subi	r30, 0xB3	; 179
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	80 81       	ld	r24, Z
    1e5a:	98 2f       	mov	r25, r24
    1e5c:	9f 70       	andi	r25, 0x0F	; 15
    1e5e:	fe 01       	movw	r30, r28
    1e60:	e2 5b       	subi	r30, 0xB2	; 178
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	80 81       	ld	r24, Z
    1e66:	80 7f       	andi	r24, 0xF0	; 240
    1e68:	89 2b       	or	r24, r25
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	e3 5b       	subi	r30, 0xB3	; 179
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	80 83       	st	Z, r24
	DIO_WritePort(LCD_DataPort,PortValue);
    1e72:	fe 01       	movw	r30, r28
    1e74:	e3 5b       	subi	r30, 0xB3	; 179
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	60 81       	ld	r22, Z
    1e7c:	0e 94 16 09 	call	0x122c	; 0x122c <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
    1e80:	8b e0       	ldi	r24, 0x0B	; 11
    1e82:	60 e0       	ldi	r22, 0x00	; 0
    1e84:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_WriteChannel>
    1e88:	fe 01       	movw	r30, r28
    1e8a:	e7 5b       	subi	r30, 0xB7	; 183
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	a8 ec       	ldi	r26, 0xC8	; 200
    1e94:	b2 e4       	ldi	r27, 0x42	; 66
    1e96:	80 83       	st	Z, r24
    1e98:	91 83       	std	Z+1, r25	; 0x01
    1e9a:	a2 83       	std	Z+2, r26	; 0x02
    1e9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e9e:	8e 01       	movw	r16, r28
    1ea0:	0b 5b       	subi	r16, 0xBB	; 187
    1ea2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	e7 5b       	subi	r30, 0xB7	; 183
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	60 81       	ld	r22, Z
    1eac:	71 81       	ldd	r23, Z+1	; 0x01
    1eae:	82 81       	ldd	r24, Z+2	; 0x02
    1eb0:	93 81       	ldd	r25, Z+3	; 0x03
    1eb2:	2b ea       	ldi	r18, 0xAB	; 171
    1eb4:	3a ea       	ldi	r19, 0xAA	; 170
    1eb6:	4a ea       	ldi	r20, 0xAA	; 170
    1eb8:	50 e4       	ldi	r21, 0x40	; 64
    1eba:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	f8 01       	movw	r30, r16
    1ec4:	80 83       	st	Z, r24
    1ec6:	91 83       	std	Z+1, r25	; 0x01
    1ec8:	a2 83       	std	Z+2, r26	; 0x02
    1eca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ecc:	fe 01       	movw	r30, r28
    1ece:	eb 5b       	subi	r30, 0xBB	; 187
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	60 81       	ld	r22, Z
    1ed4:	71 81       	ldd	r23, Z+1	; 0x01
    1ed6:	82 81       	ldd	r24, Z+2	; 0x02
    1ed8:	93 81       	ldd	r25, Z+3	; 0x03
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e8       	ldi	r20, 0x80	; 128
    1ee0:	5f e3       	ldi	r21, 0x3F	; 63
    1ee2:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1ee6:	88 23       	and	r24, r24
    1ee8:	34 f4       	brge	.+12     	; 0x1ef6 <LCD_Char+0xe4>
		__ticks = 1;
    1eea:	fe 01       	movw	r30, r28
    1eec:	ec 5b       	subi	r30, 0xBC	; 188
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	80 83       	st	Z, r24
    1ef4:	a7 c0       	rjmp	.+334    	; 0x2044 <LCD_Char+0x232>
	else if (__tmp > 255)
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	eb 5b       	subi	r30, 0xBB	; 187
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	60 81       	ld	r22, Z
    1efe:	71 81       	ldd	r23, Z+1	; 0x01
    1f00:	82 81       	ldd	r24, Z+2	; 0x02
    1f02:	93 81       	ldd	r25, Z+3	; 0x03
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	4f e7       	ldi	r20, 0x7F	; 127
    1f0a:	53 e4       	ldi	r21, 0x43	; 67
    1f0c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1f10:	18 16       	cp	r1, r24
    1f12:	0c f0       	brlt	.+2      	; 0x1f16 <LCD_Char+0x104>
    1f14:	87 c0       	rjmp	.+270    	; 0x2024 <LCD_Char+0x212>
	{
		_delay_ms(__us / 1000.0);
    1f16:	fe 01       	movw	r30, r28
    1f18:	e7 5b       	subi	r30, 0xB7	; 183
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	60 81       	ld	r22, Z
    1f1e:	71 81       	ldd	r23, Z+1	; 0x01
    1f20:	82 81       	ldd	r24, Z+2	; 0x02
    1f22:	93 81       	ldd	r25, Z+3	; 0x03
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	4a e7       	ldi	r20, 0x7A	; 122
    1f2a:	54 e4       	ldi	r21, 0x44	; 68
    1f2c:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	fe 01       	movw	r30, r28
    1f36:	e0 5c       	subi	r30, 0xC0	; 192
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	80 83       	st	Z, r24
    1f3c:	91 83       	std	Z+1, r25	; 0x01
    1f3e:	a2 83       	std	Z+2, r26	; 0x02
    1f40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f42:	fe 01       	movw	r30, r28
    1f44:	e0 5c       	subi	r30, 0xC0	; 192
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	60 81       	ld	r22, Z
    1f4a:	71 81       	ldd	r23, Z+1	; 0x01
    1f4c:	82 81       	ldd	r24, Z+2	; 0x02
    1f4e:	93 81       	ldd	r25, Z+3	; 0x03
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	4a e7       	ldi	r20, 0x7A	; 122
    1f56:	55 e4       	ldi	r21, 0x45	; 69
    1f58:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	8c af       	std	Y+60, r24	; 0x3c
    1f62:	9d af       	std	Y+61, r25	; 0x3d
    1f64:	ae af       	std	Y+62, r26	; 0x3e
    1f66:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
    1f68:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f6a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f6c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e8       	ldi	r20, 0x80	; 128
    1f76:	5f e3       	ldi	r21, 0x3F	; 63
    1f78:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1f7c:	88 23       	and	r24, r24
    1f7e:	2c f4       	brge	.+10     	; 0x1f8a <LCD_Char+0x178>
		__ticks = 1;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	9b af       	std	Y+59, r25	; 0x3b
    1f86:	8a af       	std	Y+58, r24	; 0x3a
    1f88:	42 c0       	rjmp	.+132    	; 0x200e <LCD_Char+0x1fc>
	else if (__tmp > 65535)
    1f8a:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f8c:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f8e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f90:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	3f ef       	ldi	r19, 0xFF	; 255
    1f96:	4f e7       	ldi	r20, 0x7F	; 127
    1f98:	57 e4       	ldi	r21, 0x47	; 71
    1f9a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1f9e:	18 16       	cp	r1, r24
    1fa0:	64 f5       	brge	.+88     	; 0x1ffa <LCD_Char+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	e0 5c       	subi	r30, 0xC0	; 192
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	60 81       	ld	r22, Z
    1faa:	71 81       	ldd	r23, Z+1	; 0x01
    1fac:	82 81       	ldd	r24, Z+2	; 0x02
    1fae:	93 81       	ldd	r25, Z+3	; 0x03
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e2       	ldi	r20, 0x20	; 32
    1fb6:	51 e4       	ldi	r21, 0x41	; 65
    1fb8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	bc 01       	movw	r22, r24
    1fc2:	cd 01       	movw	r24, r26
    1fc4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	9b af       	std	Y+59, r25	; 0x3b
    1fce:	8a af       	std	Y+58, r24	; 0x3a
    1fd0:	0f c0       	rjmp	.+30     	; 0x1ff0 <LCD_Char+0x1de>
    1fd2:	80 e9       	ldi	r24, 0x90	; 144
    1fd4:	91 e0       	ldi	r25, 0x01	; 1
    1fd6:	99 af       	std	Y+57, r25	; 0x39
    1fd8:	88 af       	std	Y+56, r24	; 0x38
    1fda:	88 ad       	ldd	r24, Y+56	; 0x38
    1fdc:	99 ad       	ldd	r25, Y+57	; 0x39
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <LCD_Char+0x1cc>
    1fe2:	99 af       	std	Y+57, r25	; 0x39
    1fe4:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe6:	8a ad       	ldd	r24, Y+58	; 0x3a
    1fe8:	9b ad       	ldd	r25, Y+59	; 0x3b
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	9b af       	std	Y+59, r25	; 0x3b
    1fee:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff0:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ff2:	9b ad       	ldd	r25, Y+59	; 0x3b
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	69 f7       	brne	.-38     	; 0x1fd2 <LCD_Char+0x1c0>
    1ff8:	2e c0       	rjmp	.+92     	; 0x2056 <LCD_Char+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffa:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ffc:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ffe:	8e ad       	ldd	r24, Y+62	; 0x3e
    2000:	9f ad       	ldd	r25, Y+63	; 0x3f
    2002:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	9b af       	std	Y+59, r25	; 0x3b
    200c:	8a af       	std	Y+58, r24	; 0x3a
    200e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2010:	9b ad       	ldd	r25, Y+59	; 0x3b
    2012:	9f ab       	std	Y+55, r25	; 0x37
    2014:	8e ab       	std	Y+54, r24	; 0x36
    2016:	8e a9       	ldd	r24, Y+54	; 0x36
    2018:	9f a9       	ldd	r25, Y+55	; 0x37
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	f1 f7       	brne	.-4      	; 0x201a <LCD_Char+0x208>
    201e:	9f ab       	std	Y+55, r25	; 0x37
    2020:	8e ab       	std	Y+54, r24	; 0x36
    2022:	19 c0       	rjmp	.+50     	; 0x2056 <LCD_Char+0x244>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2024:	8e 01       	movw	r16, r28
    2026:	0c 5b       	subi	r16, 0xBC	; 188
    2028:	1f 4f       	sbci	r17, 0xFF	; 255
    202a:	fe 01       	movw	r30, r28
    202c:	eb 5b       	subi	r30, 0xBB	; 187
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	60 81       	ld	r22, Z
    2032:	71 81       	ldd	r23, Z+1	; 0x01
    2034:	82 81       	ldd	r24, Z+2	; 0x02
    2036:	93 81       	ldd	r25, Z+3	; 0x03
    2038:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	f8 01       	movw	r30, r16
    2042:	80 83       	st	Z, r24
    2044:	fe 01       	movw	r30, r28
    2046:	ec 5b       	subi	r30, 0xBC	; 188
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	80 81       	ld	r24, Z
    204c:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    204e:	8d a9       	ldd	r24, Y+53	; 0x35
    2050:	8a 95       	dec	r24
    2052:	f1 f7       	brne	.-4      	; 0x2050 <LCD_Char+0x23e>
    2054:	8d ab       	std	Y+53, r24	; 0x35
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
    2056:	8b e0       	ldi	r24, 0x0B	; 11
    2058:	61 e0       	ldi	r22, 0x01	; 1
    205a:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_WriteChannel>
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	a0 ea       	ldi	r26, 0xA0	; 160
    2064:	b0 e4       	ldi	r27, 0x40	; 64
    2066:	89 ab       	std	Y+49, r24	; 0x31
    2068:	9a ab       	std	Y+50, r25	; 0x32
    206a:	ab ab       	std	Y+51, r26	; 0x33
    206c:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206e:	69 a9       	ldd	r22, Y+49	; 0x31
    2070:	7a a9       	ldd	r23, Y+50	; 0x32
    2072:	8b a9       	ldd	r24, Y+51	; 0x33
    2074:	9c a9       	ldd	r25, Y+52	; 0x34
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	4a e7       	ldi	r20, 0x7A	; 122
    207c:	55 e4       	ldi	r21, 0x45	; 69
    207e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	8d a7       	std	Y+45, r24	; 0x2d
    2088:	9e a7       	std	Y+46, r25	; 0x2e
    208a:	af a7       	std	Y+47, r26	; 0x2f
    208c:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    208e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2090:	7e a5       	ldd	r23, Y+46	; 0x2e
    2092:	8f a5       	ldd	r24, Y+47	; 0x2f
    2094:	98 a9       	ldd	r25, Y+48	; 0x30
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e8       	ldi	r20, 0x80	; 128
    209c:	5f e3       	ldi	r21, 0x3F	; 63
    209e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    20a2:	88 23       	and	r24, r24
    20a4:	2c f4       	brge	.+10     	; 0x20b0 <LCD_Char+0x29e>
		__ticks = 1;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	9c a7       	std	Y+44, r25	; 0x2c
    20ac:	8b a7       	std	Y+43, r24	; 0x2b
    20ae:	3f c0       	rjmp	.+126    	; 0x212e <LCD_Char+0x31c>
	else if (__tmp > 65535)
    20b0:	6d a5       	ldd	r22, Y+45	; 0x2d
    20b2:	7e a5       	ldd	r23, Y+46	; 0x2e
    20b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    20b6:	98 a9       	ldd	r25, Y+48	; 0x30
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	3f ef       	ldi	r19, 0xFF	; 255
    20bc:	4f e7       	ldi	r20, 0x7F	; 127
    20be:	57 e4       	ldi	r21, 0x47	; 71
    20c0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    20c4:	18 16       	cp	r1, r24
    20c6:	4c f5       	brge	.+82     	; 0x211a <LCD_Char+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c8:	69 a9       	ldd	r22, Y+49	; 0x31
    20ca:	7a a9       	ldd	r23, Y+50	; 0x32
    20cc:	8b a9       	ldd	r24, Y+51	; 0x33
    20ce:	9c a9       	ldd	r25, Y+52	; 0x34
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	40 e2       	ldi	r20, 0x20	; 32
    20d6:	51 e4       	ldi	r21, 0x41	; 65
    20d8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	bc 01       	movw	r22, r24
    20e2:	cd 01       	movw	r24, r26
    20e4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	9c a7       	std	Y+44, r25	; 0x2c
    20ee:	8b a7       	std	Y+43, r24	; 0x2b
    20f0:	0f c0       	rjmp	.+30     	; 0x2110 <LCD_Char+0x2fe>
    20f2:	80 e9       	ldi	r24, 0x90	; 144
    20f4:	91 e0       	ldi	r25, 0x01	; 1
    20f6:	9a a7       	std	Y+42, r25	; 0x2a
    20f8:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20fa:	89 a5       	ldd	r24, Y+41	; 0x29
    20fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	f1 f7       	brne	.-4      	; 0x20fe <LCD_Char+0x2ec>
    2102:	9a a7       	std	Y+42, r25	; 0x2a
    2104:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2106:	8b a5       	ldd	r24, Y+43	; 0x2b
    2108:	9c a5       	ldd	r25, Y+44	; 0x2c
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	9c a7       	std	Y+44, r25	; 0x2c
    210e:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2110:	8b a5       	ldd	r24, Y+43	; 0x2b
    2112:	9c a5       	ldd	r25, Y+44	; 0x2c
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	69 f7       	brne	.-38     	; 0x20f2 <LCD_Char+0x2e0>
    2118:	14 c0       	rjmp	.+40     	; 0x2142 <LCD_Char+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211a:	6d a5       	ldd	r22, Y+45	; 0x2d
    211c:	7e a5       	ldd	r23, Y+46	; 0x2e
    211e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2120:	98 a9       	ldd	r25, Y+48	; 0x30
    2122:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	9c a7       	std	Y+44, r25	; 0x2c
    212c:	8b a7       	std	Y+43, r24	; 0x2b
    212e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2130:	9c a5       	ldd	r25, Y+44	; 0x2c
    2132:	98 a7       	std	Y+40, r25	; 0x28
    2134:	8f a3       	std	Y+39, r24	; 0x27
    2136:	8f a1       	ldd	r24, Y+39	; 0x27
    2138:	98 a5       	ldd	r25, Y+40	; 0x28
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <LCD_Char+0x328>
    213e:	98 a7       	std	Y+40, r25	; 0x28
    2140:	8f a3       	std	Y+39, r24	; 0x27
	
	_delay_ms(5);
	
	PortValue = DIO_ReadPort(LCD_DataPort);
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	0e 94 57 09 	call	0x12ae	; 0x12ae <DIO_ReadPort>
    2148:	fe 01       	movw	r30, r28
    214a:	e3 5b       	subi	r30, 0xB3	; 179
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	80 83       	st	Z, r24
	PortValue = (PortValue & 0x0F) | (data << 4);
    2150:	fe 01       	movw	r30, r28
    2152:	e3 5b       	subi	r30, 0xB3	; 179
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	80 81       	ld	r24, Z
    2158:	28 2f       	mov	r18, r24
    215a:	2f 70       	andi	r18, 0x0F	; 15
    215c:	fe 01       	movw	r30, r28
    215e:	e2 5b       	subi	r30, 0xB2	; 178
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	80 81       	ld	r24, Z
    2164:	88 2f       	mov	r24, r24
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	82 95       	swap	r24
    216a:	92 95       	swap	r25
    216c:	90 7f       	andi	r25, 0xF0	; 240
    216e:	98 27       	eor	r25, r24
    2170:	80 7f       	andi	r24, 0xF0	; 240
    2172:	98 27       	eor	r25, r24
    2174:	82 2b       	or	r24, r18
    2176:	fe 01       	movw	r30, r28
    2178:	e3 5b       	subi	r30, 0xB3	; 179
    217a:	ff 4f       	sbci	r31, 0xFF	; 255
    217c:	80 83       	st	Z, r24
	DIO_WritePort(LCD_DataPort,PortValue);
    217e:	fe 01       	movw	r30, r28
    2180:	e3 5b       	subi	r30, 0xB3	; 179
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	60 81       	ld	r22, Z
    2188:	0e 94 16 09 	call	0x122c	; 0x122c <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
    218c:	8b e0       	ldi	r24, 0x0B	; 11
    218e:	60 e0       	ldi	r22, 0x00	; 0
    2190:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_WriteChannel>
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	a8 ec       	ldi	r26, 0xC8	; 200
    219a:	b2 e4       	ldi	r27, 0x42	; 66
    219c:	8b a3       	std	Y+35, r24	; 0x23
    219e:	9c a3       	std	Y+36, r25	; 0x24
    21a0:	ad a3       	std	Y+37, r26	; 0x25
    21a2:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21a4:	6b a1       	ldd	r22, Y+35	; 0x23
    21a6:	7c a1       	ldd	r23, Y+36	; 0x24
    21a8:	8d a1       	ldd	r24, Y+37	; 0x25
    21aa:	9e a1       	ldd	r25, Y+38	; 0x26
    21ac:	2b ea       	ldi	r18, 0xAB	; 171
    21ae:	3a ea       	ldi	r19, 0xAA	; 170
    21b0:	4a ea       	ldi	r20, 0xAA	; 170
    21b2:	50 e4       	ldi	r21, 0x40	; 64
    21b4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	8f 8f       	std	Y+31, r24	; 0x1f
    21be:	98 a3       	std	Y+32, r25	; 0x20
    21c0:	a9 a3       	std	Y+33, r26	; 0x21
    21c2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    21c4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    21c6:	78 a1       	ldd	r23, Y+32	; 0x20
    21c8:	89 a1       	ldd	r24, Y+33	; 0x21
    21ca:	9a a1       	ldd	r25, Y+34	; 0x22
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	40 e8       	ldi	r20, 0x80	; 128
    21d2:	5f e3       	ldi	r21, 0x3F	; 63
    21d4:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    21d8:	88 23       	and	r24, r24
    21da:	1c f4       	brge	.+6      	; 0x21e2 <LCD_Char+0x3d0>
		__ticks = 1;
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	8e 8f       	std	Y+30, r24	; 0x1e
    21e0:	91 c0       	rjmp	.+290    	; 0x2304 <LCD_Char+0x4f2>
	else if (__tmp > 255)
    21e2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    21e4:	78 a1       	ldd	r23, Y+32	; 0x20
    21e6:	89 a1       	ldd	r24, Y+33	; 0x21
    21e8:	9a a1       	ldd	r25, Y+34	; 0x22
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	4f e7       	ldi	r20, 0x7F	; 127
    21f0:	53 e4       	ldi	r21, 0x43	; 67
    21f2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    21f6:	18 16       	cp	r1, r24
    21f8:	0c f0       	brlt	.+2      	; 0x21fc <LCD_Char+0x3ea>
    21fa:	7b c0       	rjmp	.+246    	; 0x22f2 <LCD_Char+0x4e0>
	{
		_delay_ms(__us / 1000.0);
    21fc:	6b a1       	ldd	r22, Y+35	; 0x23
    21fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2200:	8d a1       	ldd	r24, Y+37	; 0x25
    2202:	9e a1       	ldd	r25, Y+38	; 0x26
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	4a e7       	ldi	r20, 0x7A	; 122
    220a:	54 e4       	ldi	r21, 0x44	; 68
    220c:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	8a 8f       	std	Y+26, r24	; 0x1a
    2216:	9b 8f       	std	Y+27, r25	; 0x1b
    2218:	ac 8f       	std	Y+28, r26	; 0x1c
    221a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    221c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    221e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2220:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2222:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	4a e7       	ldi	r20, 0x7A	; 122
    222a:	55 e4       	ldi	r21, 0x45	; 69
    222c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	8e 8b       	std	Y+22, r24	; 0x16
    2236:	9f 8b       	std	Y+23, r25	; 0x17
    2238:	a8 8f       	std	Y+24, r26	; 0x18
    223a:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    223c:	6e 89       	ldd	r22, Y+22	; 0x16
    223e:	7f 89       	ldd	r23, Y+23	; 0x17
    2240:	88 8d       	ldd	r24, Y+24	; 0x18
    2242:	99 8d       	ldd	r25, Y+25	; 0x19
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	40 e8       	ldi	r20, 0x80	; 128
    224a:	5f e3       	ldi	r21, 0x3F	; 63
    224c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2250:	88 23       	and	r24, r24
    2252:	2c f4       	brge	.+10     	; 0x225e <LCD_Char+0x44c>
		__ticks = 1;
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	9d 8b       	std	Y+21, r25	; 0x15
    225a:	8c 8b       	std	Y+20, r24	; 0x14
    225c:	3f c0       	rjmp	.+126    	; 0x22dc <LCD_Char+0x4ca>
	else if (__tmp > 65535)
    225e:	6e 89       	ldd	r22, Y+22	; 0x16
    2260:	7f 89       	ldd	r23, Y+23	; 0x17
    2262:	88 8d       	ldd	r24, Y+24	; 0x18
    2264:	99 8d       	ldd	r25, Y+25	; 0x19
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	3f ef       	ldi	r19, 0xFF	; 255
    226a:	4f e7       	ldi	r20, 0x7F	; 127
    226c:	57 e4       	ldi	r21, 0x47	; 71
    226e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2272:	18 16       	cp	r1, r24
    2274:	4c f5       	brge	.+82     	; 0x22c8 <LCD_Char+0x4b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2276:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2278:	7b 8d       	ldd	r23, Y+27	; 0x1b
    227a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    227c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	40 e2       	ldi	r20, 0x20	; 32
    2284:	51 e4       	ldi	r21, 0x41	; 65
    2286:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	bc 01       	movw	r22, r24
    2290:	cd 01       	movw	r24, r26
    2292:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	9d 8b       	std	Y+21, r25	; 0x15
    229c:	8c 8b       	std	Y+20, r24	; 0x14
    229e:	0f c0       	rjmp	.+30     	; 0x22be <LCD_Char+0x4ac>
    22a0:	80 e9       	ldi	r24, 0x90	; 144
    22a2:	91 e0       	ldi	r25, 0x01	; 1
    22a4:	9b 8b       	std	Y+19, r25	; 0x13
    22a6:	8a 8b       	std	Y+18, r24	; 0x12
    22a8:	8a 89       	ldd	r24, Y+18	; 0x12
    22aa:	9b 89       	ldd	r25, Y+19	; 0x13
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	f1 f7       	brne	.-4      	; 0x22ac <LCD_Char+0x49a>
    22b0:	9b 8b       	std	Y+19, r25	; 0x13
    22b2:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b4:	8c 89       	ldd	r24, Y+20	; 0x14
    22b6:	9d 89       	ldd	r25, Y+21	; 0x15
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	9d 8b       	std	Y+21, r25	; 0x15
    22bc:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22be:	8c 89       	ldd	r24, Y+20	; 0x14
    22c0:	9d 89       	ldd	r25, Y+21	; 0x15
    22c2:	00 97       	sbiw	r24, 0x00	; 0
    22c4:	69 f7       	brne	.-38     	; 0x22a0 <LCD_Char+0x48e>
    22c6:	24 c0       	rjmp	.+72     	; 0x2310 <LCD_Char+0x4fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c8:	6e 89       	ldd	r22, Y+22	; 0x16
    22ca:	7f 89       	ldd	r23, Y+23	; 0x17
    22cc:	88 8d       	ldd	r24, Y+24	; 0x18
    22ce:	99 8d       	ldd	r25, Y+25	; 0x19
    22d0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	9d 8b       	std	Y+21, r25	; 0x15
    22da:	8c 8b       	std	Y+20, r24	; 0x14
    22dc:	8c 89       	ldd	r24, Y+20	; 0x14
    22de:	9d 89       	ldd	r25, Y+21	; 0x15
    22e0:	99 8b       	std	Y+17, r25	; 0x11
    22e2:	88 8b       	std	Y+16, r24	; 0x10
    22e4:	88 89       	ldd	r24, Y+16	; 0x10
    22e6:	99 89       	ldd	r25, Y+17	; 0x11
    22e8:	01 97       	sbiw	r24, 0x01	; 1
    22ea:	f1 f7       	brne	.-4      	; 0x22e8 <LCD_Char+0x4d6>
    22ec:	99 8b       	std	Y+17, r25	; 0x11
    22ee:	88 8b       	std	Y+16, r24	; 0x10
    22f0:	0f c0       	rjmp	.+30     	; 0x2310 <LCD_Char+0x4fe>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22f2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    22f4:	78 a1       	ldd	r23, Y+32	; 0x20
    22f6:	89 a1       	ldd	r24, Y+33	; 0x21
    22f8:	9a a1       	ldd	r25, Y+34	; 0x22
    22fa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	8e 8f       	std	Y+30, r24	; 0x1e
    2304:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2306:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2308:	8f 85       	ldd	r24, Y+15	; 0x0f
    230a:	8a 95       	dec	r24
    230c:	f1 f7       	brne	.-4      	; 0x230a <LCD_Char+0x4f8>
    230e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
    2310:	8b e0       	ldi	r24, 0x0B	; 11
    2312:	61 e0       	ldi	r22, 0x01	; 1
    2314:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_WriteChannel>
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	a0 e0       	ldi	r26, 0x00	; 0
    231e:	b0 e4       	ldi	r27, 0x40	; 64
    2320:	8b 87       	std	Y+11, r24	; 0x0b
    2322:	9c 87       	std	Y+12, r25	; 0x0c
    2324:	ad 87       	std	Y+13, r26	; 0x0d
    2326:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2328:	6b 85       	ldd	r22, Y+11	; 0x0b
    232a:	7c 85       	ldd	r23, Y+12	; 0x0c
    232c:	8d 85       	ldd	r24, Y+13	; 0x0d
    232e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	4a e7       	ldi	r20, 0x7A	; 122
    2336:	55 e4       	ldi	r21, 0x45	; 69
    2338:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	8f 83       	std	Y+7, r24	; 0x07
    2342:	98 87       	std	Y+8, r25	; 0x08
    2344:	a9 87       	std	Y+9, r26	; 0x09
    2346:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2348:	6f 81       	ldd	r22, Y+7	; 0x07
    234a:	78 85       	ldd	r23, Y+8	; 0x08
    234c:	89 85       	ldd	r24, Y+9	; 0x09
    234e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e8       	ldi	r20, 0x80	; 128
    2356:	5f e3       	ldi	r21, 0x3F	; 63
    2358:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    235c:	88 23       	and	r24, r24
    235e:	2c f4       	brge	.+10     	; 0x236a <LCD_Char+0x558>
		__ticks = 1;
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	9e 83       	std	Y+6, r25	; 0x06
    2366:	8d 83       	std	Y+5, r24	; 0x05
    2368:	3f c0       	rjmp	.+126    	; 0x23e8 <LCD_Char+0x5d6>
	else if (__tmp > 65535)
    236a:	6f 81       	ldd	r22, Y+7	; 0x07
    236c:	78 85       	ldd	r23, Y+8	; 0x08
    236e:	89 85       	ldd	r24, Y+9	; 0x09
    2370:	9a 85       	ldd	r25, Y+10	; 0x0a
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	3f ef       	ldi	r19, 0xFF	; 255
    2376:	4f e7       	ldi	r20, 0x7F	; 127
    2378:	57 e4       	ldi	r21, 0x47	; 71
    237a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    237e:	18 16       	cp	r1, r24
    2380:	4c f5       	brge	.+82     	; 0x23d4 <LCD_Char+0x5c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2382:	6b 85       	ldd	r22, Y+11	; 0x0b
    2384:	7c 85       	ldd	r23, Y+12	; 0x0c
    2386:	8d 85       	ldd	r24, Y+13	; 0x0d
    2388:	9e 85       	ldd	r25, Y+14	; 0x0e
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e2       	ldi	r20, 0x20	; 32
    2390:	51 e4       	ldi	r21, 0x41	; 65
    2392:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	bc 01       	movw	r22, r24
    239c:	cd 01       	movw	r24, r26
    239e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	9e 83       	std	Y+6, r25	; 0x06
    23a8:	8d 83       	std	Y+5, r24	; 0x05
    23aa:	0f c0       	rjmp	.+30     	; 0x23ca <LCD_Char+0x5b8>
    23ac:	80 e9       	ldi	r24, 0x90	; 144
    23ae:	91 e0       	ldi	r25, 0x01	; 1
    23b0:	9c 83       	std	Y+4, r25	; 0x04
    23b2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	9c 81       	ldd	r25, Y+4	; 0x04
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	f1 f7       	brne	.-4      	; 0x23b8 <LCD_Char+0x5a6>
    23bc:	9c 83       	std	Y+4, r25	; 0x04
    23be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c0:	8d 81       	ldd	r24, Y+5	; 0x05
    23c2:	9e 81       	ldd	r25, Y+6	; 0x06
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	9e 83       	std	Y+6, r25	; 0x06
    23c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ca:	8d 81       	ldd	r24, Y+5	; 0x05
    23cc:	9e 81       	ldd	r25, Y+6	; 0x06
    23ce:	00 97       	sbiw	r24, 0x00	; 0
    23d0:	69 f7       	brne	.-38     	; 0x23ac <LCD_Char+0x59a>
    23d2:	14 c0       	rjmp	.+40     	; 0x23fc <LCD_Char+0x5ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d4:	6f 81       	ldd	r22, Y+7	; 0x07
    23d6:	78 85       	ldd	r23, Y+8	; 0x08
    23d8:	89 85       	ldd	r24, Y+9	; 0x09
    23da:	9a 85       	ldd	r25, Y+10	; 0x0a
    23dc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	9e 83       	std	Y+6, r25	; 0x06
    23e6:	8d 83       	std	Y+5, r24	; 0x05
    23e8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ea:	9e 81       	ldd	r25, Y+6	; 0x06
    23ec:	9a 83       	std	Y+2, r25	; 0x02
    23ee:	89 83       	std	Y+1, r24	; 0x01
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
    23f2:	9a 81       	ldd	r25, Y+2	; 0x02
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <LCD_Char+0x5e2>
    23f8:	9a 83       	std	Y+2, r25	; 0x02
    23fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);	
}
    23fc:	c2 5b       	subi	r28, 0xB2	; 178
    23fe:	df 4f       	sbci	r29, 0xFF	; 255
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	cd bf       	out	0x3d, r28	; 61
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	1f 91       	pop	r17
    2410:	0f 91       	pop	r16
    2412:	08 95       	ret

00002414 <LCD_String>:

void LCD_String(int8 * string){
    2414:	df 93       	push	r29
    2416:	cf 93       	push	r28
    2418:	00 d0       	rcall	.+0      	; 0x241a <LCD_String+0x6>
    241a:	0f 92       	push	r0
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
    2420:	9b 83       	std	Y+3, r25	; 0x03
    2422:	8a 83       	std	Y+2, r24	; 0x02
	Uint8 i = 0;
    2424:	19 82       	std	Y+1, r1	; 0x01
    2426:	0e c0       	rjmp	.+28     	; 0x2444 <LCD_String+0x30>
	while(string[i] != '\0'){
		LCD_Char(string[i]);
    2428:	89 81       	ldd	r24, Y+1	; 0x01
    242a:	28 2f       	mov	r18, r24
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	8a 81       	ldd	r24, Y+2	; 0x02
    2430:	9b 81       	ldd	r25, Y+3	; 0x03
    2432:	fc 01       	movw	r30, r24
    2434:	e2 0f       	add	r30, r18
    2436:	f3 1f       	adc	r31, r19
    2438:	80 81       	ld	r24, Z
    243a:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_Char>
		i++;
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	8f 5f       	subi	r24, 0xFF	; 255
    2442:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);	
}

void LCD_String(int8 * string){
	Uint8 i = 0;
	while(string[i] != '\0'){
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	28 2f       	mov	r18, r24
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	8a 81       	ldd	r24, Y+2	; 0x02
    244c:	9b 81       	ldd	r25, Y+3	; 0x03
    244e:	fc 01       	movw	r30, r24
    2450:	e2 0f       	add	r30, r18
    2452:	f3 1f       	adc	r31, r19
    2454:	80 81       	ld	r24, Z
    2456:	88 23       	and	r24, r24
    2458:	39 f7       	brne	.-50     	; 0x2428 <LCD_String+0x14>
		LCD_Char(string[i]);
		i++;
	}
}
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	08 95       	ret

00002466 <LCD_SetPos>:

void LCD_SetPos(Uint8 line,Uint8 pos){
    2466:	df 93       	push	r29
    2468:	cf 93       	push	r28
    246a:	00 d0       	rcall	.+0      	; 0x246c <LCD_SetPos+0x6>
    246c:	00 d0       	rcall	.+0      	; 0x246e <LCD_SetPos+0x8>
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
    2472:	89 83       	std	Y+1, r24	; 0x01
    2474:	6a 83       	std	Y+2, r22	; 0x02
	switch(line){
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	28 2f       	mov	r18, r24
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	3c 83       	std	Y+4, r19	; 0x04
    247e:	2b 83       	std	Y+3, r18	; 0x03
    2480:	8b 81       	ldd	r24, Y+3	; 0x03
    2482:	9c 81       	ldd	r25, Y+4	; 0x04
    2484:	81 30       	cpi	r24, 0x01	; 1
    2486:	91 05       	cpc	r25, r1
    2488:	31 f0       	breq	.+12     	; 0x2496 <LCD_SetPos+0x30>
    248a:	2b 81       	ldd	r18, Y+3	; 0x03
    248c:	3c 81       	ldd	r19, Y+4	; 0x04
    248e:	22 30       	cpi	r18, 0x02	; 2
    2490:	31 05       	cpc	r19, r1
    2492:	39 f0       	breq	.+14     	; 0x24a2 <LCD_SetPos+0x3c>
    2494:	0b c0       	rjmp	.+22     	; 0x24ac <LCD_SetPos+0x46>
		case 1:
		LCD_Cmd(0x80 | (pos & 0x0F));
    2496:	8a 81       	ldd	r24, Y+2	; 0x02
    2498:	8f 70       	andi	r24, 0x0F	; 15
    249a:	80 68       	ori	r24, 0x80	; 128
    249c:	0e 94 08 0c 	call	0x1810	; 0x1810 <LCD_Cmd>
    24a0:	05 c0       	rjmp	.+10     	; 0x24ac <LCD_SetPos+0x46>
		break;
		case 2:
		LCD_Cmd(0xC0 | (pos & 0x0F));
    24a2:	8a 81       	ldd	r24, Y+2	; 0x02
    24a4:	8f 70       	andi	r24, 0x0F	; 15
    24a6:	80 6c       	ori	r24, 0xC0	; 192
    24a8:	0e 94 08 0c 	call	0x1810	; 0x1810 <LCD_Cmd>
		break;
	}
}
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	cf 91       	pop	r28
    24b6:	df 91       	pop	r29
    24b8:	08 95       	ret

000024ba <LCD_Custome_Char>:

void LCD_Custome_Char(Uint8 loc,int8 * msg){
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	00 d0       	rcall	.+0      	; 0x24c0 <LCD_Custome_Char+0x6>
    24c0:	00 d0       	rcall	.+0      	; 0x24c2 <LCD_Custome_Char+0x8>
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
    24c6:	8a 83       	std	Y+2, r24	; 0x02
    24c8:	7c 83       	std	Y+4, r23	; 0x04
    24ca:	6b 83       	std	Y+3, r22	; 0x03
	Uint8 i = 0;
    24cc:	19 82       	std	Y+1, r1	; 0x01
	if(loc < 8){
    24ce:	8a 81       	ldd	r24, Y+2	; 0x02
    24d0:	88 30       	cpi	r24, 0x08	; 8
    24d2:	f8 f4       	brcc	.+62     	; 0x2512 <LCD_Custome_Char+0x58>
		LCD_Cmd(0x40 + (loc*8));
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
    24d6:	88 2f       	mov	r24, r24
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	08 96       	adiw	r24, 0x08	; 8
    24dc:	88 0f       	add	r24, r24
    24de:	99 1f       	adc	r25, r25
    24e0:	88 0f       	add	r24, r24
    24e2:	99 1f       	adc	r25, r25
    24e4:	88 0f       	add	r24, r24
    24e6:	99 1f       	adc	r25, r25
    24e8:	0e 94 08 0c 	call	0x1810	; 0x1810 <LCD_Cmd>
		for(i=0;i<8;i++){
    24ec:	19 82       	std	Y+1, r1	; 0x01
    24ee:	0e c0       	rjmp	.+28     	; 0x250c <LCD_Custome_Char+0x52>
			LCD_Char(msg[i]);
    24f0:	89 81       	ldd	r24, Y+1	; 0x01
    24f2:	28 2f       	mov	r18, r24
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	9c 81       	ldd	r25, Y+4	; 0x04
    24fa:	fc 01       	movw	r30, r24
    24fc:	e2 0f       	add	r30, r18
    24fe:	f3 1f       	adc	r31, r19
    2500:	80 81       	ld	r24, Z
    2502:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_Char>

void LCD_Custome_Char(Uint8 loc,int8 * msg){
	Uint8 i = 0;
	if(loc < 8){
		LCD_Cmd(0x40 + (loc*8));
		for(i=0;i<8;i++){
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	8f 5f       	subi	r24, 0xFF	; 255
    250a:	89 83       	std	Y+1, r24	; 0x01
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	88 30       	cpi	r24, 0x08	; 8
    2510:	78 f3       	brcs	.-34     	; 0x24f0 <LCD_Custome_Char+0x36>
			LCD_Char(msg[i]);
		}
	}
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	08 95       	ret

00002520 <Ultrasonic_Read>:
D = 17150 * timerValue * Ttimer(0.5*10^-6) = 0.008575 * timerValue

*/
extern long OVF_Count;

double Ultrasonic_Read(void){
    2520:	ef 92       	push	r14
    2522:	ff 92       	push	r15
    2524:	0f 93       	push	r16
    2526:	1f 93       	push	r17
    2528:	df 93       	push	r29
    252a:	cf 93       	push	r28
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
    2530:	a0 97       	sbiw	r28, 0x20	; 32
    2532:	0f b6       	in	r0, 0x3f	; 63
    2534:	f8 94       	cli
    2536:	de bf       	out	0x3e, r29	; 62
    2538:	0f be       	out	0x3f, r0	; 63
    253a:	cd bf       	out	0x3d, r28	; 61
	sei();//enable globle interrupt
    253c:	78 94       	sei
	TCNT1 = 0;
    253e:	ec e4       	ldi	r30, 0x4C	; 76
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	11 82       	std	Z+1, r1	; 0x01
    2544:	10 82       	st	Z, r1
	OVF_Count = 0;
    2546:	10 92 bc 01 	sts	0x01BC, r1
    254a:	10 92 bd 01 	sts	0x01BD, r1
    254e:	10 92 be 01 	sts	0x01BE, r1
    2552:	10 92 bf 01 	sts	0x01BF, r1
	TCCR1A = 0;//normal mode
    2556:	ef e4       	ldi	r30, 0x4F	; 79
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	10 82       	st	Z, r1
	TCCR1B |= ((1<<ICES1)|(1<<CS11));//N = 8 & rising edge
    255c:	ae e4       	ldi	r26, 0x4E	; 78
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	ee e4       	ldi	r30, 0x4E	; 78
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	82 64       	ori	r24, 0x42	; 66
    2568:	8c 93       	st	X, r24
	TIMSK |= (1<<TOV1);//enable the overflow interrupt
    256a:	a9 e5       	ldi	r26, 0x59	; 89
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	e9 e5       	ldi	r30, 0x59	; 89
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	84 60       	ori	r24, 0x04	; 4
    2576:	8c 93       	st	X, r24
	TIFR |= (1<<TOV1);//clear the overflow flag
    2578:	a8 e5       	ldi	r26, 0x58	; 88
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	e8 e5       	ldi	r30, 0x58	; 88
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	80 81       	ld	r24, Z
    2582:	84 60       	ori	r24, 0x04	; 4
    2584:	8c 93       	st	X, r24
	TIFR |= (1<<ICF1);//clear the input capture flag
    2586:	a8 e5       	ldi	r26, 0x58	; 88
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	e8 e5       	ldi	r30, 0x58	; 88
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	80 62       	ori	r24, 0x20	; 32
    2592:	8c 93       	st	X, r24
	
	DIO_WriteChannel(DIO_ChannelA0,STD_High);
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	61 e0       	ldi	r22, 0x01	; 1
    2598:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_WriteChannel>
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	a0 e2       	ldi	r26, 0x20	; 32
    25a2:	b1 e4       	ldi	r27, 0x41	; 65
    25a4:	8d 8b       	std	Y+21, r24	; 0x15
    25a6:	9e 8b       	std	Y+22, r25	; 0x16
    25a8:	af 8b       	std	Y+23, r26	; 0x17
    25aa:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25ac:	6d 89       	ldd	r22, Y+21	; 0x15
    25ae:	7e 89       	ldd	r23, Y+22	; 0x16
    25b0:	8f 89       	ldd	r24, Y+23	; 0x17
    25b2:	98 8d       	ldd	r25, Y+24	; 0x18
    25b4:	2b ea       	ldi	r18, 0xAB	; 171
    25b6:	3a ea       	ldi	r19, 0xAA	; 170
    25b8:	4a ea       	ldi	r20, 0xAA	; 170
    25ba:	50 e4       	ldi	r21, 0x40	; 64
    25bc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	89 8b       	std	Y+17, r24	; 0x11
    25c6:	9a 8b       	std	Y+18, r25	; 0x12
    25c8:	ab 8b       	std	Y+19, r26	; 0x13
    25ca:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    25cc:	69 89       	ldd	r22, Y+17	; 0x11
    25ce:	7a 89       	ldd	r23, Y+18	; 0x12
    25d0:	8b 89       	ldd	r24, Y+19	; 0x13
    25d2:	9c 89       	ldd	r25, Y+20	; 0x14
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e8       	ldi	r20, 0x80	; 128
    25da:	5f e3       	ldi	r21, 0x3F	; 63
    25dc:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    25e0:	88 23       	and	r24, r24
    25e2:	1c f4       	brge	.+6      	; 0x25ea <Ultrasonic_Read+0xca>
		__ticks = 1;
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	88 8b       	std	Y+16, r24	; 0x10
    25e8:	91 c0       	rjmp	.+290    	; 0x270c <Ultrasonic_Read+0x1ec>
	else if (__tmp > 255)
    25ea:	69 89       	ldd	r22, Y+17	; 0x11
    25ec:	7a 89       	ldd	r23, Y+18	; 0x12
    25ee:	8b 89       	ldd	r24, Y+19	; 0x13
    25f0:	9c 89       	ldd	r25, Y+20	; 0x14
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	4f e7       	ldi	r20, 0x7F	; 127
    25f8:	53 e4       	ldi	r21, 0x43	; 67
    25fa:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    25fe:	18 16       	cp	r1, r24
    2600:	0c f0       	brlt	.+2      	; 0x2604 <Ultrasonic_Read+0xe4>
    2602:	7b c0       	rjmp	.+246    	; 0x26fa <Ultrasonic_Read+0x1da>
	{
		_delay_ms(__us / 1000.0);
    2604:	6d 89       	ldd	r22, Y+21	; 0x15
    2606:	7e 89       	ldd	r23, Y+22	; 0x16
    2608:	8f 89       	ldd	r24, Y+23	; 0x17
    260a:	98 8d       	ldd	r25, Y+24	; 0x18
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	4a e7       	ldi	r20, 0x7A	; 122
    2612:	54 e4       	ldi	r21, 0x44	; 68
    2614:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	8c 87       	std	Y+12, r24	; 0x0c
    261e:	9d 87       	std	Y+13, r25	; 0x0d
    2620:	ae 87       	std	Y+14, r26	; 0x0e
    2622:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2624:	6c 85       	ldd	r22, Y+12	; 0x0c
    2626:	7d 85       	ldd	r23, Y+13	; 0x0d
    2628:	8e 85       	ldd	r24, Y+14	; 0x0e
    262a:	9f 85       	ldd	r25, Y+15	; 0x0f
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	4a e7       	ldi	r20, 0x7A	; 122
    2632:	55 e4       	ldi	r21, 0x45	; 69
    2634:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	88 87       	std	Y+8, r24	; 0x08
    263e:	99 87       	std	Y+9, r25	; 0x09
    2640:	aa 87       	std	Y+10, r26	; 0x0a
    2642:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2644:	68 85       	ldd	r22, Y+8	; 0x08
    2646:	79 85       	ldd	r23, Y+9	; 0x09
    2648:	8a 85       	ldd	r24, Y+10	; 0x0a
    264a:	9b 85       	ldd	r25, Y+11	; 0x0b
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	40 e8       	ldi	r20, 0x80	; 128
    2652:	5f e3       	ldi	r21, 0x3F	; 63
    2654:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2658:	88 23       	and	r24, r24
    265a:	2c f4       	brge	.+10     	; 0x2666 <Ultrasonic_Read+0x146>
		__ticks = 1;
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	9f 83       	std	Y+7, r25	; 0x07
    2662:	8e 83       	std	Y+6, r24	; 0x06
    2664:	3f c0       	rjmp	.+126    	; 0x26e4 <Ultrasonic_Read+0x1c4>
	else if (__tmp > 65535)
    2666:	68 85       	ldd	r22, Y+8	; 0x08
    2668:	79 85       	ldd	r23, Y+9	; 0x09
    266a:	8a 85       	ldd	r24, Y+10	; 0x0a
    266c:	9b 85       	ldd	r25, Y+11	; 0x0b
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	3f ef       	ldi	r19, 0xFF	; 255
    2672:	4f e7       	ldi	r20, 0x7F	; 127
    2674:	57 e4       	ldi	r21, 0x47	; 71
    2676:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    267a:	18 16       	cp	r1, r24
    267c:	4c f5       	brge	.+82     	; 0x26d0 <Ultrasonic_Read+0x1b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2680:	7d 85       	ldd	r23, Y+13	; 0x0d
    2682:	8e 85       	ldd	r24, Y+14	; 0x0e
    2684:	9f 85       	ldd	r25, Y+15	; 0x0f
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	40 e2       	ldi	r20, 0x20	; 32
    268c:	51 e4       	ldi	r21, 0x41	; 65
    268e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	bc 01       	movw	r22, r24
    2698:	cd 01       	movw	r24, r26
    269a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	9f 83       	std	Y+7, r25	; 0x07
    26a4:	8e 83       	std	Y+6, r24	; 0x06
    26a6:	0f c0       	rjmp	.+30     	; 0x26c6 <Ultrasonic_Read+0x1a6>
    26a8:	80 e9       	ldi	r24, 0x90	; 144
    26aa:	91 e0       	ldi	r25, 0x01	; 1
    26ac:	9d 83       	std	Y+5, r25	; 0x05
    26ae:	8c 83       	std	Y+4, r24	; 0x04
    26b0:	8c 81       	ldd	r24, Y+4	; 0x04
    26b2:	9d 81       	ldd	r25, Y+5	; 0x05
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	f1 f7       	brne	.-4      	; 0x26b4 <Ultrasonic_Read+0x194>
    26b8:	9d 83       	std	Y+5, r25	; 0x05
    26ba:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26bc:	8e 81       	ldd	r24, Y+6	; 0x06
    26be:	9f 81       	ldd	r25, Y+7	; 0x07
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	9f 83       	std	Y+7, r25	; 0x07
    26c4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c6:	8e 81       	ldd	r24, Y+6	; 0x06
    26c8:	9f 81       	ldd	r25, Y+7	; 0x07
    26ca:	00 97       	sbiw	r24, 0x00	; 0
    26cc:	69 f7       	brne	.-38     	; 0x26a8 <Ultrasonic_Read+0x188>
    26ce:	24 c0       	rjmp	.+72     	; 0x2718 <Ultrasonic_Read+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d0:	68 85       	ldd	r22, Y+8	; 0x08
    26d2:	79 85       	ldd	r23, Y+9	; 0x09
    26d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    26d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    26d8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	9f 83       	std	Y+7, r25	; 0x07
    26e2:	8e 83       	std	Y+6, r24	; 0x06
    26e4:	8e 81       	ldd	r24, Y+6	; 0x06
    26e6:	9f 81       	ldd	r25, Y+7	; 0x07
    26e8:	9b 83       	std	Y+3, r25	; 0x03
    26ea:	8a 83       	std	Y+2, r24	; 0x02
    26ec:	8a 81       	ldd	r24, Y+2	; 0x02
    26ee:	9b 81       	ldd	r25, Y+3	; 0x03
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <Ultrasonic_Read+0x1d0>
    26f4:	9b 83       	std	Y+3, r25	; 0x03
    26f6:	8a 83       	std	Y+2, r24	; 0x02
    26f8:	0f c0       	rjmp	.+30     	; 0x2718 <Ultrasonic_Read+0x1f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26fa:	69 89       	ldd	r22, Y+17	; 0x11
    26fc:	7a 89       	ldd	r23, Y+18	; 0x12
    26fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2700:	9c 89       	ldd	r25, Y+20	; 0x14
    2702:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	88 8b       	std	Y+16, r24	; 0x10
    270c:	88 89       	ldd	r24, Y+16	; 0x10
    270e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	8a 95       	dec	r24
    2714:	f1 f7       	brne	.-4      	; 0x2712 <Ultrasonic_Read+0x1f2>
    2716:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_WriteChannel(DIO_ChannelA0,STD_Low);
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	60 e0       	ldi	r22, 0x00	; 0
    271c:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_WriteChannel>
	
	while ((TIFR & (1<<ICF1)) == 0);//waiting rising edge
    2720:	e8 e5       	ldi	r30, 0x58	; 88
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	88 2f       	mov	r24, r24
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	80 72       	andi	r24, 0x20	; 32
    272c:	90 70       	andi	r25, 0x00	; 0
    272e:	00 97       	sbiw	r24, 0x00	; 0
    2730:	b9 f3       	breq	.-18     	; 0x2720 <Ultrasonic_Read+0x200>
	TCNT1 = 0;
    2732:	ec e4       	ldi	r30, 0x4C	; 76
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	11 82       	std	Z+1, r1	; 0x01
    2738:	10 82       	st	Z, r1
	OVF_Count = 0;
    273a:	10 92 bc 01 	sts	0x01BC, r1
    273e:	10 92 bd 01 	sts	0x01BD, r1
    2742:	10 92 be 01 	sts	0x01BE, r1
    2746:	10 92 bf 01 	sts	0x01BF, r1
	TCCR1B &=~ (1<<ICES1);//falling edge
    274a:	ae e4       	ldi	r26, 0x4E	; 78
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	ee e4       	ldi	r30, 0x4E	; 78
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	8f 7b       	andi	r24, 0xBF	; 191
    2756:	8c 93       	st	X, r24
	TIFR |= (1<<TOV1);//clear the flag
    2758:	a8 e5       	ldi	r26, 0x58	; 88
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	e8 e5       	ldi	r30, 0x58	; 88
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	84 60       	ori	r24, 0x04	; 4
    2764:	8c 93       	st	X, r24
	TIFR |= (1<<ICF1);//clear the flag
    2766:	a8 e5       	ldi	r26, 0x58	; 88
    2768:	b0 e0       	ldi	r27, 0x00	; 0
    276a:	e8 e5       	ldi	r30, 0x58	; 88
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	80 81       	ld	r24, Z
    2770:	80 62       	ori	r24, 0x20	; 32
    2772:	8c 93       	st	X, r24
	
	while ((TIFR & (1<<ICF1)) == 0);//waiting falling edge
    2774:	e8 e5       	ldi	r30, 0x58	; 88
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	80 81       	ld	r24, Z
    277a:	88 2f       	mov	r24, r24
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	80 72       	andi	r24, 0x20	; 32
    2780:	90 70       	andi	r25, 0x00	; 0
    2782:	00 97       	sbiw	r24, 0x00	; 0
    2784:	b9 f3       	breq	.-18     	; 0x2774 <Ultrasonic_Read+0x254>
	long count = ICR1 + (65535*OVF_Count);
    2786:	e6 e4       	ldi	r30, 0x46	; 70
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	91 81       	ldd	r25, Z+1	; 0x01
    278e:	7c 01       	movw	r14, r24
    2790:	00 e0       	ldi	r16, 0x00	; 0
    2792:	10 e0       	ldi	r17, 0x00	; 0
    2794:	80 91 bc 01 	lds	r24, 0x01BC
    2798:	90 91 bd 01 	lds	r25, 0x01BD
    279c:	a0 91 be 01 	lds	r26, 0x01BE
    27a0:	b0 91 bf 01 	lds	r27, 0x01BF
    27a4:	2f ef       	ldi	r18, 0xFF	; 255
    27a6:	3f ef       	ldi	r19, 0xFF	; 255
    27a8:	40 e0       	ldi	r20, 0x00	; 0
    27aa:	50 e0       	ldi	r21, 0x00	; 0
    27ac:	bc 01       	movw	r22, r24
    27ae:	cd 01       	movw	r24, r26
    27b0:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <__mulsi3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	8e 0d       	add	r24, r14
    27ba:	9f 1d       	adc	r25, r15
    27bc:	a0 1f       	adc	r26, r16
    27be:	b1 1f       	adc	r27, r17
    27c0:	8d 8f       	std	Y+29, r24	; 0x1d
    27c2:	9e 8f       	std	Y+30, r25	; 0x1e
    27c4:	af 8f       	std	Y+31, r26	; 0x1f
    27c6:	b8 a3       	std	Y+32, r27	; 0x20
	double distance = (double)count * 0.008575;
    27c8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    27ca:	7e 8d       	ldd	r23, Y+30	; 0x1e
    27cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27ce:	98 a1       	ldd	r25, Y+32	; 0x20
    27d0:	0e 94 02 05 	call	0xa04	; 0xa04 <__floatsisf>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	bc 01       	movw	r22, r24
    27da:	cd 01       	movw	r24, r26
    27dc:	28 e2       	ldi	r18, 0x28	; 40
    27de:	3e e7       	ldi	r19, 0x7E	; 126
    27e0:	4c e0       	ldi	r20, 0x0C	; 12
    27e2:	5c e3       	ldi	r21, 0x3C	; 60
    27e4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	89 8f       	std	Y+25, r24	; 0x19
    27ee:	9a 8f       	std	Y+26, r25	; 0x1a
    27f0:	ab 8f       	std	Y+27, r26	; 0x1b
    27f2:	bc 8f       	std	Y+28, r27	; 0x1c
	return distance;
    27f4:	89 8d       	ldd	r24, Y+25	; 0x19
    27f6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    27f8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    27fa:	bc 8d       	ldd	r27, Y+28	; 0x1c
    27fc:	bc 01       	movw	r22, r24
    27fe:	cd 01       	movw	r24, r26
    2800:	a0 96       	adiw	r28, 0x20	; 32
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	cd bf       	out	0x3d, r28	; 61
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	1f 91       	pop	r17
    2812:	0f 91       	pop	r16
    2814:	ff 90       	pop	r15
    2816:	ef 90       	pop	r14
    2818:	08 95       	ret

0000281a <main>:
void MoveForward();
void MoveBackward();
void MoveLeft();
void MoveRight();

int main(void) {
    281a:	0f 93       	push	r16
    281c:	1f 93       	push	r17
    281e:	df 93       	push	r29
    2820:	cf 93       	push	r28
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
    2826:	e3 97       	sbiw	r28, 0x33	; 51
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
	DIO_Init();
    2832:	0e 94 99 09 	call	0x1332	; 0x1332 <DIO_Init>
	LCD_Init();
    2836:	0e 94 ab 0a 	call	0x1556	; 0x1556 <LCD_Init>

	//ULTRASONIC
	double distance = 0;
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	a0 e0       	ldi	r26, 0x00	; 0
    2840:	b0 e0       	ldi	r27, 0x00	; 0
    2842:	8b 83       	std	Y+3, r24	; 0x03
    2844:	9c 83       	std	Y+4, r25	; 0x04
    2846:	ad 83       	std	Y+5, r26	; 0x05
    2848:	be 83       	std	Y+6, r27	; 0x06
	char string[30];

	//SERVO
	DDRD |= (1 << 7);
    284a:	a1 e3       	ldi	r26, 0x31	; 49
    284c:	b0 e0       	ldi	r27, 0x00	; 0
    284e:	e1 e3       	ldi	r30, 0x31	; 49
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	80 81       	ld	r24, Z
    2854:	80 68       	ori	r24, 0x80	; 128
    2856:	8c 93       	st	X, r24
	TCCR2 = (1 << WGM20) | (1 << WGM21) | (1 << COM21) | (1 << CS22);
    2858:	e5 e4       	ldi	r30, 0x45	; 69
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	8c e6       	ldi	r24, 0x6C	; 108
    285e:	80 83       	st	Z, r24
	OCR2 = 255;
    2860:	e3 e4       	ldi	r30, 0x43	; 67
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	8f ef       	ldi	r24, 0xFF	; 255
    2866:	80 83       	st	Z, r24
	int current_angle = 0;
    2868:	1a 82       	std	Y+2, r1	; 0x02
    286a:	19 82       	std	Y+1, r1	; 0x01
	int angles[4] = { 0, 45, 90, 180 };
    286c:	ce 01       	movw	r24, r28
    286e:	85 96       	adiw	r24, 0x25	; 37
    2870:	98 ab       	std	Y+48, r25	; 0x30
    2872:	8f a7       	std	Y+47, r24	; 0x2f
    2874:	e4 eb       	ldi	r30, 0xB4	; 180
    2876:	f1 e0       	ldi	r31, 0x01	; 1
    2878:	fa ab       	std	Y+50, r31	; 0x32
    287a:	e9 ab       	std	Y+49, r30	; 0x31
    287c:	f8 e0       	ldi	r31, 0x08	; 8
    287e:	fb ab       	std	Y+51, r31	; 0x33
    2880:	e9 a9       	ldd	r30, Y+49	; 0x31
    2882:	fa a9       	ldd	r31, Y+50	; 0x32
    2884:	00 80       	ld	r0, Z
    2886:	89 a9       	ldd	r24, Y+49	; 0x31
    2888:	9a a9       	ldd	r25, Y+50	; 0x32
    288a:	01 96       	adiw	r24, 0x01	; 1
    288c:	9a ab       	std	Y+50, r25	; 0x32
    288e:	89 ab       	std	Y+49, r24	; 0x31
    2890:	ef a5       	ldd	r30, Y+47	; 0x2f
    2892:	f8 a9       	ldd	r31, Y+48	; 0x30
    2894:	00 82       	st	Z, r0
    2896:	8f a5       	ldd	r24, Y+47	; 0x2f
    2898:	98 a9       	ldd	r25, Y+48	; 0x30
    289a:	01 96       	adiw	r24, 0x01	; 1
    289c:	98 ab       	std	Y+48, r25	; 0x30
    289e:	8f a7       	std	Y+47, r24	; 0x2f
    28a0:	9b a9       	ldd	r25, Y+51	; 0x33
    28a2:	91 50       	subi	r25, 0x01	; 1
    28a4:	9b ab       	std	Y+51, r25	; 0x33
    28a6:	eb a9       	ldd	r30, Y+51	; 0x33
    28a8:	ee 23       	and	r30, r30
    28aa:	51 f7       	brne	.-44     	; 0x2880 <main+0x66>

	//DC MOTOR
	DDRD |= (1 << 5); //OCR1
    28ac:	a1 e3       	ldi	r26, 0x31	; 49
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	e1 e3       	ldi	r30, 0x31	; 49
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	80 62       	ori	r24, 0x20	; 32
    28b8:	8c 93       	st	X, r24
	DDRC |= (1 << 5) | (1 << 6); //Motor1
    28ba:	a4 e3       	ldi	r26, 0x34	; 52
    28bc:	b0 e0       	ldi	r27, 0x00	; 0
    28be:	e4 e3       	ldi	r30, 0x34	; 52
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	80 81       	ld	r24, Z
    28c4:	80 66       	ori	r24, 0x60	; 96
    28c6:	8c 93       	st	X, r24
	DDRC |= (1 << 3) | (1 << 4); //Motor2
    28c8:	a4 e3       	ldi	r26, 0x34	; 52
    28ca:	b0 e0       	ldi	r27, 0x00	; 0
    28cc:	e4 e3       	ldi	r30, 0x34	; 52
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	80 81       	ld	r24, Z
    28d2:	88 61       	ori	r24, 0x18	; 24
    28d4:	8c 93       	st	X, r24
	TCCR1A = (1 << WGM11) | (1 << COM1A1); // MODE 14 FAST PWM, non inverting
    28d6:	ef e4       	ldi	r30, 0x4F	; 79
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	82 e8       	ldi	r24, 0x82	; 130
    28dc:	80 83       	st	Z, r24
	TCCR1B = (1 << WGM12) | (1 << WGM13);
    28de:	ee e4       	ldi	r30, 0x4E	; 78
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	88 e1       	ldi	r24, 0x18	; 24
    28e4:	80 83       	st	Z, r24
	OCR1A = 1000;
    28e6:	ea e4       	ldi	r30, 0x4A	; 74
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	88 ee       	ldi	r24, 0xE8	; 232
    28ec:	93 e0       	ldi	r25, 0x03	; 3
    28ee:	91 83       	std	Z+1, r25	; 0x01
    28f0:	80 83       	st	Z, r24
	ICR1 = 65535;
    28f2:	e6 e4       	ldi	r30, 0x46	; 70
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	8f ef       	ldi	r24, 0xFF	; 255
    28f8:	9f ef       	ldi	r25, 0xFF	; 255
    28fa:	91 83       	std	Z+1, r25	; 0x01
    28fc:	80 83       	st	Z, r24

	while (1) {
		Servo(angles[current_angle]);
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	9a 81       	ldd	r25, Y+2	; 0x02
    2902:	9c 01       	movw	r18, r24
    2904:	22 0f       	add	r18, r18
    2906:	33 1f       	adc	r19, r19
    2908:	ce 01       	movw	r24, r28
    290a:	01 96       	adiw	r24, 0x01	; 1
    290c:	82 0f       	add	r24, r18
    290e:	93 1f       	adc	r25, r19
    2910:	fc 01       	movw	r30, r24
    2912:	b4 96       	adiw	r30, 0x24	; 36
    2914:	80 81       	ld	r24, Z
    2916:	91 81       	ldd	r25, Z+1	; 0x01
    2918:	aa 27       	eor	r26, r26
    291a:	97 fd       	sbrc	r25, 7
    291c:	a0 95       	com	r26
    291e:	ba 2f       	mov	r27, r26
    2920:	bc 01       	movw	r22, r24
    2922:	cd 01       	movw	r24, r26
    2924:	0e 94 18 15 	call	0x2a30	; 0x2a30 <Servo>
		if (current_angle == 3) {
    2928:	89 81       	ldd	r24, Y+1	; 0x01
    292a:	9a 81       	ldd	r25, Y+2	; 0x02
    292c:	83 30       	cpi	r24, 0x03	; 3
    292e:	91 05       	cpc	r25, r1
    2930:	21 f4       	brne	.+8      	; 0x293a <main+0x120>
			current_angle = -1;
    2932:	8f ef       	ldi	r24, 0xFF	; 255
    2934:	9f ef       	ldi	r25, 0xFF	; 255
    2936:	9a 83       	std	Y+2, r25	; 0x02
    2938:	89 83       	std	Y+1, r24	; 0x01
		}
		current_angle++;
    293a:	89 81       	ldd	r24, Y+1	; 0x01
    293c:	9a 81       	ldd	r25, Y+2	; 0x02
    293e:	01 96       	adiw	r24, 0x01	; 1
    2940:	9a 83       	std	Y+2, r25	; 0x02
    2942:	89 83       	std	Y+1, r24	; 0x01

		distance = Ultrasonic_Read();
    2944:	0e 94 90 12 	call	0x2520	; 0x2520 <Ultrasonic_Read>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	8b 83       	std	Y+3, r24	; 0x03
    294e:	9c 83       	std	Y+4, r25	; 0x04
    2950:	ad 83       	std	Y+5, r26	; 0x05
    2952:	be 83       	std	Y+6, r27	; 0x06
		dtostrf(distance, 2, 2, string); //convert from double to string
    2954:	8b 81       	ldd	r24, Y+3	; 0x03
    2956:	9c 81       	ldd	r25, Y+4	; 0x04
    2958:	ad 81       	ldd	r26, Y+5	; 0x05
    295a:	be 81       	ldd	r27, Y+6	; 0x06
    295c:	fe 01       	movw	r30, r28
    295e:	37 96       	adiw	r30, 0x07	; 7
    2960:	bc 01       	movw	r22, r24
    2962:	cd 01       	movw	r24, r26
    2964:	42 e0       	ldi	r20, 0x02	; 2
    2966:	22 e0       	ldi	r18, 0x02	; 2
    2968:	8f 01       	movw	r16, r30
    296a:	0e 94 61 18 	call	0x30c2	; 0x30c2 <dtostrf>
		LCD_Cmd(0x01); //clear LCD
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	0e 94 08 0c 	call	0x1810	; 0x1810 <LCD_Cmd>
		LCD_String("Distance = ");
    2974:	80 e6       	ldi	r24, 0x60	; 96
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	0e 94 0a 12 	call	0x2414	; 0x2414 <LCD_String>
		LCD_String(string);
    297c:	ce 01       	movw	r24, r28
    297e:	07 96       	adiw	r24, 0x07	; 7
    2980:	0e 94 0a 12 	call	0x2414	; 0x2414 <LCD_String>

		if (distance <= 20) {
    2984:	6b 81       	ldd	r22, Y+3	; 0x03
    2986:	7c 81       	ldd	r23, Y+4	; 0x04
    2988:	8d 81       	ldd	r24, Y+5	; 0x05
    298a:	9e 81       	ldd	r25, Y+6	; 0x06
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	40 ea       	ldi	r20, 0xA0	; 160
    2992:	51 e4       	ldi	r21, 0x41	; 65
    2994:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__lesf2>
    2998:	18 16       	cp	r1, r24
    299a:	0c f4       	brge	.+2      	; 0x299e <main+0x184>
    299c:	b0 cf       	rjmp	.-160    	; 0x28fe <main+0xe4>
			if ((current_angle == 0) | (current_angle == 45)) {
    299e:	1e a6       	std	Y+46, r1	; 0x2e
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	9a 81       	ldd	r25, Y+2	; 0x02
    29a4:	00 97       	sbiw	r24, 0x00	; 0
    29a6:	11 f4       	brne	.+4      	; 0x29ac <main+0x192>
    29a8:	f1 e0       	ldi	r31, 0x01	; 1
    29aa:	fe a7       	std	Y+46, r31	; 0x2e
    29ac:	1d a6       	std	Y+45, r1	; 0x2d
    29ae:	89 81       	ldd	r24, Y+1	; 0x01
    29b0:	9a 81       	ldd	r25, Y+2	; 0x02
    29b2:	8d 32       	cpi	r24, 0x2D	; 45
    29b4:	91 05       	cpc	r25, r1
    29b6:	11 f4       	brne	.+4      	; 0x29bc <main+0x1a2>
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	8d a7       	std	Y+45, r24	; 0x2d
    29bc:	8e a5       	ldd	r24, Y+46	; 0x2e
    29be:	9d a5       	ldd	r25, Y+45	; 0x2d
    29c0:	89 2b       	or	r24, r25
    29c2:	88 23       	and	r24, r24
    29c4:	29 f0       	breq	.+10     	; 0x29d0 <main+0x1b6>
				MoveBackward();
    29c6:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <MoveBackward>
				MoveLeft();
    29ca:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <MoveLeft>
    29ce:	97 cf       	rjmp	.-210    	; 0x28fe <main+0xe4>
			} else {
				MoveBackward();
    29d0:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <MoveBackward>
				MoveRight();
    29d4:	0e 94 34 17 	call	0x2e68	; 0x2e68 <MoveRight>
    29d8:	92 cf       	rjmp	.-220    	; 0x28fe <main+0xe4>

000029da <__vector_9>:

		}
	}
}

ISR(TIMER1_OVF_vect) {
    29da:	1f 92       	push	r1
    29dc:	0f 92       	push	r0
    29de:	0f b6       	in	r0, 0x3f	; 63
    29e0:	0f 92       	push	r0
    29e2:	11 24       	eor	r1, r1
    29e4:	8f 93       	push	r24
    29e6:	9f 93       	push	r25
    29e8:	af 93       	push	r26
    29ea:	bf 93       	push	r27
    29ec:	df 93       	push	r29
    29ee:	cf 93       	push	r28
    29f0:	cd b7       	in	r28, 0x3d	; 61
    29f2:	de b7       	in	r29, 0x3e	; 62
	OVF_Count++;
    29f4:	80 91 bc 01 	lds	r24, 0x01BC
    29f8:	90 91 bd 01 	lds	r25, 0x01BD
    29fc:	a0 91 be 01 	lds	r26, 0x01BE
    2a00:	b0 91 bf 01 	lds	r27, 0x01BF
    2a04:	01 96       	adiw	r24, 0x01	; 1
    2a06:	a1 1d       	adc	r26, r1
    2a08:	b1 1d       	adc	r27, r1
    2a0a:	80 93 bc 01 	sts	0x01BC, r24
    2a0e:	90 93 bd 01 	sts	0x01BD, r25
    2a12:	a0 93 be 01 	sts	0x01BE, r26
    2a16:	b0 93 bf 01 	sts	0x01BF, r27
}
    2a1a:	cf 91       	pop	r28
    2a1c:	df 91       	pop	r29
    2a1e:	bf 91       	pop	r27
    2a20:	af 91       	pop	r26
    2a22:	9f 91       	pop	r25
    2a24:	8f 91       	pop	r24
    2a26:	0f 90       	pop	r0
    2a28:	0f be       	out	0x3f, r0	; 63
    2a2a:	0f 90       	pop	r0
    2a2c:	1f 90       	pop	r1
    2a2e:	18 95       	reti

00002a30 <Servo>:
void Servo(long angle) {
    2a30:	0f 93       	push	r16
    2a32:	1f 93       	push	r17
    2a34:	df 93       	push	r29
    2a36:	cf 93       	push	r28
    2a38:	00 d0       	rcall	.+0      	; 0x2a3a <Servo+0xa>
    2a3a:	00 d0       	rcall	.+0      	; 0x2a3c <Servo+0xc>
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
    2a40:	69 83       	std	Y+1, r22	; 0x01
    2a42:	7a 83       	std	Y+2, r23	; 0x02
    2a44:	8b 83       	std	Y+3, r24	; 0x03
    2a46:	9c 83       	std	Y+4, r25	; 0x04
	OCR2 =
    2a48:	03 e4       	ldi	r16, 0x43	; 67
    2a4a:	10 e0       	ldi	r17, 0x00	; 0
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a50:	ab 81       	ldd	r26, Y+3	; 0x03
    2a52:	bc 81       	ldd	r27, Y+4	; 0x04
    2a54:	2a ef       	ldi	r18, 0xFA	; 250
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	40 e0       	ldi	r20, 0x00	; 0
    2a5a:	50 e0       	ldi	r21, 0x00	; 0
    2a5c:	bc 01       	movw	r22, r24
    2a5e:	cd 01       	movw	r24, r26
    2a60:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <__mulsi3>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	24 eb       	ldi	r18, 0xB4	; 180
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	40 e0       	ldi	r20, 0x00	; 0
    2a6e:	50 e0       	ldi	r21, 0x00	; 0
    2a70:	bc 01       	movw	r22, r24
    2a72:	cd 01       	movw	r24, r26
    2a74:	0e 94 ed 17 	call	0x2fda	; 0x2fda <__divmodsi4>
    2a78:	da 01       	movw	r26, r20
    2a7a:	c9 01       	movw	r24, r18
    2a7c:	87 50       	subi	r24, 0x07	; 7
    2a7e:	f8 01       	movw	r30, r16
    2a80:	80 83       	st	Z, r24
			(((angle - MinAngle) * (MaxCount - MinCount))
					/ (MaxAngle - MinAngle)) + MinCount - 1;
}
    2a82:	0f 90       	pop	r0
    2a84:	0f 90       	pop	r0
    2a86:	0f 90       	pop	r0
    2a88:	0f 90       	pop	r0
    2a8a:	cf 91       	pop	r28
    2a8c:	df 91       	pop	r29
    2a8e:	1f 91       	pop	r17
    2a90:	0f 91       	pop	r16
    2a92:	08 95       	ret

00002a94 <MoveForward>:
void MoveForward() {
    2a94:	df 93       	push	r29
    2a96:	cf 93       	push	r28
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
    2a9c:	2e 97       	sbiw	r28, 0x0e	; 14
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
	PORTC |= (1 << 5); //L
    2aa8:	a5 e3       	ldi	r26, 0x35	; 53
    2aaa:	b0 e0       	ldi	r27, 0x00	; 0
    2aac:	e5 e3       	ldi	r30, 0x35	; 53
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	80 81       	ld	r24, Z
    2ab2:	80 62       	ori	r24, 0x20	; 32
    2ab4:	8c 93       	st	X, r24
	PORTC &= ~(1 << 6);
    2ab6:	a5 e3       	ldi	r26, 0x35	; 53
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	e5 e3       	ldi	r30, 0x35	; 53
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	80 81       	ld	r24, Z
    2ac0:	8f 7b       	andi	r24, 0xBF	; 191
    2ac2:	8c 93       	st	X, r24
	PORTC |= (1 << 3); //L
    2ac4:	a5 e3       	ldi	r26, 0x35	; 53
    2ac6:	b0 e0       	ldi	r27, 0x00	; 0
    2ac8:	e5 e3       	ldi	r30, 0x35	; 53
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	80 81       	ld	r24, Z
    2ace:	88 60       	ori	r24, 0x08	; 8
    2ad0:	8c 93       	st	X, r24
	PORTC &= ~(1 << 4);
    2ad2:	a5 e3       	ldi	r26, 0x35	; 53
    2ad4:	b0 e0       	ldi	r27, 0x00	; 0
    2ad6:	e5 e3       	ldi	r30, 0x35	; 53
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	80 81       	ld	r24, Z
    2adc:	8f 7e       	andi	r24, 0xEF	; 239
    2ade:	8c 93       	st	X, r24
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	aa ef       	ldi	r26, 0xFA	; 250
    2ae6:	b3 e4       	ldi	r27, 0x43	; 67
    2ae8:	8b 87       	std	Y+11, r24	; 0x0b
    2aea:	9c 87       	std	Y+12, r25	; 0x0c
    2aec:	ad 87       	std	Y+13, r26	; 0x0d
    2aee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2af2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2af4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2af6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	4a e7       	ldi	r20, 0x7A	; 122
    2afe:	55 e4       	ldi	r21, 0x45	; 69
    2b00:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	8f 83       	std	Y+7, r24	; 0x07
    2b0a:	98 87       	std	Y+8, r25	; 0x08
    2b0c:	a9 87       	std	Y+9, r26	; 0x09
    2b0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b10:	6f 81       	ldd	r22, Y+7	; 0x07
    2b12:	78 85       	ldd	r23, Y+8	; 0x08
    2b14:	89 85       	ldd	r24, Y+9	; 0x09
    2b16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	40 e8       	ldi	r20, 0x80	; 128
    2b1e:	5f e3       	ldi	r21, 0x3F	; 63
    2b20:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2b24:	88 23       	and	r24, r24
    2b26:	2c f4       	brge	.+10     	; 0x2b32 <MoveForward+0x9e>
		__ticks = 1;
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	9e 83       	std	Y+6, r25	; 0x06
    2b2e:	8d 83       	std	Y+5, r24	; 0x05
    2b30:	3f c0       	rjmp	.+126    	; 0x2bb0 <MoveForward+0x11c>
	else if (__tmp > 65535)
    2b32:	6f 81       	ldd	r22, Y+7	; 0x07
    2b34:	78 85       	ldd	r23, Y+8	; 0x08
    2b36:	89 85       	ldd	r24, Y+9	; 0x09
    2b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	3f ef       	ldi	r19, 0xFF	; 255
    2b3e:	4f e7       	ldi	r20, 0x7F	; 127
    2b40:	57 e4       	ldi	r21, 0x47	; 71
    2b42:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2b46:	18 16       	cp	r1, r24
    2b48:	4c f5       	brge	.+82     	; 0x2b9c <MoveForward+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b50:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	40 e2       	ldi	r20, 0x20	; 32
    2b58:	51 e4       	ldi	r21, 0x41	; 65
    2b5a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	bc 01       	movw	r22, r24
    2b64:	cd 01       	movw	r24, r26
    2b66:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	9e 83       	std	Y+6, r25	; 0x06
    2b70:	8d 83       	std	Y+5, r24	; 0x05
    2b72:	0f c0       	rjmp	.+30     	; 0x2b92 <MoveForward+0xfe>
    2b74:	80 e9       	ldi	r24, 0x90	; 144
    2b76:	91 e0       	ldi	r25, 0x01	; 1
    2b78:	9c 83       	std	Y+4, r25	; 0x04
    2b7a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b80:	01 97       	sbiw	r24, 0x01	; 1
    2b82:	f1 f7       	brne	.-4      	; 0x2b80 <MoveForward+0xec>
    2b84:	9c 83       	std	Y+4, r25	; 0x04
    2b86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b88:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b8c:	01 97       	sbiw	r24, 0x01	; 1
    2b8e:	9e 83       	std	Y+6, r25	; 0x06
    2b90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b92:	8d 81       	ldd	r24, Y+5	; 0x05
    2b94:	9e 81       	ldd	r25, Y+6	; 0x06
    2b96:	00 97       	sbiw	r24, 0x00	; 0
    2b98:	69 f7       	brne	.-38     	; 0x2b74 <MoveForward+0xe0>
    2b9a:	14 c0       	rjmp	.+40     	; 0x2bc4 <MoveForward+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b9e:	78 85       	ldd	r23, Y+8	; 0x08
    2ba0:	89 85       	ldd	r24, Y+9	; 0x09
    2ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	9e 83       	std	Y+6, r25	; 0x06
    2bae:	8d 83       	std	Y+5, r24	; 0x05
    2bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb4:	9a 83       	std	Y+2, r25	; 0x02
    2bb6:	89 83       	std	Y+1, r24	; 0x01
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	9a 81       	ldd	r25, Y+2	; 0x02
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	f1 f7       	brne	.-4      	; 0x2bbc <MoveForward+0x128>
    2bc0:	9a 83       	std	Y+2, r25	; 0x02
    2bc2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	PORTC &= ~((1 << 6) | (1 << 5) | (1 << 3) | (1 << 4)); //stop
    2bc4:	a5 e3       	ldi	r26, 0x35	; 53
    2bc6:	b0 e0       	ldi	r27, 0x00	; 0
    2bc8:	e5 e3       	ldi	r30, 0x35	; 53
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	80 81       	ld	r24, Z
    2bce:	87 78       	andi	r24, 0x87	; 135
    2bd0:	8c 93       	st	X, r24
}
    2bd2:	2e 96       	adiw	r28, 0x0e	; 14
    2bd4:	0f b6       	in	r0, 0x3f	; 63
    2bd6:	f8 94       	cli
    2bd8:	de bf       	out	0x3e, r29	; 62
    2bda:	0f be       	out	0x3f, r0	; 63
    2bdc:	cd bf       	out	0x3d, r28	; 61
    2bde:	cf 91       	pop	r28
    2be0:	df 91       	pop	r29
    2be2:	08 95       	ret

00002be4 <MoveBackward>:
void MoveBackward() {
    2be4:	df 93       	push	r29
    2be6:	cf 93       	push	r28
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62
    2bec:	2e 97       	sbiw	r28, 0x0e	; 14
    2bee:	0f b6       	in	r0, 0x3f	; 63
    2bf0:	f8 94       	cli
    2bf2:	de bf       	out	0x3e, r29	; 62
    2bf4:	0f be       	out	0x3f, r0	; 63
    2bf6:	cd bf       	out	0x3d, r28	; 61
	PORTC |= (1 << 6); //L
    2bf8:	a5 e3       	ldi	r26, 0x35	; 53
    2bfa:	b0 e0       	ldi	r27, 0x00	; 0
    2bfc:	e5 e3       	ldi	r30, 0x35	; 53
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	80 81       	ld	r24, Z
    2c02:	80 64       	ori	r24, 0x40	; 64
    2c04:	8c 93       	st	X, r24
	PORTC &= ~(1 << 5);
    2c06:	a5 e3       	ldi	r26, 0x35	; 53
    2c08:	b0 e0       	ldi	r27, 0x00	; 0
    2c0a:	e5 e3       	ldi	r30, 0x35	; 53
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	80 81       	ld	r24, Z
    2c10:	8f 7d       	andi	r24, 0xDF	; 223
    2c12:	8c 93       	st	X, r24
	PORTC |= (1 << 4); //L
    2c14:	a5 e3       	ldi	r26, 0x35	; 53
    2c16:	b0 e0       	ldi	r27, 0x00	; 0
    2c18:	e5 e3       	ldi	r30, 0x35	; 53
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	80 81       	ld	r24, Z
    2c1e:	80 61       	ori	r24, 0x10	; 16
    2c20:	8c 93       	st	X, r24
	PORTC &= ~(1 << 3);
    2c22:	a5 e3       	ldi	r26, 0x35	; 53
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	e5 e3       	ldi	r30, 0x35	; 53
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	80 81       	ld	r24, Z
    2c2c:	87 7f       	andi	r24, 0xF7	; 247
    2c2e:	8c 93       	st	X, r24
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	aa ef       	ldi	r26, 0xFA	; 250
    2c36:	b3 e4       	ldi	r27, 0x43	; 67
    2c38:	8b 87       	std	Y+11, r24	; 0x0b
    2c3a:	9c 87       	std	Y+12, r25	; 0x0c
    2c3c:	ad 87       	std	Y+13, r26	; 0x0d
    2c3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	4a e7       	ldi	r20, 0x7A	; 122
    2c4e:	55 e4       	ldi	r21, 0x45	; 69
    2c50:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2c54:	dc 01       	movw	r26, r24
    2c56:	cb 01       	movw	r24, r22
    2c58:	8f 83       	std	Y+7, r24	; 0x07
    2c5a:	98 87       	std	Y+8, r25	; 0x08
    2c5c:	a9 87       	std	Y+9, r26	; 0x09
    2c5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c60:	6f 81       	ldd	r22, Y+7	; 0x07
    2c62:	78 85       	ldd	r23, Y+8	; 0x08
    2c64:	89 85       	ldd	r24, Y+9	; 0x09
    2c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	40 e8       	ldi	r20, 0x80	; 128
    2c6e:	5f e3       	ldi	r21, 0x3F	; 63
    2c70:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2c74:	88 23       	and	r24, r24
    2c76:	2c f4       	brge	.+10     	; 0x2c82 <MoveBackward+0x9e>
		__ticks = 1;
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	9e 83       	std	Y+6, r25	; 0x06
    2c7e:	8d 83       	std	Y+5, r24	; 0x05
    2c80:	3f c0       	rjmp	.+126    	; 0x2d00 <MoveBackward+0x11c>
	else if (__tmp > 65535)
    2c82:	6f 81       	ldd	r22, Y+7	; 0x07
    2c84:	78 85       	ldd	r23, Y+8	; 0x08
    2c86:	89 85       	ldd	r24, Y+9	; 0x09
    2c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	3f ef       	ldi	r19, 0xFF	; 255
    2c8e:	4f e7       	ldi	r20, 0x7F	; 127
    2c90:	57 e4       	ldi	r21, 0x47	; 71
    2c92:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2c96:	18 16       	cp	r1, r24
    2c98:	4c f5       	brge	.+82     	; 0x2cec <MoveBackward+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	40 e2       	ldi	r20, 0x20	; 32
    2ca8:	51 e4       	ldi	r21, 0x41	; 65
    2caa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	bc 01       	movw	r22, r24
    2cb4:	cd 01       	movw	r24, r26
    2cb6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	9e 83       	std	Y+6, r25	; 0x06
    2cc0:	8d 83       	std	Y+5, r24	; 0x05
    2cc2:	0f c0       	rjmp	.+30     	; 0x2ce2 <MoveBackward+0xfe>
    2cc4:	80 e9       	ldi	r24, 0x90	; 144
    2cc6:	91 e0       	ldi	r25, 0x01	; 1
    2cc8:	9c 83       	std	Y+4, r25	; 0x04
    2cca:	8b 83       	std	Y+3, r24	; 0x03
    2ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cce:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
    2cd2:	f1 f7       	brne	.-4      	; 0x2cd0 <MoveBackward+0xec>
    2cd4:	9c 83       	std	Y+4, r25	; 0x04
    2cd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cda:	9e 81       	ldd	r25, Y+6	; 0x06
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	9e 83       	std	Y+6, r25	; 0x06
    2ce0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce6:	00 97       	sbiw	r24, 0x00	; 0
    2ce8:	69 f7       	brne	.-38     	; 0x2cc4 <MoveBackward+0xe0>
    2cea:	14 c0       	rjmp	.+40     	; 0x2d14 <MoveBackward+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cec:	6f 81       	ldd	r22, Y+7	; 0x07
    2cee:	78 85       	ldd	r23, Y+8	; 0x08
    2cf0:	89 85       	ldd	r24, Y+9	; 0x09
    2cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	9e 83       	std	Y+6, r25	; 0x06
    2cfe:	8d 83       	std	Y+5, r24	; 0x05
    2d00:	8d 81       	ldd	r24, Y+5	; 0x05
    2d02:	9e 81       	ldd	r25, Y+6	; 0x06
    2d04:	9a 83       	std	Y+2, r25	; 0x02
    2d06:	89 83       	std	Y+1, r24	; 0x01
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	f1 f7       	brne	.-4      	; 0x2d0c <MoveBackward+0x128>
    2d10:	9a 83       	std	Y+2, r25	; 0x02
    2d12:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	PORTC &= ~((1 << 6) | (1 << 5) | (1 << 3) | (1 << 4)); //stop
    2d14:	a5 e3       	ldi	r26, 0x35	; 53
    2d16:	b0 e0       	ldi	r27, 0x00	; 0
    2d18:	e5 e3       	ldi	r30, 0x35	; 53
    2d1a:	f0 e0       	ldi	r31, 0x00	; 0
    2d1c:	80 81       	ld	r24, Z
    2d1e:	87 78       	andi	r24, 0x87	; 135
    2d20:	8c 93       	st	X, r24
}
    2d22:	2e 96       	adiw	r28, 0x0e	; 14
    2d24:	0f b6       	in	r0, 0x3f	; 63
    2d26:	f8 94       	cli
    2d28:	de bf       	out	0x3e, r29	; 62
    2d2a:	0f be       	out	0x3f, r0	; 63
    2d2c:	cd bf       	out	0x3d, r28	; 61
    2d2e:	cf 91       	pop	r28
    2d30:	df 91       	pop	r29
    2d32:	08 95       	ret

00002d34 <MoveLeft>:
void MoveLeft() {
    2d34:	df 93       	push	r29
    2d36:	cf 93       	push	r28
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
    2d3c:	2e 97       	sbiw	r28, 0x0e	; 14
    2d3e:	0f b6       	in	r0, 0x3f	; 63
    2d40:	f8 94       	cli
    2d42:	de bf       	out	0x3e, r29	; 62
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	cd bf       	out	0x3d, r28	; 61
	PORTC |= (1 << 3); //L
    2d48:	a5 e3       	ldi	r26, 0x35	; 53
    2d4a:	b0 e0       	ldi	r27, 0x00	; 0
    2d4c:	e5 e3       	ldi	r30, 0x35	; 53
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	80 81       	ld	r24, Z
    2d52:	88 60       	ori	r24, 0x08	; 8
    2d54:	8c 93       	st	X, r24
	PORTC &= ~(1 << 4);
    2d56:	a5 e3       	ldi	r26, 0x35	; 53
    2d58:	b0 e0       	ldi	r27, 0x00	; 0
    2d5a:	e5 e3       	ldi	r30, 0x35	; 53
    2d5c:	f0 e0       	ldi	r31, 0x00	; 0
    2d5e:	80 81       	ld	r24, Z
    2d60:	8f 7e       	andi	r24, 0xEF	; 239
    2d62:	8c 93       	st	X, r24
    2d64:	80 e0       	ldi	r24, 0x00	; 0
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	aa ef       	ldi	r26, 0xFA	; 250
    2d6a:	b3 e4       	ldi	r27, 0x43	; 67
    2d6c:	8b 87       	std	Y+11, r24	; 0x0b
    2d6e:	9c 87       	std	Y+12, r25	; 0x0c
    2d70:	ad 87       	std	Y+13, r26	; 0x0d
    2d72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	4a e7       	ldi	r20, 0x7A	; 122
    2d82:	55 e4       	ldi	r21, 0x45	; 69
    2d84:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	8f 83       	std	Y+7, r24	; 0x07
    2d8e:	98 87       	std	Y+8, r25	; 0x08
    2d90:	a9 87       	std	Y+9, r26	; 0x09
    2d92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d94:	6f 81       	ldd	r22, Y+7	; 0x07
    2d96:	78 85       	ldd	r23, Y+8	; 0x08
    2d98:	89 85       	ldd	r24, Y+9	; 0x09
    2d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	40 e8       	ldi	r20, 0x80	; 128
    2da2:	5f e3       	ldi	r21, 0x3F	; 63
    2da4:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2da8:	88 23       	and	r24, r24
    2daa:	2c f4       	brge	.+10     	; 0x2db6 <MoveLeft+0x82>
		__ticks = 1;
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	9e 83       	std	Y+6, r25	; 0x06
    2db2:	8d 83       	std	Y+5, r24	; 0x05
    2db4:	3f c0       	rjmp	.+126    	; 0x2e34 <MoveLeft+0x100>
	else if (__tmp > 65535)
    2db6:	6f 81       	ldd	r22, Y+7	; 0x07
    2db8:	78 85       	ldd	r23, Y+8	; 0x08
    2dba:	89 85       	ldd	r24, Y+9	; 0x09
    2dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	3f ef       	ldi	r19, 0xFF	; 255
    2dc2:	4f e7       	ldi	r20, 0x7F	; 127
    2dc4:	57 e4       	ldi	r21, 0x47	; 71
    2dc6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2dca:	18 16       	cp	r1, r24
    2dcc:	4c f5       	brge	.+82     	; 0x2e20 <MoveLeft+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dce:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	40 e2       	ldi	r20, 0x20	; 32
    2ddc:	51 e4       	ldi	r21, 0x41	; 65
    2dde:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	bc 01       	movw	r22, r24
    2de8:	cd 01       	movw	r24, r26
    2dea:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	9e 83       	std	Y+6, r25	; 0x06
    2df4:	8d 83       	std	Y+5, r24	; 0x05
    2df6:	0f c0       	rjmp	.+30     	; 0x2e16 <MoveLeft+0xe2>
    2df8:	80 e9       	ldi	r24, 0x90	; 144
    2dfa:	91 e0       	ldi	r25, 0x01	; 1
    2dfc:	9c 83       	std	Y+4, r25	; 0x04
    2dfe:	8b 83       	std	Y+3, r24	; 0x03
    2e00:	8b 81       	ldd	r24, Y+3	; 0x03
    2e02:	9c 81       	ldd	r25, Y+4	; 0x04
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	f1 f7       	brne	.-4      	; 0x2e04 <MoveLeft+0xd0>
    2e08:	9c 83       	std	Y+4, r25	; 0x04
    2e0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e10:	01 97       	sbiw	r24, 0x01	; 1
    2e12:	9e 83       	std	Y+6, r25	; 0x06
    2e14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e16:	8d 81       	ldd	r24, Y+5	; 0x05
    2e18:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1a:	00 97       	sbiw	r24, 0x00	; 0
    2e1c:	69 f7       	brne	.-38     	; 0x2df8 <MoveLeft+0xc4>
    2e1e:	14 c0       	rjmp	.+40     	; 0x2e48 <MoveLeft+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e20:	6f 81       	ldd	r22, Y+7	; 0x07
    2e22:	78 85       	ldd	r23, Y+8	; 0x08
    2e24:	89 85       	ldd	r24, Y+9	; 0x09
    2e26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e28:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	9e 83       	std	Y+6, r25	; 0x06
    2e32:	8d 83       	std	Y+5, r24	; 0x05
    2e34:	8d 81       	ldd	r24, Y+5	; 0x05
    2e36:	9e 81       	ldd	r25, Y+6	; 0x06
    2e38:	9a 83       	std	Y+2, r25	; 0x02
    2e3a:	89 83       	std	Y+1, r24	; 0x01
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
    2e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e40:	01 97       	sbiw	r24, 0x01	; 1
    2e42:	f1 f7       	brne	.-4      	; 0x2e40 <MoveLeft+0x10c>
    2e44:	9a 83       	std	Y+2, r25	; 0x02
    2e46:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	PORTC &= ~((1 << 6) | (1 << 5) | (1 << 3) | (1 << 4)); //stop
    2e48:	a5 e3       	ldi	r26, 0x35	; 53
    2e4a:	b0 e0       	ldi	r27, 0x00	; 0
    2e4c:	e5 e3       	ldi	r30, 0x35	; 53
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	80 81       	ld	r24, Z
    2e52:	87 78       	andi	r24, 0x87	; 135
    2e54:	8c 93       	st	X, r24
}
    2e56:	2e 96       	adiw	r28, 0x0e	; 14
    2e58:	0f b6       	in	r0, 0x3f	; 63
    2e5a:	f8 94       	cli
    2e5c:	de bf       	out	0x3e, r29	; 62
    2e5e:	0f be       	out	0x3f, r0	; 63
    2e60:	cd bf       	out	0x3d, r28	; 61
    2e62:	cf 91       	pop	r28
    2e64:	df 91       	pop	r29
    2e66:	08 95       	ret

00002e68 <MoveRight>:
void MoveRight() {
    2e68:	df 93       	push	r29
    2e6a:	cf 93       	push	r28
    2e6c:	cd b7       	in	r28, 0x3d	; 61
    2e6e:	de b7       	in	r29, 0x3e	; 62
    2e70:	2e 97       	sbiw	r28, 0x0e	; 14
    2e72:	0f b6       	in	r0, 0x3f	; 63
    2e74:	f8 94       	cli
    2e76:	de bf       	out	0x3e, r29	; 62
    2e78:	0f be       	out	0x3f, r0	; 63
    2e7a:	cd bf       	out	0x3d, r28	; 61
	PORTC |= (1 << 5); //L
    2e7c:	a5 e3       	ldi	r26, 0x35	; 53
    2e7e:	b0 e0       	ldi	r27, 0x00	; 0
    2e80:	e5 e3       	ldi	r30, 0x35	; 53
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	80 81       	ld	r24, Z
    2e86:	80 62       	ori	r24, 0x20	; 32
    2e88:	8c 93       	st	X, r24
	PORTC &= ~(1 << 6);
    2e8a:	a5 e3       	ldi	r26, 0x35	; 53
    2e8c:	b0 e0       	ldi	r27, 0x00	; 0
    2e8e:	e5 e3       	ldi	r30, 0x35	; 53
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	80 81       	ld	r24, Z
    2e94:	8f 7b       	andi	r24, 0xBF	; 191
    2e96:	8c 93       	st	X, r24
    2e98:	80 e0       	ldi	r24, 0x00	; 0
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	aa ef       	ldi	r26, 0xFA	; 250
    2e9e:	b3 e4       	ldi	r27, 0x43	; 67
    2ea0:	8b 87       	std	Y+11, r24	; 0x0b
    2ea2:	9c 87       	std	Y+12, r25	; 0x0c
    2ea4:	ad 87       	std	Y+13, r26	; 0x0d
    2ea6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	4a e7       	ldi	r20, 0x7A	; 122
    2eb6:	55 e4       	ldi	r21, 0x45	; 69
    2eb8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	8f 83       	std	Y+7, r24	; 0x07
    2ec2:	98 87       	std	Y+8, r25	; 0x08
    2ec4:	a9 87       	std	Y+9, r26	; 0x09
    2ec6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ec8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eca:	78 85       	ldd	r23, Y+8	; 0x08
    2ecc:	89 85       	ldd	r24, Y+9	; 0x09
    2ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	40 e8       	ldi	r20, 0x80	; 128
    2ed6:	5f e3       	ldi	r21, 0x3F	; 63
    2ed8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2edc:	88 23       	and	r24, r24
    2ede:	2c f4       	brge	.+10     	; 0x2eea <MoveRight+0x82>
		__ticks = 1;
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	9e 83       	std	Y+6, r25	; 0x06
    2ee6:	8d 83       	std	Y+5, r24	; 0x05
    2ee8:	3f c0       	rjmp	.+126    	; 0x2f68 <MoveRight+0x100>
	else if (__tmp > 65535)
    2eea:	6f 81       	ldd	r22, Y+7	; 0x07
    2eec:	78 85       	ldd	r23, Y+8	; 0x08
    2eee:	89 85       	ldd	r24, Y+9	; 0x09
    2ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	3f ef       	ldi	r19, 0xFF	; 255
    2ef6:	4f e7       	ldi	r20, 0x7F	; 127
    2ef8:	57 e4       	ldi	r21, 0x47	; 71
    2efa:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2efe:	18 16       	cp	r1, r24
    2f00:	4c f5       	brge	.+82     	; 0x2f54 <MoveRight+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	40 e2       	ldi	r20, 0x20	; 32
    2f10:	51 e4       	ldi	r21, 0x41	; 65
    2f12:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	bc 01       	movw	r22, r24
    2f1c:	cd 01       	movw	r24, r26
    2f1e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	9e 83       	std	Y+6, r25	; 0x06
    2f28:	8d 83       	std	Y+5, r24	; 0x05
    2f2a:	0f c0       	rjmp	.+30     	; 0x2f4a <MoveRight+0xe2>
    2f2c:	80 e9       	ldi	r24, 0x90	; 144
    2f2e:	91 e0       	ldi	r25, 0x01	; 1
    2f30:	9c 83       	std	Y+4, r25	; 0x04
    2f32:	8b 83       	std	Y+3, r24	; 0x03
    2f34:	8b 81       	ldd	r24, Y+3	; 0x03
    2f36:	9c 81       	ldd	r25, Y+4	; 0x04
    2f38:	01 97       	sbiw	r24, 0x01	; 1
    2f3a:	f1 f7       	brne	.-4      	; 0x2f38 <MoveRight+0xd0>
    2f3c:	9c 83       	std	Y+4, r25	; 0x04
    2f3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f40:	8d 81       	ldd	r24, Y+5	; 0x05
    2f42:	9e 81       	ldd	r25, Y+6	; 0x06
    2f44:	01 97       	sbiw	r24, 0x01	; 1
    2f46:	9e 83       	std	Y+6, r25	; 0x06
    2f48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4e:	00 97       	sbiw	r24, 0x00	; 0
    2f50:	69 f7       	brne	.-38     	; 0x2f2c <MoveRight+0xc4>
    2f52:	14 c0       	rjmp	.+40     	; 0x2f7c <MoveRight+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f54:	6f 81       	ldd	r22, Y+7	; 0x07
    2f56:	78 85       	ldd	r23, Y+8	; 0x08
    2f58:	89 85       	ldd	r24, Y+9	; 0x09
    2f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	9e 83       	std	Y+6, r25	; 0x06
    2f66:	8d 83       	std	Y+5, r24	; 0x05
    2f68:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f6c:	9a 83       	std	Y+2, r25	; 0x02
    2f6e:	89 83       	std	Y+1, r24	; 0x01
    2f70:	89 81       	ldd	r24, Y+1	; 0x01
    2f72:	9a 81       	ldd	r25, Y+2	; 0x02
    2f74:	01 97       	sbiw	r24, 0x01	; 1
    2f76:	f1 f7       	brne	.-4      	; 0x2f74 <MoveRight+0x10c>
    2f78:	9a 83       	std	Y+2, r25	; 0x02
    2f7a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	PORTC &= ~((1 << 6) | (1 << 5) | (1 << 3) | (1 << 4)); //stop
    2f7c:	a5 e3       	ldi	r26, 0x35	; 53
    2f7e:	b0 e0       	ldi	r27, 0x00	; 0
    2f80:	e5 e3       	ldi	r30, 0x35	; 53
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	80 81       	ld	r24, Z
    2f86:	87 78       	andi	r24, 0x87	; 135
    2f88:	8c 93       	st	X, r24
}
    2f8a:	2e 96       	adiw	r28, 0x0e	; 14
    2f8c:	0f b6       	in	r0, 0x3f	; 63
    2f8e:	f8 94       	cli
    2f90:	de bf       	out	0x3e, r29	; 62
    2f92:	0f be       	out	0x3f, r0	; 63
    2f94:	cd bf       	out	0x3d, r28	; 61
    2f96:	cf 91       	pop	r28
    2f98:	df 91       	pop	r29
    2f9a:	08 95       	ret

00002f9c <__mulsi3>:
    2f9c:	62 9f       	mul	r22, r18
    2f9e:	d0 01       	movw	r26, r0
    2fa0:	73 9f       	mul	r23, r19
    2fa2:	f0 01       	movw	r30, r0
    2fa4:	82 9f       	mul	r24, r18
    2fa6:	e0 0d       	add	r30, r0
    2fa8:	f1 1d       	adc	r31, r1
    2faa:	64 9f       	mul	r22, r20
    2fac:	e0 0d       	add	r30, r0
    2fae:	f1 1d       	adc	r31, r1
    2fb0:	92 9f       	mul	r25, r18
    2fb2:	f0 0d       	add	r31, r0
    2fb4:	83 9f       	mul	r24, r19
    2fb6:	f0 0d       	add	r31, r0
    2fb8:	74 9f       	mul	r23, r20
    2fba:	f0 0d       	add	r31, r0
    2fbc:	65 9f       	mul	r22, r21
    2fbe:	f0 0d       	add	r31, r0
    2fc0:	99 27       	eor	r25, r25
    2fc2:	72 9f       	mul	r23, r18
    2fc4:	b0 0d       	add	r27, r0
    2fc6:	e1 1d       	adc	r30, r1
    2fc8:	f9 1f       	adc	r31, r25
    2fca:	63 9f       	mul	r22, r19
    2fcc:	b0 0d       	add	r27, r0
    2fce:	e1 1d       	adc	r30, r1
    2fd0:	f9 1f       	adc	r31, r25
    2fd2:	bd 01       	movw	r22, r26
    2fd4:	cf 01       	movw	r24, r30
    2fd6:	11 24       	eor	r1, r1
    2fd8:	08 95       	ret

00002fda <__divmodsi4>:
    2fda:	97 fb       	bst	r25, 7
    2fdc:	09 2e       	mov	r0, r25
    2fde:	05 26       	eor	r0, r21
    2fe0:	0e d0       	rcall	.+28     	; 0x2ffe <__divmodsi4_neg1>
    2fe2:	57 fd       	sbrc	r21, 7
    2fe4:	04 d0       	rcall	.+8      	; 0x2fee <__divmodsi4_neg2>
    2fe6:	14 d0       	rcall	.+40     	; 0x3010 <__udivmodsi4>
    2fe8:	0a d0       	rcall	.+20     	; 0x2ffe <__divmodsi4_neg1>
    2fea:	00 1c       	adc	r0, r0
    2fec:	38 f4       	brcc	.+14     	; 0x2ffc <__divmodsi4_exit>

00002fee <__divmodsi4_neg2>:
    2fee:	50 95       	com	r21
    2ff0:	40 95       	com	r20
    2ff2:	30 95       	com	r19
    2ff4:	21 95       	neg	r18
    2ff6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff8:	4f 4f       	sbci	r20, 0xFF	; 255
    2ffa:	5f 4f       	sbci	r21, 0xFF	; 255

00002ffc <__divmodsi4_exit>:
    2ffc:	08 95       	ret

00002ffe <__divmodsi4_neg1>:
    2ffe:	f6 f7       	brtc	.-4      	; 0x2ffc <__divmodsi4_exit>
    3000:	90 95       	com	r25
    3002:	80 95       	com	r24
    3004:	70 95       	com	r23
    3006:	61 95       	neg	r22
    3008:	7f 4f       	sbci	r23, 0xFF	; 255
    300a:	8f 4f       	sbci	r24, 0xFF	; 255
    300c:	9f 4f       	sbci	r25, 0xFF	; 255
    300e:	08 95       	ret

00003010 <__udivmodsi4>:
    3010:	a1 e2       	ldi	r26, 0x21	; 33
    3012:	1a 2e       	mov	r1, r26
    3014:	aa 1b       	sub	r26, r26
    3016:	bb 1b       	sub	r27, r27
    3018:	fd 01       	movw	r30, r26
    301a:	0d c0       	rjmp	.+26     	; 0x3036 <__udivmodsi4_ep>

0000301c <__udivmodsi4_loop>:
    301c:	aa 1f       	adc	r26, r26
    301e:	bb 1f       	adc	r27, r27
    3020:	ee 1f       	adc	r30, r30
    3022:	ff 1f       	adc	r31, r31
    3024:	a2 17       	cp	r26, r18
    3026:	b3 07       	cpc	r27, r19
    3028:	e4 07       	cpc	r30, r20
    302a:	f5 07       	cpc	r31, r21
    302c:	20 f0       	brcs	.+8      	; 0x3036 <__udivmodsi4_ep>
    302e:	a2 1b       	sub	r26, r18
    3030:	b3 0b       	sbc	r27, r19
    3032:	e4 0b       	sbc	r30, r20
    3034:	f5 0b       	sbc	r31, r21

00003036 <__udivmodsi4_ep>:
    3036:	66 1f       	adc	r22, r22
    3038:	77 1f       	adc	r23, r23
    303a:	88 1f       	adc	r24, r24
    303c:	99 1f       	adc	r25, r25
    303e:	1a 94       	dec	r1
    3040:	69 f7       	brne	.-38     	; 0x301c <__udivmodsi4_loop>
    3042:	60 95       	com	r22
    3044:	70 95       	com	r23
    3046:	80 95       	com	r24
    3048:	90 95       	com	r25
    304a:	9b 01       	movw	r18, r22
    304c:	ac 01       	movw	r20, r24
    304e:	bd 01       	movw	r22, r26
    3050:	cf 01       	movw	r24, r30
    3052:	08 95       	ret

00003054 <__prologue_saves__>:
    3054:	2f 92       	push	r2
    3056:	3f 92       	push	r3
    3058:	4f 92       	push	r4
    305a:	5f 92       	push	r5
    305c:	6f 92       	push	r6
    305e:	7f 92       	push	r7
    3060:	8f 92       	push	r8
    3062:	9f 92       	push	r9
    3064:	af 92       	push	r10
    3066:	bf 92       	push	r11
    3068:	cf 92       	push	r12
    306a:	df 92       	push	r13
    306c:	ef 92       	push	r14
    306e:	ff 92       	push	r15
    3070:	0f 93       	push	r16
    3072:	1f 93       	push	r17
    3074:	cf 93       	push	r28
    3076:	df 93       	push	r29
    3078:	cd b7       	in	r28, 0x3d	; 61
    307a:	de b7       	in	r29, 0x3e	; 62
    307c:	ca 1b       	sub	r28, r26
    307e:	db 0b       	sbc	r29, r27
    3080:	0f b6       	in	r0, 0x3f	; 63
    3082:	f8 94       	cli
    3084:	de bf       	out	0x3e, r29	; 62
    3086:	0f be       	out	0x3f, r0	; 63
    3088:	cd bf       	out	0x3d, r28	; 61
    308a:	09 94       	ijmp

0000308c <__epilogue_restores__>:
    308c:	2a 88       	ldd	r2, Y+18	; 0x12
    308e:	39 88       	ldd	r3, Y+17	; 0x11
    3090:	48 88       	ldd	r4, Y+16	; 0x10
    3092:	5f 84       	ldd	r5, Y+15	; 0x0f
    3094:	6e 84       	ldd	r6, Y+14	; 0x0e
    3096:	7d 84       	ldd	r7, Y+13	; 0x0d
    3098:	8c 84       	ldd	r8, Y+12	; 0x0c
    309a:	9b 84       	ldd	r9, Y+11	; 0x0b
    309c:	aa 84       	ldd	r10, Y+10	; 0x0a
    309e:	b9 84       	ldd	r11, Y+9	; 0x09
    30a0:	c8 84       	ldd	r12, Y+8	; 0x08
    30a2:	df 80       	ldd	r13, Y+7	; 0x07
    30a4:	ee 80       	ldd	r14, Y+6	; 0x06
    30a6:	fd 80       	ldd	r15, Y+5	; 0x05
    30a8:	0c 81       	ldd	r16, Y+4	; 0x04
    30aa:	1b 81       	ldd	r17, Y+3	; 0x03
    30ac:	aa 81       	ldd	r26, Y+2	; 0x02
    30ae:	b9 81       	ldd	r27, Y+1	; 0x01
    30b0:	ce 0f       	add	r28, r30
    30b2:	d1 1d       	adc	r29, r1
    30b4:	0f b6       	in	r0, 0x3f	; 63
    30b6:	f8 94       	cli
    30b8:	de bf       	out	0x3e, r29	; 62
    30ba:	0f be       	out	0x3f, r0	; 63
    30bc:	cd bf       	out	0x3d, r28	; 61
    30be:	ed 01       	movw	r28, r26
    30c0:	08 95       	ret

000030c2 <dtostrf>:
    30c2:	ef 92       	push	r14
    30c4:	ff 92       	push	r15
    30c6:	0f 93       	push	r16
    30c8:	1f 93       	push	r17
    30ca:	f2 2f       	mov	r31, r18
    30cc:	f0 2e       	mov	r15, r16
    30ce:	47 fd       	sbrc	r20, 7
    30d0:	02 c0       	rjmp	.+4      	; 0x30d6 <dtostrf+0x14>
    30d2:	e4 e0       	ldi	r30, 0x04	; 4
    30d4:	01 c0       	rjmp	.+2      	; 0x30d8 <dtostrf+0x16>
    30d6:	e4 e1       	ldi	r30, 0x14	; 20
    30d8:	24 2f       	mov	r18, r20
    30da:	33 27       	eor	r19, r19
    30dc:	27 fd       	sbrc	r18, 7
    30de:	30 95       	com	r19
    30e0:	37 ff       	sbrs	r19, 7
    30e2:	03 c0       	rjmp	.+6      	; 0x30ea <dtostrf+0x28>
    30e4:	30 95       	com	r19
    30e6:	21 95       	neg	r18
    30e8:	3f 4f       	sbci	r19, 0xFF	; 255
    30ea:	4f 2d       	mov	r20, r15
    30ec:	51 2f       	mov	r21, r17
    30ee:	0f 2f       	mov	r16, r31
    30f0:	ee 2e       	mov	r14, r30
    30f2:	0e 94 82 18 	call	0x3104	; 0x3104 <dtoa_prf>
    30f6:	8f 2d       	mov	r24, r15
    30f8:	91 2f       	mov	r25, r17
    30fa:	1f 91       	pop	r17
    30fc:	0f 91       	pop	r16
    30fe:	ff 90       	pop	r15
    3100:	ef 90       	pop	r14
    3102:	08 95       	ret

00003104 <dtoa_prf>:
    3104:	a9 e0       	ldi	r26, 0x09	; 9
    3106:	b0 e0       	ldi	r27, 0x00	; 0
    3108:	e8 e8       	ldi	r30, 0x88	; 136
    310a:	f8 e1       	ldi	r31, 0x18	; 24
    310c:	0c 94 2e 18 	jmp	0x305c	; 0x305c <__prologue_saves__+0x8>
    3110:	6a 01       	movw	r12, r20
    3112:	12 2f       	mov	r17, r18
    3114:	a0 2e       	mov	r10, r16
    3116:	be 2c       	mov	r11, r14
    3118:	2b e3       	ldi	r18, 0x3B	; 59
    311a:	20 17       	cp	r18, r16
    311c:	18 f4       	brcc	.+6      	; 0x3124 <dtoa_prf+0x20>
    311e:	2c e3       	ldi	r18, 0x3C	; 60
    3120:	92 2e       	mov	r9, r18
    3122:	02 c0       	rjmp	.+4      	; 0x3128 <dtoa_prf+0x24>
    3124:	90 2e       	mov	r9, r16
    3126:	93 94       	inc	r9
    3128:	ae 01       	movw	r20, r28
    312a:	4f 5f       	subi	r20, 0xFF	; 255
    312c:	5f 4f       	sbci	r21, 0xFF	; 255
    312e:	27 e0       	ldi	r18, 0x07	; 7
    3130:	09 2d       	mov	r16, r9
    3132:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <__ftoa_engine>
    3136:	bc 01       	movw	r22, r24
    3138:	89 81       	ldd	r24, Y+1	; 0x01
    313a:	e8 2e       	mov	r14, r24
    313c:	ff 24       	eor	r15, r15
    313e:	c7 01       	movw	r24, r14
    3140:	89 70       	andi	r24, 0x09	; 9
    3142:	90 70       	andi	r25, 0x00	; 0
    3144:	01 97       	sbiw	r24, 0x01	; 1
    3146:	11 f4       	brne	.+4      	; 0x314c <dtoa_prf+0x48>
    3148:	ad e2       	ldi	r26, 0x2D	; 45
    314a:	09 c0       	rjmp	.+18     	; 0x315e <dtoa_prf+0x5a>
    314c:	b1 fe       	sbrs	r11, 1
    314e:	02 c0       	rjmp	.+4      	; 0x3154 <dtoa_prf+0x50>
    3150:	ab e2       	ldi	r26, 0x2B	; 43
    3152:	05 c0       	rjmp	.+10     	; 0x315e <dtoa_prf+0x5a>
    3154:	b0 fc       	sbrc	r11, 0
    3156:	02 c0       	rjmp	.+4      	; 0x315c <dtoa_prf+0x58>
    3158:	a0 e0       	ldi	r26, 0x00	; 0
    315a:	01 c0       	rjmp	.+2      	; 0x315e <dtoa_prf+0x5a>
    315c:	a0 e2       	ldi	r26, 0x20	; 32
    315e:	e3 fe       	sbrs	r14, 3
    3160:	3b c0       	rjmp	.+118    	; 0x31d8 <dtoa_prf+0xd4>
    3162:	aa 23       	and	r26, r26
    3164:	11 f4       	brne	.+4      	; 0x316a <dtoa_prf+0x66>
    3166:	23 e0       	ldi	r18, 0x03	; 3
    3168:	01 c0       	rjmp	.+2      	; 0x316c <dtoa_prf+0x68>
    316a:	24 e0       	ldi	r18, 0x04	; 4
    316c:	21 17       	cp	r18, r17
    316e:	10 f0       	brcs	.+4      	; 0x3174 <dtoa_prf+0x70>
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	02 c0       	rjmp	.+4      	; 0x3178 <dtoa_prf+0x74>
    3174:	12 1b       	sub	r17, r18
    3176:	21 2f       	mov	r18, r17
    3178:	eb 2c       	mov	r14, r11
    317a:	b4 fe       	sbrs	r11, 4
    317c:	02 c0       	rjmp	.+4      	; 0x3182 <dtoa_prf+0x7e>
    317e:	32 2f       	mov	r19, r18
    3180:	0a c0       	rjmp	.+20     	; 0x3196 <dtoa_prf+0x92>
    3182:	f6 01       	movw	r30, r12
    3184:	32 2f       	mov	r19, r18
    3186:	80 e2       	ldi	r24, 0x20	; 32
    3188:	02 c0       	rjmp	.+4      	; 0x318e <dtoa_prf+0x8a>
    318a:	81 93       	st	Z+, r24
    318c:	31 50       	subi	r19, 0x01	; 1
    318e:	33 23       	and	r19, r19
    3190:	e1 f7       	brne	.-8      	; 0x318a <dtoa_prf+0x86>
    3192:	c2 0e       	add	r12, r18
    3194:	d1 1c       	adc	r13, r1
    3196:	aa 23       	and	r26, r26
    3198:	19 f0       	breq	.+6      	; 0x31a0 <dtoa_prf+0x9c>
    319a:	f6 01       	movw	r30, r12
    319c:	a1 93       	st	Z+, r26
    319e:	6f 01       	movw	r12, r30
    31a0:	f6 01       	movw	r30, r12
    31a2:	31 96       	adiw	r30, 0x01	; 1
    31a4:	e2 fe       	sbrs	r14, 2
    31a6:	05 c0       	rjmp	.+10     	; 0x31b2 <dtoa_prf+0xae>
    31a8:	9e e4       	ldi	r25, 0x4E	; 78
    31aa:	d6 01       	movw	r26, r12
    31ac:	9c 93       	st	X, r25
    31ae:	81 e4       	ldi	r24, 0x41	; 65
    31b0:	04 c0       	rjmp	.+8      	; 0x31ba <dtoa_prf+0xb6>
    31b2:	9e e6       	ldi	r25, 0x6E	; 110
    31b4:	d6 01       	movw	r26, r12
    31b6:	9c 93       	st	X, r25
    31b8:	81 e6       	ldi	r24, 0x61	; 97
    31ba:	11 96       	adiw	r26, 0x01	; 1
    31bc:	8c 93       	st	X, r24
    31be:	91 83       	std	Z+1, r25	; 0x01
    31c0:	32 96       	adiw	r30, 0x02	; 2
    31c2:	df 01       	movw	r26, r30
    31c4:	83 2f       	mov	r24, r19
    31c6:	90 e2       	ldi	r25, 0x20	; 32
    31c8:	02 c0       	rjmp	.+4      	; 0x31ce <dtoa_prf+0xca>
    31ca:	9d 93       	st	X+, r25
    31cc:	81 50       	subi	r24, 0x01	; 1
    31ce:	88 23       	and	r24, r24
    31d0:	e1 f7       	brne	.-8      	; 0x31ca <dtoa_prf+0xc6>
    31d2:	e3 0f       	add	r30, r19
    31d4:	f1 1d       	adc	r31, r1
    31d6:	40 c0       	rjmp	.+128    	; 0x3258 <dtoa_prf+0x154>
    31d8:	e2 fe       	sbrs	r14, 2
    31da:	42 c0       	rjmp	.+132    	; 0x3260 <dtoa_prf+0x15c>
    31dc:	aa 23       	and	r26, r26
    31de:	11 f4       	brne	.+4      	; 0x31e4 <dtoa_prf+0xe0>
    31e0:	23 e0       	ldi	r18, 0x03	; 3
    31e2:	01 c0       	rjmp	.+2      	; 0x31e6 <dtoa_prf+0xe2>
    31e4:	24 e0       	ldi	r18, 0x04	; 4
    31e6:	21 17       	cp	r18, r17
    31e8:	10 f0       	brcs	.+4      	; 0x31ee <dtoa_prf+0xea>
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	02 c0       	rjmp	.+4      	; 0x31f2 <dtoa_prf+0xee>
    31ee:	12 1b       	sub	r17, r18
    31f0:	21 2f       	mov	r18, r17
    31f2:	eb 2c       	mov	r14, r11
    31f4:	b4 fe       	sbrs	r11, 4
    31f6:	02 c0       	rjmp	.+4      	; 0x31fc <dtoa_prf+0xf8>
    31f8:	92 2f       	mov	r25, r18
    31fa:	0a c0       	rjmp	.+20     	; 0x3210 <dtoa_prf+0x10c>
    31fc:	f6 01       	movw	r30, r12
    31fe:	92 2f       	mov	r25, r18
    3200:	80 e2       	ldi	r24, 0x20	; 32
    3202:	02 c0       	rjmp	.+4      	; 0x3208 <dtoa_prf+0x104>
    3204:	81 93       	st	Z+, r24
    3206:	91 50       	subi	r25, 0x01	; 1
    3208:	99 23       	and	r25, r25
    320a:	e1 f7       	brne	.-8      	; 0x3204 <dtoa_prf+0x100>
    320c:	c2 0e       	add	r12, r18
    320e:	d1 1c       	adc	r13, r1
    3210:	aa 23       	and	r26, r26
    3212:	19 f0       	breq	.+6      	; 0x321a <dtoa_prf+0x116>
    3214:	f6 01       	movw	r30, r12
    3216:	a1 93       	st	Z+, r26
    3218:	6f 01       	movw	r12, r30
    321a:	f6 01       	movw	r30, r12
    321c:	31 96       	adiw	r30, 0x01	; 1
    321e:	e2 fe       	sbrs	r14, 2
    3220:	08 c0       	rjmp	.+16     	; 0x3232 <dtoa_prf+0x12e>
    3222:	89 e4       	ldi	r24, 0x49	; 73
    3224:	d6 01       	movw	r26, r12
    3226:	8c 93       	st	X, r24
    3228:	8e e4       	ldi	r24, 0x4E	; 78
    322a:	11 96       	adiw	r26, 0x01	; 1
    322c:	8c 93       	st	X, r24
    322e:	86 e4       	ldi	r24, 0x46	; 70
    3230:	07 c0       	rjmp	.+14     	; 0x3240 <dtoa_prf+0x13c>
    3232:	89 e6       	ldi	r24, 0x69	; 105
    3234:	d6 01       	movw	r26, r12
    3236:	8c 93       	st	X, r24
    3238:	8e e6       	ldi	r24, 0x6E	; 110
    323a:	11 96       	adiw	r26, 0x01	; 1
    323c:	8c 93       	st	X, r24
    323e:	86 e6       	ldi	r24, 0x66	; 102
    3240:	81 83       	std	Z+1, r24	; 0x01
    3242:	32 96       	adiw	r30, 0x02	; 2
    3244:	df 01       	movw	r26, r30
    3246:	89 2f       	mov	r24, r25
    3248:	20 e2       	ldi	r18, 0x20	; 32
    324a:	02 c0       	rjmp	.+4      	; 0x3250 <dtoa_prf+0x14c>
    324c:	2d 93       	st	X+, r18
    324e:	81 50       	subi	r24, 0x01	; 1
    3250:	88 23       	and	r24, r24
    3252:	e1 f7       	brne	.-8      	; 0x324c <dtoa_prf+0x148>
    3254:	e9 0f       	add	r30, r25
    3256:	f1 1d       	adc	r31, r1
    3258:	10 82       	st	Z, r1
    325a:	2e ef       	ldi	r18, 0xFE	; 254
    325c:	3f ef       	ldi	r19, 0xFF	; 255
    325e:	af c0       	rjmp	.+350    	; 0x33be <dtoa_prf+0x2ba>
    3260:	16 16       	cp	r1, r22
    3262:	17 06       	cpc	r1, r23
    3264:	1c f0       	brlt	.+6      	; 0x326c <dtoa_prf+0x168>
    3266:	41 e0       	ldi	r20, 0x01	; 1
    3268:	50 e0       	ldi	r21, 0x00	; 0
    326a:	03 c0       	rjmp	.+6      	; 0x3272 <dtoa_prf+0x16e>
    326c:	ab 01       	movw	r20, r22
    326e:	4f 5f       	subi	r20, 0xFF	; 255
    3270:	5f 4f       	sbci	r21, 0xFF	; 255
    3272:	aa 20       	and	r10, r10
    3274:	19 f4       	brne	.+6      	; 0x327c <dtoa_prf+0x178>
    3276:	80 e0       	ldi	r24, 0x00	; 0
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	03 c0       	rjmp	.+6      	; 0x3282 <dtoa_prf+0x17e>
    327c:	8a 2d       	mov	r24, r10
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	01 96       	adiw	r24, 0x01	; 1
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	aa 23       	and	r26, r26
    3288:	11 f0       	breq	.+4      	; 0x328e <dtoa_prf+0x18a>
    328a:	21 e0       	ldi	r18, 0x01	; 1
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	24 0f       	add	r18, r20
    3290:	35 1f       	adc	r19, r21
    3292:	28 0f       	add	r18, r24
    3294:	39 1f       	adc	r19, r25
    3296:	81 2f       	mov	r24, r17
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	28 17       	cp	r18, r24
    329c:	39 07       	cpc	r19, r25
    329e:	14 f0       	brlt	.+4      	; 0x32a4 <dtoa_prf+0x1a0>
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	02 c0       	rjmp	.+4      	; 0x32a8 <dtoa_prf+0x1a4>
    32a4:	12 1b       	sub	r17, r18
    32a6:	21 2f       	mov	r18, r17
    32a8:	4b 2d       	mov	r20, r11
    32aa:	50 e0       	ldi	r21, 0x00	; 0
    32ac:	ca 01       	movw	r24, r20
    32ae:	80 71       	andi	r24, 0x10	; 16
    32b0:	90 70       	andi	r25, 0x00	; 0
    32b2:	b4 fc       	sbrc	r11, 4
    32b4:	0d c0       	rjmp	.+26     	; 0x32d0 <dtoa_prf+0x1cc>
    32b6:	b3 fc       	sbrc	r11, 3
    32b8:	0b c0       	rjmp	.+22     	; 0x32d0 <dtoa_prf+0x1cc>
    32ba:	f6 01       	movw	r30, r12
    32bc:	32 2f       	mov	r19, r18
    32be:	40 e2       	ldi	r20, 0x20	; 32
    32c0:	02 c0       	rjmp	.+4      	; 0x32c6 <dtoa_prf+0x1c2>
    32c2:	41 93       	st	Z+, r20
    32c4:	31 50       	subi	r19, 0x01	; 1
    32c6:	33 23       	and	r19, r19
    32c8:	e1 f7       	brne	.-8      	; 0x32c2 <dtoa_prf+0x1be>
    32ca:	c2 0e       	add	r12, r18
    32cc:	d1 1c       	adc	r13, r1
    32ce:	01 c0       	rjmp	.+2      	; 0x32d2 <dtoa_prf+0x1ce>
    32d0:	32 2f       	mov	r19, r18
    32d2:	aa 23       	and	r26, r26
    32d4:	19 f0       	breq	.+6      	; 0x32dc <dtoa_prf+0x1d8>
    32d6:	f6 01       	movw	r30, r12
    32d8:	a1 93       	st	Z+, r26
    32da:	6f 01       	movw	r12, r30
    32dc:	89 2b       	or	r24, r25
    32de:	11 f0       	breq	.+4      	; 0x32e4 <dtoa_prf+0x1e0>
    32e0:	13 2f       	mov	r17, r19
    32e2:	0a c0       	rjmp	.+20     	; 0x32f8 <dtoa_prf+0x1f4>
    32e4:	f6 01       	movw	r30, r12
    32e6:	13 2f       	mov	r17, r19
    32e8:	80 e3       	ldi	r24, 0x30	; 48
    32ea:	02 c0       	rjmp	.+4      	; 0x32f0 <dtoa_prf+0x1ec>
    32ec:	81 93       	st	Z+, r24
    32ee:	11 50       	subi	r17, 0x01	; 1
    32f0:	11 23       	and	r17, r17
    32f2:	e1 f7       	brne	.-8      	; 0x32ec <dtoa_prf+0x1e8>
    32f4:	c3 0e       	add	r12, r19
    32f6:	d1 1c       	adc	r13, r1
    32f8:	09 2d       	mov	r16, r9
    32fa:	06 0f       	add	r16, r22
    32fc:	ba 80       	ldd	r11, Y+2	; 0x02
    32fe:	90 e1       	ldi	r25, 0x10	; 16
    3300:	89 2e       	mov	r8, r25
    3302:	91 2c       	mov	r9, r1
    3304:	8e 20       	and	r8, r14
    3306:	9f 20       	and	r9, r15
    3308:	e4 fe       	sbrs	r14, 4
    330a:	04 c0       	rjmp	.+8      	; 0x3314 <dtoa_prf+0x210>
    330c:	f1 e3       	ldi	r31, 0x31	; 49
    330e:	bf 16       	cp	r11, r31
    3310:	09 f4       	brne	.+2      	; 0x3314 <dtoa_prf+0x210>
    3312:	01 50       	subi	r16, 0x01	; 1
    3314:	10 16       	cp	r1, r16
    3316:	14 f0       	brlt	.+4      	; 0x331c <dtoa_prf+0x218>
    3318:	01 e0       	ldi	r16, 0x01	; 1
    331a:	03 c0       	rjmp	.+6      	; 0x3322 <dtoa_prf+0x21e>
    331c:	09 30       	cpi	r16, 0x09	; 9
    331e:	08 f0       	brcs	.+2      	; 0x3322 <dtoa_prf+0x21e>
    3320:	08 e0       	ldi	r16, 0x08	; 8
    3322:	9b 01       	movw	r18, r22
    3324:	77 ff       	sbrs	r23, 7
    3326:	02 c0       	rjmp	.+4      	; 0x332c <dtoa_prf+0x228>
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	cb 01       	movw	r24, r22
    332e:	01 96       	adiw	r24, 0x01	; 1
    3330:	82 1b       	sub	r24, r18
    3332:	93 0b       	sbc	r25, r19
    3334:	fe 01       	movw	r30, r28
    3336:	31 96       	adiw	r30, 0x01	; 1
    3338:	e8 0f       	add	r30, r24
    333a:	f9 1f       	adc	r31, r25
    333c:	8e e2       	ldi	r24, 0x2E	; 46
    333e:	f8 2e       	mov	r15, r24
    3340:	3b 01       	movw	r6, r22
    3342:	60 1a       	sub	r6, r16
    3344:	71 08       	sbc	r7, r1
    3346:	8a 2d       	mov	r24, r10
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	44 27       	eor	r20, r20
    334c:	55 27       	eor	r21, r21
    334e:	48 1b       	sub	r20, r24
    3350:	59 0b       	sbc	r21, r25
    3352:	8f ef       	ldi	r24, 0xFF	; 255
    3354:	2f 3f       	cpi	r18, 0xFF	; 255
    3356:	38 07       	cpc	r19, r24
    3358:	19 f4       	brne	.+6      	; 0x3360 <dtoa_prf+0x25c>
    335a:	d6 01       	movw	r26, r12
    335c:	fd 92       	st	X+, r15
    335e:	6d 01       	movw	r12, r26
    3360:	62 17       	cp	r22, r18
    3362:	73 07       	cpc	r23, r19
    3364:	2c f0       	brlt	.+10     	; 0x3370 <dtoa_prf+0x26c>
    3366:	62 16       	cp	r6, r18
    3368:	73 06       	cpc	r7, r19
    336a:	14 f4       	brge	.+4      	; 0x3370 <dtoa_prf+0x26c>
    336c:	80 81       	ld	r24, Z
    336e:	01 c0       	rjmp	.+2      	; 0x3372 <dtoa_prf+0x26e>
    3370:	80 e3       	ldi	r24, 0x30	; 48
    3372:	21 50       	subi	r18, 0x01	; 1
    3374:	30 40       	sbci	r19, 0x00	; 0
    3376:	31 96       	adiw	r30, 0x01	; 1
    3378:	24 17       	cp	r18, r20
    337a:	35 07       	cpc	r19, r21
    337c:	24 f0       	brlt	.+8      	; 0x3386 <dtoa_prf+0x282>
    337e:	d6 01       	movw	r26, r12
    3380:	8d 93       	st	X+, r24
    3382:	6d 01       	movw	r12, r26
    3384:	e6 cf       	rjmp	.-52     	; 0x3352 <dtoa_prf+0x24e>
    3386:	26 17       	cp	r18, r22
    3388:	37 07       	cpc	r19, r23
    338a:	49 f4       	brne	.+18     	; 0x339e <dtoa_prf+0x29a>
    338c:	b5 e3       	ldi	r27, 0x35	; 53
    338e:	bb 15       	cp	r27, r11
    3390:	28 f0       	brcs	.+10     	; 0x339c <dtoa_prf+0x298>
    3392:	bb 16       	cp	r11, r27
    3394:	21 f4       	brne	.+8      	; 0x339e <dtoa_prf+0x29a>
    3396:	81 14       	cp	r8, r1
    3398:	91 04       	cpc	r9, r1
    339a:	09 f4       	brne	.+2      	; 0x339e <dtoa_prf+0x29a>
    339c:	81 e3       	ldi	r24, 0x31	; 49
    339e:	f6 01       	movw	r30, r12
    33a0:	81 93       	st	Z+, r24
    33a2:	d6 01       	movw	r26, r12
    33a4:	81 2f       	mov	r24, r17
    33a6:	90 e2       	ldi	r25, 0x20	; 32
    33a8:	02 c0       	rjmp	.+4      	; 0x33ae <dtoa_prf+0x2aa>
    33aa:	9c 93       	st	X, r25
    33ac:	81 50       	subi	r24, 0x01	; 1
    33ae:	11 96       	adiw	r26, 0x01	; 1
    33b0:	88 23       	and	r24, r24
    33b2:	d9 f7       	brne	.-10     	; 0x33aa <dtoa_prf+0x2a6>
    33b4:	e1 0f       	add	r30, r17
    33b6:	f1 1d       	adc	r31, r1
    33b8:	10 82       	st	Z, r1
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	c9 01       	movw	r24, r18
    33c0:	29 96       	adiw	r28, 0x09	; 9
    33c2:	ee e0       	ldi	r30, 0x0E	; 14
    33c4:	0c 94 4a 18 	jmp	0x3094	; 0x3094 <__epilogue_restores__+0x8>

000033c8 <__ftoa_engine>:
    33c8:	28 30       	cpi	r18, 0x08	; 8
    33ca:	08 f0       	brcs	.+2      	; 0x33ce <__ftoa_engine+0x6>
    33cc:	27 e0       	ldi	r18, 0x07	; 7
    33ce:	33 27       	eor	r19, r19
    33d0:	da 01       	movw	r26, r20
    33d2:	99 0f       	add	r25, r25
    33d4:	31 1d       	adc	r19, r1
    33d6:	87 fd       	sbrc	r24, 7
    33d8:	91 60       	ori	r25, 0x01	; 1
    33da:	00 96       	adiw	r24, 0x00	; 0
    33dc:	61 05       	cpc	r22, r1
    33de:	71 05       	cpc	r23, r1
    33e0:	39 f4       	brne	.+14     	; 0x33f0 <__ftoa_engine+0x28>
    33e2:	32 60       	ori	r19, 0x02	; 2
    33e4:	2e 5f       	subi	r18, 0xFE	; 254
    33e6:	3d 93       	st	X+, r19
    33e8:	30 e3       	ldi	r19, 0x30	; 48
    33ea:	2a 95       	dec	r18
    33ec:	e1 f7       	brne	.-8      	; 0x33e6 <__ftoa_engine+0x1e>
    33ee:	08 95       	ret
    33f0:	9f 3f       	cpi	r25, 0xFF	; 255
    33f2:	30 f0       	brcs	.+12     	; 0x3400 <__ftoa_engine+0x38>
    33f4:	80 38       	cpi	r24, 0x80	; 128
    33f6:	71 05       	cpc	r23, r1
    33f8:	61 05       	cpc	r22, r1
    33fa:	09 f0       	breq	.+2      	; 0x33fe <__ftoa_engine+0x36>
    33fc:	3c 5f       	subi	r19, 0xFC	; 252
    33fe:	3c 5f       	subi	r19, 0xFC	; 252
    3400:	3d 93       	st	X+, r19
    3402:	91 30       	cpi	r25, 0x01	; 1
    3404:	08 f0       	brcs	.+2      	; 0x3408 <__ftoa_engine+0x40>
    3406:	80 68       	ori	r24, 0x80	; 128
    3408:	91 1d       	adc	r25, r1
    340a:	df 93       	push	r29
    340c:	cf 93       	push	r28
    340e:	1f 93       	push	r17
    3410:	0f 93       	push	r16
    3412:	ff 92       	push	r15
    3414:	ef 92       	push	r14
    3416:	19 2f       	mov	r17, r25
    3418:	98 7f       	andi	r25, 0xF8	; 248
    341a:	96 95       	lsr	r25
    341c:	e9 2f       	mov	r30, r25
    341e:	96 95       	lsr	r25
    3420:	96 95       	lsr	r25
    3422:	e9 0f       	add	r30, r25
    3424:	ff 27       	eor	r31, r31
    3426:	e2 55       	subi	r30, 0x52	; 82
    3428:	ff 4f       	sbci	r31, 0xFF	; 255
    342a:	99 27       	eor	r25, r25
    342c:	33 27       	eor	r19, r19
    342e:	ee 24       	eor	r14, r14
    3430:	ff 24       	eor	r15, r15
    3432:	a7 01       	movw	r20, r14
    3434:	e7 01       	movw	r28, r14
    3436:	05 90       	lpm	r0, Z+
    3438:	08 94       	sec
    343a:	07 94       	ror	r0
    343c:	28 f4       	brcc	.+10     	; 0x3448 <__ftoa_engine+0x80>
    343e:	36 0f       	add	r19, r22
    3440:	e7 1e       	adc	r14, r23
    3442:	f8 1e       	adc	r15, r24
    3444:	49 1f       	adc	r20, r25
    3446:	51 1d       	adc	r21, r1
    3448:	66 0f       	add	r22, r22
    344a:	77 1f       	adc	r23, r23
    344c:	88 1f       	adc	r24, r24
    344e:	99 1f       	adc	r25, r25
    3450:	06 94       	lsr	r0
    3452:	a1 f7       	brne	.-24     	; 0x343c <__ftoa_engine+0x74>
    3454:	05 90       	lpm	r0, Z+
    3456:	07 94       	ror	r0
    3458:	28 f4       	brcc	.+10     	; 0x3464 <__ftoa_engine+0x9c>
    345a:	e7 0e       	add	r14, r23
    345c:	f8 1e       	adc	r15, r24
    345e:	49 1f       	adc	r20, r25
    3460:	56 1f       	adc	r21, r22
    3462:	c1 1d       	adc	r28, r1
    3464:	77 0f       	add	r23, r23
    3466:	88 1f       	adc	r24, r24
    3468:	99 1f       	adc	r25, r25
    346a:	66 1f       	adc	r22, r22
    346c:	06 94       	lsr	r0
    346e:	a1 f7       	brne	.-24     	; 0x3458 <__ftoa_engine+0x90>
    3470:	05 90       	lpm	r0, Z+
    3472:	07 94       	ror	r0
    3474:	28 f4       	brcc	.+10     	; 0x3480 <__ftoa_engine+0xb8>
    3476:	f8 0e       	add	r15, r24
    3478:	49 1f       	adc	r20, r25
    347a:	56 1f       	adc	r21, r22
    347c:	c7 1f       	adc	r28, r23
    347e:	d1 1d       	adc	r29, r1
    3480:	88 0f       	add	r24, r24
    3482:	99 1f       	adc	r25, r25
    3484:	66 1f       	adc	r22, r22
    3486:	77 1f       	adc	r23, r23
    3488:	06 94       	lsr	r0
    348a:	a1 f7       	brne	.-24     	; 0x3474 <__ftoa_engine+0xac>
    348c:	05 90       	lpm	r0, Z+
    348e:	07 94       	ror	r0
    3490:	20 f4       	brcc	.+8      	; 0x349a <__ftoa_engine+0xd2>
    3492:	49 0f       	add	r20, r25
    3494:	56 1f       	adc	r21, r22
    3496:	c7 1f       	adc	r28, r23
    3498:	d8 1f       	adc	r29, r24
    349a:	99 0f       	add	r25, r25
    349c:	66 1f       	adc	r22, r22
    349e:	77 1f       	adc	r23, r23
    34a0:	88 1f       	adc	r24, r24
    34a2:	06 94       	lsr	r0
    34a4:	a9 f7       	brne	.-22     	; 0x3490 <__ftoa_engine+0xc8>
    34a6:	84 91       	lpm	r24, Z+
    34a8:	10 95       	com	r17
    34aa:	17 70       	andi	r17, 0x07	; 7
    34ac:	41 f0       	breq	.+16     	; 0x34be <__ftoa_engine+0xf6>
    34ae:	d6 95       	lsr	r29
    34b0:	c7 95       	ror	r28
    34b2:	57 95       	ror	r21
    34b4:	47 95       	ror	r20
    34b6:	f7 94       	ror	r15
    34b8:	e7 94       	ror	r14
    34ba:	1a 95       	dec	r17
    34bc:	c1 f7       	brne	.-16     	; 0x34ae <__ftoa_engine+0xe6>
    34be:	e4 e5       	ldi	r30, 0x54	; 84
    34c0:	f0 e0       	ldi	r31, 0x00	; 0
    34c2:	68 94       	set
    34c4:	15 90       	lpm	r1, Z+
    34c6:	15 91       	lpm	r17, Z+
    34c8:	35 91       	lpm	r19, Z+
    34ca:	65 91       	lpm	r22, Z+
    34cc:	95 91       	lpm	r25, Z+
    34ce:	05 90       	lpm	r0, Z+
    34d0:	7f e2       	ldi	r23, 0x2F	; 47
    34d2:	73 95       	inc	r23
    34d4:	e1 18       	sub	r14, r1
    34d6:	f1 0a       	sbc	r15, r17
    34d8:	43 0b       	sbc	r20, r19
    34da:	56 0b       	sbc	r21, r22
    34dc:	c9 0b       	sbc	r28, r25
    34de:	d0 09       	sbc	r29, r0
    34e0:	c0 f7       	brcc	.-16     	; 0x34d2 <__ftoa_engine+0x10a>
    34e2:	e1 0c       	add	r14, r1
    34e4:	f1 1e       	adc	r15, r17
    34e6:	43 1f       	adc	r20, r19
    34e8:	56 1f       	adc	r21, r22
    34ea:	c9 1f       	adc	r28, r25
    34ec:	d0 1d       	adc	r29, r0
    34ee:	7e f4       	brtc	.+30     	; 0x350e <__ftoa_engine+0x146>
    34f0:	70 33       	cpi	r23, 0x30	; 48
    34f2:	11 f4       	brne	.+4      	; 0x34f8 <__ftoa_engine+0x130>
    34f4:	8a 95       	dec	r24
    34f6:	e6 cf       	rjmp	.-52     	; 0x34c4 <__ftoa_engine+0xfc>
    34f8:	e8 94       	clt
    34fa:	01 50       	subi	r16, 0x01	; 1
    34fc:	30 f0       	brcs	.+12     	; 0x350a <__ftoa_engine+0x142>
    34fe:	08 0f       	add	r16, r24
    3500:	0a f4       	brpl	.+2      	; 0x3504 <__ftoa_engine+0x13c>
    3502:	00 27       	eor	r16, r16
    3504:	02 17       	cp	r16, r18
    3506:	08 f4       	brcc	.+2      	; 0x350a <__ftoa_engine+0x142>
    3508:	20 2f       	mov	r18, r16
    350a:	23 95       	inc	r18
    350c:	02 2f       	mov	r16, r18
    350e:	7a 33       	cpi	r23, 0x3A	; 58
    3510:	28 f0       	brcs	.+10     	; 0x351c <__ftoa_engine+0x154>
    3512:	79 e3       	ldi	r23, 0x39	; 57
    3514:	7d 93       	st	X+, r23
    3516:	2a 95       	dec	r18
    3518:	e9 f7       	brne	.-6      	; 0x3514 <__ftoa_engine+0x14c>
    351a:	10 c0       	rjmp	.+32     	; 0x353c <__ftoa_engine+0x174>
    351c:	7d 93       	st	X+, r23
    351e:	2a 95       	dec	r18
    3520:	89 f6       	brne	.-94     	; 0x34c4 <__ftoa_engine+0xfc>
    3522:	06 94       	lsr	r0
    3524:	97 95       	ror	r25
    3526:	67 95       	ror	r22
    3528:	37 95       	ror	r19
    352a:	17 95       	ror	r17
    352c:	17 94       	ror	r1
    352e:	e1 18       	sub	r14, r1
    3530:	f1 0a       	sbc	r15, r17
    3532:	43 0b       	sbc	r20, r19
    3534:	56 0b       	sbc	r21, r22
    3536:	c9 0b       	sbc	r28, r25
    3538:	d0 09       	sbc	r29, r0
    353a:	98 f0       	brcs	.+38     	; 0x3562 <__ftoa_engine+0x19a>
    353c:	23 95       	inc	r18
    353e:	7e 91       	ld	r23, -X
    3540:	73 95       	inc	r23
    3542:	7a 33       	cpi	r23, 0x3A	; 58
    3544:	08 f0       	brcs	.+2      	; 0x3548 <__ftoa_engine+0x180>
    3546:	70 e3       	ldi	r23, 0x30	; 48
    3548:	7c 93       	st	X, r23
    354a:	20 13       	cpse	r18, r16
    354c:	b8 f7       	brcc	.-18     	; 0x353c <__ftoa_engine+0x174>
    354e:	7e 91       	ld	r23, -X
    3550:	70 61       	ori	r23, 0x10	; 16
    3552:	7d 93       	st	X+, r23
    3554:	30 f0       	brcs	.+12     	; 0x3562 <__ftoa_engine+0x19a>
    3556:	83 95       	inc	r24
    3558:	71 e3       	ldi	r23, 0x31	; 49
    355a:	7d 93       	st	X+, r23
    355c:	70 e3       	ldi	r23, 0x30	; 48
    355e:	2a 95       	dec	r18
    3560:	e1 f7       	brne	.-8      	; 0x355a <__ftoa_engine+0x192>
    3562:	11 24       	eor	r1, r1
    3564:	ef 90       	pop	r14
    3566:	ff 90       	pop	r15
    3568:	0f 91       	pop	r16
    356a:	1f 91       	pop	r17
    356c:	cf 91       	pop	r28
    356e:	df 91       	pop	r29
    3570:	99 27       	eor	r25, r25
    3572:	87 fd       	sbrc	r24, 7
    3574:	90 95       	com	r25
    3576:	08 95       	ret

00003578 <_exit>:
    3578:	f8 94       	cli

0000357a <__stop_program>:
    357a:	ff cf       	rjmp	.-2      	; 0x357a <__stop_program>
